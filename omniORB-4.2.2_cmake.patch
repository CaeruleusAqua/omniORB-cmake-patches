From 0c98976081f1c7383883bdd7d4c4bb0ec7594d4f Mon Sep 17 00:00:00 2001
From: scholle <julian.scholle@iff.fraunhofer.de>
Date: Thu, 20 Dec 2018 21:33:48 +0100
Subject: [PATCH] patch commit

---
 CMakeLists.txt                                |  47 +
 cmake/CheckFunctionExistsHeader.cmake         |  23 +
 cmake/CheckHeaderSTDC.c                       |  20 +
 cmake/CheckHeaderSTDC.cmake                   |  52 +
 cmake/CheckStackDirection.c                   |  36 +
 cmake/CheckStackDirection.cmake               |  65 ++
 cmake/CheckWinVer.cmake                       |  18 +
 cmake/OmniORBConfig.cmake.in                  |  19 +
 cmake/modules/CMakeFindFrameworks.cmake       |  32 +
 .../FindPackageHandleStandardArgs.cmake       | 386 ++++++++
 cmake/modules/FindPackageMessage.cmake        |  47 +
 cmake/modules/FindPython.cmake                | 181 ++++
 cmake/modules/FindPython/Support.cmake        | 929 ++++++++++++++++++
 cmake/modules/FindPython2.cmake               | 146 +++
 cmake/modules/FindPython3.cmake               | 146 +++
 cmake/modules/FindPythonInterp.cmake          | 161 +++
 cmake/modules/FindPythonLibs.cmake            | 354 +++++++
 .../modules/SelectLibraryConfigurations.cmake |  71 ++
 cmake/run_omniidl.cmake                       |  19 +
 cmake/timeofdayTimezone.c                     |   7 +
 codegen.cmake                                 |  74 ++
 contrib/CMakeLists.txt                        |   3 +
 contrib/pkgconfig/CMakeLists.txt              |  28 +
 include/.gitignore                            |   1 +
 include/omniORB4/.gitignore                   |   1 +
 include/omniORB4/CORBA.h                      |   8 +-
 include/omniORB4/CORBA_sysdep.h               |   5 +
 include/omniORB4/acconfig_cmake.h.in          | 342 +++++++
 include/omniORB4/aconfig.h                    | 253 +++++
 include/omniORB4/internal/codeSetUtil.h       |   2 +-
 package_config.cmake                          |  27 +
 platform_checks.cmake                         | 263 +++++
 src/CMakeLists.txt                            |   6 +
 src/appl/CMakeLists.txt                       |   3 +
 src/appl/omniMapper/CMakeLists.txt            |  20 +
 src/appl/omniNames/CMakeLists.txt             |  31 +
 src/appl/utils/CMakeLists.txt                 |   4 +
 src/appl/utils/catior/CMakeLists.txt          |   7 +
 src/appl/utils/convertior/CMakeLists.txt      |   7 +
 src/appl/utils/genior/CMakeLists.txt          |   7 +
 src/appl/utils/nameclt/CMakeLists.txt         |   7 +
 src/examples/CMakeLists.txt                   |   1 +
 src/examples/valuetype/CMakeLists.txt         |   1 +
 src/examples/valuetype/simple/CMakeLists.txt  |  25 +
 src/lib/CMakeLists.txt                        |   2 +
 src/lib/omniORB/CMakeLists.txt                |  18 +
 src/lib/omniORB/codesets/CMakeLists.txt       |  47 +
 src/lib/omniORB/connections/CMakeLists.txt    |  24 +
 src/lib/omniORB/dynamic/CMakeLists.txt        |  58 ++
 src/lib/omniORB/orbcore/CMakeLists.txt        | 216 ++++
 src/lib/omniORB/orbcore/ssl/CMakeLists.txt    |  56 ++
 src/lib/omniORB/ziop/CMakeLists.txt           |  35 +
 src/lib/omniORB/ziopdynamic/CMakeLists.txt    |  31 +
 src/lib/omnithread/CMakeLists.txt             |  31 +
 src/services/CMakeLists.txt                   |   1 +
 src/services/mklib/CMakeLists.txt             |  90 ++
 src/tool/CMakeLists.txt                       |   2 +
 src/tool/omkdepend/CMakeLists.txt             |  12 +
 src/tool/omniidl/CMakeLists.txt               |   1 +
 src/tool/omniidl/cxx/CMakeLists.txt           |  98 ++
 src/tool/omniidl/cxx/cccp/CMakeLists.txt      |  19 +
 61 files changed, 4623 insertions(+), 3 deletions(-)
 create mode 100755 CMakeLists.txt
 create mode 100644 cmake/CheckFunctionExistsHeader.cmake
 create mode 100644 cmake/CheckHeaderSTDC.c
 create mode 100644 cmake/CheckHeaderSTDC.cmake
 create mode 100644 cmake/CheckStackDirection.c
 create mode 100644 cmake/CheckStackDirection.cmake
 create mode 100644 cmake/CheckWinVer.cmake
 create mode 100644 cmake/OmniORBConfig.cmake.in
 create mode 100644 cmake/modules/CMakeFindFrameworks.cmake
 create mode 100644 cmake/modules/FindPackageHandleStandardArgs.cmake
 create mode 100644 cmake/modules/FindPackageMessage.cmake
 create mode 100644 cmake/modules/FindPython.cmake
 create mode 100644 cmake/modules/FindPython/Support.cmake
 create mode 100644 cmake/modules/FindPython2.cmake
 create mode 100644 cmake/modules/FindPython3.cmake
 create mode 100644 cmake/modules/FindPythonInterp.cmake
 create mode 100644 cmake/modules/FindPythonLibs.cmake
 create mode 100644 cmake/modules/SelectLibraryConfigurations.cmake
 create mode 100644 cmake/run_omniidl.cmake
 create mode 100644 cmake/timeofdayTimezone.c
 create mode 100755 codegen.cmake
 create mode 100644 contrib/CMakeLists.txt
 create mode 100644 contrib/pkgconfig/CMakeLists.txt
 create mode 100644 include/.gitignore
 create mode 100644 include/omniORB4/.gitignore
 create mode 100644 include/omniORB4/acconfig_cmake.h.in
 create mode 100644 include/omniORB4/aconfig.h
 create mode 100644 package_config.cmake
 create mode 100644 platform_checks.cmake
 create mode 100755 src/CMakeLists.txt
 create mode 100755 src/appl/CMakeLists.txt
 create mode 100644 src/appl/omniMapper/CMakeLists.txt
 create mode 100644 src/appl/omniNames/CMakeLists.txt
 create mode 100755 src/appl/utils/CMakeLists.txt
 create mode 100644 src/appl/utils/catior/CMakeLists.txt
 create mode 100644 src/appl/utils/convertior/CMakeLists.txt
 create mode 100644 src/appl/utils/genior/CMakeLists.txt
 create mode 100644 src/appl/utils/nameclt/CMakeLists.txt
 create mode 100644 src/examples/CMakeLists.txt
 create mode 100644 src/examples/valuetype/CMakeLists.txt
 create mode 100644 src/examples/valuetype/simple/CMakeLists.txt
 create mode 100755 src/lib/CMakeLists.txt
 create mode 100755 src/lib/omniORB/CMakeLists.txt
 create mode 100644 src/lib/omniORB/codesets/CMakeLists.txt
 create mode 100644 src/lib/omniORB/connections/CMakeLists.txt
 create mode 100644 src/lib/omniORB/dynamic/CMakeLists.txt
 create mode 100644 src/lib/omniORB/orbcore/CMakeLists.txt
 create mode 100644 src/lib/omniORB/orbcore/ssl/CMakeLists.txt
 create mode 100644 src/lib/omniORB/ziop/CMakeLists.txt
 create mode 100644 src/lib/omniORB/ziopdynamic/CMakeLists.txt
 create mode 100644 src/lib/omnithread/CMakeLists.txt
 create mode 100755 src/services/CMakeLists.txt
 create mode 100755 src/services/mklib/CMakeLists.txt
 create mode 100755 src/tool/CMakeLists.txt
 create mode 100644 src/tool/omkdepend/CMakeLists.txt
 create mode 100755 src/tool/omniidl/CMakeLists.txt
 create mode 100644 src/tool/omniidl/cxx/CMakeLists.txt
 create mode 100644 src/tool/omniidl/cxx/cccp/CMakeLists.txt

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100755
index 0000000..786633d
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,47 @@
+cmake_minimum_required(VERSION 3.0)
+project(OmniORB VERSION 4.2.2)
+
+set(CMAKE_CXX_STANDARD 98)
+set(CMAKE_VERBOSE_MAKEFILE OFF)
+
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_LIST_DIR}/cmake/modules)
+set(OMNIORB_VERSION ${PROJECT_VERSION})
+set(OMNIORB_VERSION_HEX "0x040202F1")
+add_definitions(-D__OMNIORB4__)
+
+set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
+set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
+set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
+
+
+
+find_package(Python REQUIRED COMPONENTS Interpreter Development)
+find_package(Threads REQUIRED)
+
+if(UNIX)
+execute_process(
+        COMMAND "${Python_EXECUTABLE}" -c "if True:
+    from distutils import sysconfig as sc
+    print(sc.get_python_lib(prefix='', plat_specific=True))"
+        OUTPUT_VARIABLE PYTHON_SITE
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+else()
+    set(PYTHON_SITE Lib/site-packages)
+endif()
+
+include(GNUInstallDirs)
+include(codegen.cmake)
+include(platform_checks.cmake)
+include(package_config.cmake)
+
+
+add_subdirectory(contrib)
+add_subdirectory(src)
+
+
+INSTALL(
+        DIRECTORY ${PROJECT_SOURCE_DIR}/include/
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+        FILES_MATCHING PATTERN "*.h*")
+
+
diff --git a/cmake/CheckFunctionExistsHeader.cmake b/cmake/CheckFunctionExistsHeader.cmake
new file mode 100644
index 0000000..4ade846
--- /dev/null
+++ b/cmake/CheckFunctionExistsHeader.cmake
@@ -0,0 +1,23 @@
+#
+# - Check if the system has the ANSI C files
+# CHECK_STACK_DIRECTION
+#
+# The following variables may be set before calling this macro to
+# modify the way the check is run:
+#
+#  CMAKE_REQUIRED_FLAGS = string of compile command line flags
+#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
+#  CMAKE_REQUIRED_INCLUDES = list of include directories
+# Copyright (c) 2009, Michihiro NAKAJIMA
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+# RETURN_VALUE > 0 => grows toward higher addresses
+# RETURN_VALUE < 0 => grows toward lower addresses
+# RETURN_VALUE = 0 => direction of growth unknown */
+
+macro(CHECK_FUNCTION_EXISTS_HEADER FUNCTION RETURN_VALUE INCLUDES)
+
+
+
+endmacro()
\ No newline at end of file
diff --git a/cmake/CheckHeaderSTDC.c b/cmake/CheckHeaderSTDC.c
new file mode 100644
index 0000000..0ea5b33
--- /dev/null
+++ b/cmake/CheckHeaderSTDC.c
@@ -0,0 +1,20 @@
+#include <stdlib.h>
+#include <stdarg.h>
+#include <string.h>
+#include <ctype.h>
+
+#define ISLOWER(c) ('a' <= (c) && (c) <= 'z')
+#define TOUPPER(c) (ISLOWER(c) ? 'A' + ((c) - 'a') : (c))
+#define XOR(e, f) (((e) && !(f)) || (!(e) && (f)))
+
+int
+main()
+{
+    int i;
+
+    for (i = 0; i < 256; i++) {
+        if (XOR(islower(i), ISLOWER(i)) || toupper(i) != TOUPPER(i))
+            return 2;
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/cmake/CheckHeaderSTDC.cmake b/cmake/CheckHeaderSTDC.cmake
new file mode 100644
index 0000000..f0b3f46
--- /dev/null
+++ b/cmake/CheckHeaderSTDC.cmake
@@ -0,0 +1,52 @@
+#
+# - Check if the system has the ANSI C files
+# CHECK_HEADER_STDC
+#
+# The following variables may be set before calling this macro to
+# modify the way the check is run:
+#
+#  CMAKE_REQUIRED_FLAGS = string of compile command line flags
+#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
+#  CMAKE_REQUIRED_INCLUDES = list of include directories
+# Copyright (c) 2009, Michihiro NAKAJIMA
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+macro(CHECK_HEADER_STDC RETURN_VALUE)
+    if (NOT DEFINED ${RETURN_VALUE})
+        if (CMAKE_REQUIRED_INCLUDES)
+            set(CHECK_HEADER_STDC_C_INCLUDE_DIRS "-DINCLUDE_DIRECTORIES=${CMAKE_REQUIRED_INCLUDES}")
+        else()
+            set(CHECK_HEADER_STDC_C_INCLUDE_DIRS)
+        endif()
+        set(MACRO_CHECK_HEADER_STDC_FLAGS ${CMAKE_REQUIRED_FLAGS})
+
+        message(STATUS "Check for ANSI C header files")
+        try_run(CHECK_HEADER_STDC_result
+                CHECK_HEADER_STDC_compile_result
+                ${PROJECT_BINARY_DIR}
+                ${CMAKE_CURRENT_SOURCE_DIR}/cmake/CheckHeaderSTDC.c
+                COMPILE_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS}
+                CMAKE_FLAGS
+                -DCOMPILE_DEFINITIONS:STRING=${MACRO_CHECK_HEADER_STDC_FLAGS}
+                "${CHECK_HEADER_STDC_C_INCLUDE_DIRS}"
+                OUTPUT_VARIABLE OUTPUT)
+
+        if(CHECK_HEADER_STDC_result EQUAL 0)
+            message(STATUS "Check for ANSI C header files - found")
+            set(${RETURN_VALUE} "1" CACHE INTERNAL "CHECK_HEADER_STDC")
+            file(APPEND ${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log
+                    "Determining if the include file ${INCLUDE} "
+                    "exists passed with the following output:\n"
+                    "${OUTPUT}\n\n")
+        else()
+            message(STATUS "Check for ANSI C header files - not found")
+            set(${RETURN_VALUE} "")
+            file(APPEND ${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log
+                    "Determining if the include file ${INCLUDE} "
+                    "exists failed with the following output:\n"
+                    "${OUTPUT}\n\n")
+        endif()
+    endif()
+endmacro()
\ No newline at end of file
diff --git a/cmake/CheckStackDirection.c b/cmake/CheckStackDirection.c
new file mode 100644
index 0000000..2dc32c6
--- /dev/null
+++ b/cmake/CheckStackDirection.c
@@ -0,0 +1,36 @@
+/* Copyright (c) 2010-2018. The SimGrid Team.
+ * All rights reserved.                                                     */
+
+/* This program is free software; you can redistribute it and/or modify it
+ * under the terms of the license (GNU LGPL) which comes with this package. */
+
+#include <stdio.h>
+#include <stdlib.h>
+
+static int iterate = 10;
+static int growsdown(int *x)
+{
+    int y = (x > &y);
+
+    if (--iterate > 0)
+        y = growsdown(&y);
+
+    /* The stack sometimes changes at the 0th level.
+     * Original version did fail in this case, but I changed this around SimGrid 3.13 because of https://bugs.debian.org/814272
+     * Every arch failed on that day :(
+     */
+    if (iterate != 0 && y != (x > &y)) {
+        fprintf(stderr, "The stack changed its direction! (Iteration: %d. It was growing %s; &y=%p; &prevY=%p)\n",
+                (10 - iterate), y ? "down" : "up", &y, x);
+        exit(1);
+    }
+    return y;
+}
+
+int main(int argc, char *argv[])
+{
+    int x;
+    printf("%s", growsdown(&x) ? "down" : "up");
+
+    return 0;
+}
\ No newline at end of file
diff --git a/cmake/CheckStackDirection.cmake b/cmake/CheckStackDirection.cmake
new file mode 100644
index 0000000..bc716c5
--- /dev/null
+++ b/cmake/CheckStackDirection.cmake
@@ -0,0 +1,65 @@
+#
+# - Check if the system has the ANSI C files
+# CHECK_STACK_DIRECTION
+#
+# The following variables may be set before calling this macro to
+# modify the way the check is run:
+#
+#  CMAKE_REQUIRED_FLAGS = string of compile command line flags
+#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
+#  CMAKE_REQUIRED_INCLUDES = list of include directories
+# Copyright (c) 2009, Michihiro NAKAJIMA
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+# RETURN_VALUE > 0 => grows toward higher addresses
+# RETURN_VALUE < 0 => grows toward lower addresses
+# RETURN_VALUE = 0 => direction of growth unknown */
+
+macro(CHECK_STACK_DIRECTION RETURN_VALUE)
+    if (NOT DEFINED ${RETURN_VALUE})
+        if (CMAKE_REQUIRED_INCLUDES)
+            set(CHECK_STACK_DIRECTION_C_INCLUDE_DIRS "-DINCLUDE_DIRECTORIES=${CMAKE_REQUIRED_INCLUDES}")
+        else ()
+            set(CHECK_STACK_DIRECTION_C_INCLUDE_DIRS)
+        endif ()
+        set(MACRO_CHECK_STACK_DIRECTION_FLAGS ${CMAKE_REQUIRED_FLAGS})
+
+        message(STATUS "Check stack growing direction")
+
+
+        try_run(CHECK_STACK_DIRECTION_result
+                CHECK_STACK_DIRECTION_compile_result
+                ${PROJECT_BINARY_DIR}
+                ${CMAKE_CURRENT_SOURCE_DIR}/cmake/CheckStackDirection.c
+                COMPILE_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS}
+                CMAKE_FLAGS
+                -DCOMPILE_DEFINITIONS:STRING=${MACRO_CHECK_STACK_DIRECTION_FLAGS}
+                "${CHECK_STACK_DIRECTION_C_INCLUDE_DIRS}"
+                RUN_OUTPUT_VARIABLE stack
+                )
+
+        if ("${stack}" STREQUAL "down")
+            set(${RETURN_VALUE} "-1" CACHE INTERNAL "CHECK_STACK_DIRECTION")
+            message(STATUS "Check for stack growing direction - downwards")
+            file(APPEND ${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log
+                    "Determining if the include file ${INCLUDE} "
+                    "exists passed with the following output:\n"
+                    "${stack}\n\n")
+        elseif ("${stack}" STREQUAL "up")
+            set(${RETURN_VALUE} "1" CACHE INTERNAL "CHECK_STACK_DIRECTION")
+            message(STATUS "Check for stack growing direction - upwards")
+            file(APPEND ${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log
+                    "Determining the stack direction ${INCLUDE} "
+                    "passed with the following output:\n"
+                    "${stack}\n\n")
+        else ()
+            message(STATUS "Check for stack growing direction - unknown")
+            file(APPEND ${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log
+                    "Determining the stack direction ${INCLUDE} "
+                    "failed with the following output:\n"
+                    "${stack}\n\n")
+        endif ()
+    endif ()
+
+endmacro()
\ No newline at end of file
diff --git a/cmake/CheckWinVer.cmake b/cmake/CheckWinVer.cmake
new file mode 100644
index 0000000..10741f9
--- /dev/null
+++ b/cmake/CheckWinVer.cmake
@@ -0,0 +1,18 @@
+
+macro(get_WIN32_WINNT version)
+    if (CMAKE_SYSTEM_VERSION)
+        set(ver ${CMAKE_SYSTEM_VERSION})
+        string(REGEX MATCH "^([0-9]+).([0-9])" ver ${ver})
+        string(REGEX MATCH "^([0-9]+)" verMajor ${ver})
+        # Check for Windows 10, b/c we'll need to convert to hex 'A'.
+        if ("${verMajor}" MATCHES "10")
+            set(verMajor "A")
+            string(REGEX REPLACE "^([0-9]+)" ${verMajor} ver ${ver})
+        endif ("${verMajor}" MATCHES "10")
+        # Remove all remaining '.' characters.
+        string(REPLACE "." "" ver ${ver})
+        # Prepend each digit with a zero.
+        string(REGEX REPLACE "([0-9A-Z])" "0\\1" ver ${ver})
+        set(${version} "0x${ver}")
+    endif(CMAKE_SYSTEM_VERSION)
+endmacro(get_WIN32_WINNT)
diff --git a/cmake/OmniORBConfig.cmake.in b/cmake/OmniORBConfig.cmake.in
new file mode 100644
index 0000000..aea297a
--- /dev/null
+++ b/cmake/OmniORBConfig.cmake.in
@@ -0,0 +1,19 @@
+set(OMNIORB_VERSION @PROJECT_VERSION@)
+
+@PACKAGE_INIT@
+
+
+include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")
+
+find_package(Threads REQUIRED)
+
+message(STATUS "Found @PROJECT_NAME@ (found version \"@PROJECT_VERSION@\")")
+set(OMNIORB4_IDL_COMPILER @OMNIIDL_EXEC_INSTALL@)
+set(OMNIIDL_PLATFORM_FLAGS @OMNIIDL_PLATFORM_FLAGS@)
+set_and_check(OMNI_PYTHON_RESOURCES ${PACKAGE_PREFIX_DIR}/@OMNI_PYTHON_RESOURCES_INSTALL@)
+set(RUN_OMNIIDL_DEPS OmniORB::omniidl OmniORB::omnicpp)
+set(OMNIORB4_LIBRARIES OmniORB::omniORB4 OmniORB::omnithread OmniORB::omniDynamic4 OmniORB::COS4 OmniORB::COSDynamic4)
+get_target_property(OMNIORB4_INCLUDE_DIR OmniORB::omniORB4 INTERFACE_INCLUDE_DIRECTORIES)
+
+
+include(${CMAKE_CURRENT_LIST_DIR}/run_omniidl.cmake)
\ No newline at end of file
diff --git a/cmake/modules/CMakeFindFrameworks.cmake b/cmake/modules/CMakeFindFrameworks.cmake
new file mode 100644
index 0000000..6c4c527
--- /dev/null
+++ b/cmake/modules/CMakeFindFrameworks.cmake
@@ -0,0 +1,32 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#.rst:
+# CMakeFindFrameworks
+# -------------------
+#
+# helper module to find OSX frameworks
+#
+# This module reads hints about search locations from variables::
+#
+#   CMAKE_FIND_FRAMEWORK_EXTRA_LOCATIONS - Extra directories
+
+if(NOT CMAKE_FIND_FRAMEWORKS_INCLUDED)
+  set(CMAKE_FIND_FRAMEWORKS_INCLUDED 1)
+  macro(CMAKE_FIND_FRAMEWORKS fwk)
+    set(${fwk}_FRAMEWORKS)
+    if(APPLE)
+      foreach(dir
+          ~/Library/Frameworks/${fwk}.framework
+          /usr/local/Frameworks/${fwk}.framework
+          /Library/Frameworks/${fwk}.framework
+          /System/Library/Frameworks/${fwk}.framework
+          /Network/Library/Frameworks/${fwk}.framework
+          ${CMAKE_FIND_FRAMEWORK_EXTRA_LOCATIONS})
+        if(EXISTS ${dir})
+          set(${fwk}_FRAMEWORKS ${${fwk}_FRAMEWORKS} ${dir})
+        endif()
+      endforeach()
+    endif()
+  endmacro()
+endif()
diff --git a/cmake/modules/FindPackageHandleStandardArgs.cmake b/cmake/modules/FindPackageHandleStandardArgs.cmake
new file mode 100644
index 0000000..67f6bd6
--- /dev/null
+++ b/cmake/modules/FindPackageHandleStandardArgs.cmake
@@ -0,0 +1,386 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#[=======================================================================[.rst:
+FindPackageHandleStandardArgs
+-----------------------------
+
+This module provides a function intended to be used in :ref:`Find Modules`
+implementing :command:`find_package(<PackageName>)` calls.  It handles the
+``REQUIRED``, ``QUIET`` and version-related arguments of ``find_package``.
+It also sets the ``<PackageName>_FOUND`` variable.  The package is
+considered found if all variables listed contain valid results, e.g.
+valid filepaths.
+
+.. command:: find_package_handle_standard_args
+
+  There are two signatures::
+
+    find_package_handle_standard_args(<PackageName>
+      (DEFAULT_MSG|<custom-failure-message>)
+      <required-var>...
+      )
+
+    find_package_handle_standard_args(<PackageName>
+      [FOUND_VAR <result-var>]
+      [REQUIRED_VARS <required-var>...]
+      [VERSION_VAR <version-var>]
+      [HANDLE_COMPONENTS]
+      [CONFIG_MODE]
+      [FAIL_MESSAGE <custom-failure-message>]
+      )
+
+  The ``<PackageName>_FOUND`` variable will be set to ``TRUE`` if all
+  the variables ``<required-var>...`` are valid and any optional
+  constraints are satisfied, and ``FALSE`` otherwise.  A success or
+  failure message may be displayed based on the results and on
+  whether the ``REQUIRED`` and/or ``QUIET`` option was given to
+  the :command:`find_package` call.
+
+  The options are:
+
+  ``(DEFAULT_MSG|<custom-failure-message>)``
+    In the simple signature this specifies the failure message.
+    Use ``DEFAULT_MSG`` to ask for a default message to be computed
+    (recommended).  Not valid in the full signature.
+
+  ``FOUND_VAR <result-var>``
+    Obsolete.  Specifies either ``<PackageName>_FOUND`` or
+    ``<PACKAGENAME>_FOUND`` as the result variable.  This exists only
+    for compatibility with older versions of CMake and is now ignored.
+    Result variables of both names are always set for compatibility.
+
+  ``REQUIRED_VARS <required-var>...``
+    Specify the variables which are required for this package.
+    These may be named in the generated failure message asking the
+    user to set the missing variable values.  Therefore these should
+    typically be cache entries such as ``FOO_LIBRARY`` and not output
+    variables like ``FOO_LIBRARIES``.
+
+  ``VERSION_VAR <version-var>``
+    Specify the name of a variable that holds the version of the package
+    that has been found.  This version will be checked against the
+    (potentially) specified required version given to the
+    :command:`find_package` call, including its ``EXACT`` option.
+    The default messages include information about the required
+    version and the version which has been actually found, both
+    if the version is ok or not.
+
+  ``HANDLE_COMPONENTS``
+    Enable handling of package components.  In this case, the command
+    will report which components have been found and which are missing,
+    and the ``<PackageName>_FOUND`` variable will be set to ``FALSE``
+    if any of the required components (i.e. not the ones listed after
+    the ``OPTIONAL_COMPONENTS`` option of :command:`find_package`) are
+    missing.
+
+  ``CONFIG_MODE``
+    Specify that the calling find module is a wrapper around a
+    call to ``find_package(<PackageName> NO_MODULE)``.  This implies
+    a ``VERSION_VAR`` value of ``<PackageName>_VERSION``.  The command
+    will automatically check whether the package configuration file
+    was found.
+
+  ``FAIL_MESSAGE <custom-failure-message>``
+    Specify a custom failure message instead of using the default
+    generated message.  Not recommended.
+
+Example for the simple signature:
+
+.. code-block:: cmake
+
+  find_package_handle_standard_args(LibXml2 DEFAULT_MSG
+    LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)
+
+The ``LibXml2`` package is considered to be found if both
+``LIBXML2_LIBRARY`` and ``LIBXML2_INCLUDE_DIR`` are valid.
+Then also ``LibXml2_FOUND`` is set to ``TRUE``.  If it is not found
+and ``REQUIRED`` was used, it fails with a
+:command:`message(FATAL_ERROR)`, independent whether ``QUIET`` was
+used or not.  If it is found, success will be reported, including
+the content of the first ``<required-var>``.  On repeated CMake runs,
+the same message will not be printed again.
+
+Example for the full signature:
+
+.. code-block:: cmake
+
+  find_package_handle_standard_args(LibArchive
+    REQUIRED_VARS LibArchive_LIBRARY LibArchive_INCLUDE_DIR
+    VERSION_VAR LibArchive_VERSION)
+
+In this case, the ``LibArchive`` package is considered to be found if
+both ``LibArchive_LIBRARY`` and ``LibArchive_INCLUDE_DIR`` are valid.
+Also the version of ``LibArchive`` will be checked by using the version
+contained in ``LibArchive_VERSION``.  Since no ``FAIL_MESSAGE`` is given,
+the default messages will be printed.
+
+Another example for the full signature:
+
+.. code-block:: cmake
+
+  find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)
+  find_package_handle_standard_args(Automoc4  CONFIG_MODE)
+
+In this case, a ``FindAutmoc4.cmake`` module wraps a call to
+``find_package(Automoc4 NO_MODULE)`` and adds an additional search
+directory for ``automoc4``.  Then the call to
+``find_package_handle_standard_args`` produces a proper success/failure
+message.
+#]=======================================================================]
+
+include(${CMAKE_CURRENT_LIST_DIR}/FindPackageMessage.cmake)
+
+# internal helper macro
+macro(_FPHSA_FAILURE_MESSAGE _msg)
+  if (${_NAME}_FIND_REQUIRED)
+    message(FATAL_ERROR "${_msg}")
+  else ()
+    if (NOT ${_NAME}_FIND_QUIETLY)
+      message(STATUS "${_msg}")
+    endif ()
+  endif ()
+endmacro()
+
+
+# internal helper macro to generate the failure message when used in CONFIG_MODE:
+macro(_FPHSA_HANDLE_FAILURE_CONFIG_MODE)
+  # <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:
+  if(${_NAME}_CONFIG)
+    _FPHSA_FAILURE_MESSAGE("${FPHSA_FAIL_MESSAGE}: missing:${MISSING_VARS} (found ${${_NAME}_CONFIG} ${VERSION_MSG})")
+  else()
+    # If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.
+    # List them all in the error message:
+    if(${_NAME}_CONSIDERED_CONFIGS)
+      set(configsText "")
+      list(LENGTH ${_NAME}_CONSIDERED_CONFIGS configsCount)
+      math(EXPR configsCount "${configsCount} - 1")
+      foreach(currentConfigIndex RANGE ${configsCount})
+        list(GET ${_NAME}_CONSIDERED_CONFIGS ${currentConfigIndex} filename)
+        list(GET ${_NAME}_CONSIDERED_VERSIONS ${currentConfigIndex} version)
+        string(APPEND configsText "    ${filename} (version ${version})\n")
+      endforeach()
+      if (${_NAME}_NOT_FOUND_MESSAGE)
+        string(APPEND configsText "    Reason given by package: ${${_NAME}_NOT_FOUND_MESSAGE}\n")
+      endif()
+      _FPHSA_FAILURE_MESSAGE("${FPHSA_FAIL_MESSAGE} ${VERSION_MSG}, checked the following files:\n${configsText}")
+
+    else()
+      # Simple case: No Config-file was found at all:
+      _FPHSA_FAILURE_MESSAGE("${FPHSA_FAIL_MESSAGE}: found neither ${_NAME}Config.cmake nor ${_NAME_LOWER}-config.cmake ${VERSION_MSG}")
+    endif()
+  endif()
+endmacro()
+
+
+function(FIND_PACKAGE_HANDLE_STANDARD_ARGS _NAME _FIRST_ARG)
+
+# Set up the arguments for `cmake_parse_arguments`.
+  set(options  CONFIG_MODE  HANDLE_COMPONENTS)
+  set(oneValueArgs  FAIL_MESSAGE  VERSION_VAR  FOUND_VAR)
+  set(multiValueArgs REQUIRED_VARS)
+
+# Check whether we are in 'simple' or 'extended' mode:
+  set(_KEYWORDS_FOR_EXTENDED_MODE  ${options} ${oneValueArgs} ${multiValueArgs} )
+  list(FIND _KEYWORDS_FOR_EXTENDED_MODE "${_FIRST_ARG}" INDEX)
+
+  if(${INDEX} EQUAL -1)
+    set(FPHSA_FAIL_MESSAGE ${_FIRST_ARG})
+    set(FPHSA_REQUIRED_VARS ${ARGN})
+    set(FPHSA_VERSION_VAR)
+  else()
+    cmake_parse_arguments(FPHSA "${options}" "${oneValueArgs}" "${multiValueArgs}"  ${_FIRST_ARG} ${ARGN})
+
+    if(FPHSA_UNPARSED_ARGUMENTS)
+      message(FATAL_ERROR "Unknown keywords given to FIND_PACKAGE_HANDLE_STANDARD_ARGS(): \"${FPHSA_UNPARSED_ARGUMENTS}\"")
+    endif()
+
+    if(NOT FPHSA_FAIL_MESSAGE)
+      set(FPHSA_FAIL_MESSAGE  "DEFAULT_MSG")
+    endif()
+
+    # In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()
+    # when it successfully found the config-file, including version checking:
+    if(FPHSA_CONFIG_MODE)
+      list(INSERT FPHSA_REQUIRED_VARS 0 ${_NAME}_CONFIG)
+      list(REMOVE_DUPLICATES FPHSA_REQUIRED_VARS)
+      set(FPHSA_VERSION_VAR ${_NAME}_VERSION)
+    endif()
+
+    if(NOT FPHSA_REQUIRED_VARS)
+      message(FATAL_ERROR "No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS()")
+    endif()
+  endif()
+
+# now that we collected all arguments, process them
+
+  if("x${FPHSA_FAIL_MESSAGE}" STREQUAL "xDEFAULT_MSG")
+    set(FPHSA_FAIL_MESSAGE "Could NOT find ${_NAME}")
+  endif()
+
+  list(GET FPHSA_REQUIRED_VARS 0 _FIRST_REQUIRED_VAR)
+
+  string(TOUPPER ${_NAME} _NAME_UPPER)
+  string(TOLOWER ${_NAME} _NAME_LOWER)
+
+  if(FPHSA_FOUND_VAR)
+    if(FPHSA_FOUND_VAR MATCHES "^${_NAME}_FOUND$"  OR  FPHSA_FOUND_VAR MATCHES "^${_NAME_UPPER}_FOUND$")
+      set(_FOUND_VAR ${FPHSA_FOUND_VAR})
+    else()
+      message(FATAL_ERROR "The argument for FOUND_VAR is \"${FPHSA_FOUND_VAR}\", but only \"${_NAME}_FOUND\" and \"${_NAME_UPPER}_FOUND\" are valid names.")
+    endif()
+  else()
+    set(_FOUND_VAR ${_NAME_UPPER}_FOUND)
+  endif()
+
+  # collect all variables which were not found, so they can be printed, so the
+  # user knows better what went wrong (#6375)
+  set(MISSING_VARS "")
+  set(DETAILS "")
+  # check if all passed variables are valid
+  set(FPHSA_FOUND_${_NAME} TRUE)
+  foreach(_CURRENT_VAR ${FPHSA_REQUIRED_VARS})
+    if(NOT ${_CURRENT_VAR})
+      set(FPHSA_FOUND_${_NAME} FALSE)
+      string(APPEND MISSING_VARS " ${_CURRENT_VAR}")
+    else()
+      string(APPEND DETAILS "[${${_CURRENT_VAR}}]")
+    endif()
+  endforeach()
+  if(FPHSA_FOUND_${_NAME})
+    set(${_NAME}_FOUND TRUE)
+    set(${_NAME_UPPER}_FOUND TRUE)
+  else()
+    set(${_NAME}_FOUND FALSE)
+    set(${_NAME_UPPER}_FOUND FALSE)
+  endif()
+
+  # component handling
+  unset(FOUND_COMPONENTS_MSG)
+  unset(MISSING_COMPONENTS_MSG)
+
+  if(FPHSA_HANDLE_COMPONENTS)
+    foreach(comp ${${_NAME}_FIND_COMPONENTS})
+      if(${_NAME}_${comp}_FOUND)
+
+        if(NOT DEFINED FOUND_COMPONENTS_MSG)
+          set(FOUND_COMPONENTS_MSG "found components: ")
+        endif()
+        string(APPEND FOUND_COMPONENTS_MSG " ${comp}")
+
+      else()
+
+        if(NOT DEFINED MISSING_COMPONENTS_MSG)
+          set(MISSING_COMPONENTS_MSG "missing components: ")
+        endif()
+        string(APPEND MISSING_COMPONENTS_MSG " ${comp}")
+
+        if(${_NAME}_FIND_REQUIRED_${comp})
+          set(${_NAME}_FOUND FALSE)
+          string(APPEND MISSING_VARS " ${comp}")
+        endif()
+
+      endif()
+    endforeach()
+    set(COMPONENT_MSG "${FOUND_COMPONENTS_MSG} ${MISSING_COMPONENTS_MSG}")
+    string(APPEND DETAILS "[c${COMPONENT_MSG}]")
+  endif()
+
+  # version handling:
+  set(VERSION_MSG "")
+  set(VERSION_OK TRUE)
+
+  # check with DEFINED here as the requested or found version may be "0"
+  if (DEFINED ${_NAME}_FIND_VERSION)
+    if(DEFINED ${FPHSA_VERSION_VAR})
+      set(_FOUND_VERSION ${${FPHSA_VERSION_VAR}})
+
+      if(${_NAME}_FIND_VERSION_EXACT)       # exact version required
+        # count the dots in the version string
+        string(REGEX REPLACE "[^.]" "" _VERSION_DOTS "${_FOUND_VERSION}")
+        # add one dot because there is one dot more than there are components
+        string(LENGTH "${_VERSION_DOTS}." _VERSION_DOTS)
+        if (_VERSION_DOTS GREATER ${_NAME}_FIND_VERSION_COUNT)
+          # Because of the C++ implementation of find_package() ${_NAME}_FIND_VERSION_COUNT
+          # is at most 4 here. Therefore a simple lookup table is used.
+          if (${_NAME}_FIND_VERSION_COUNT EQUAL 1)
+            set(_VERSION_REGEX "[^.]*")
+          elseif (${_NAME}_FIND_VERSION_COUNT EQUAL 2)
+            set(_VERSION_REGEX "[^.]*\\.[^.]*")
+          elseif (${_NAME}_FIND_VERSION_COUNT EQUAL 3)
+            set(_VERSION_REGEX "[^.]*\\.[^.]*\\.[^.]*")
+          else ()
+            set(_VERSION_REGEX "[^.]*\\.[^.]*\\.[^.]*\\.[^.]*")
+          endif ()
+          string(REGEX REPLACE "^(${_VERSION_REGEX})\\..*" "\\1" _VERSION_HEAD "${_FOUND_VERSION}")
+          unset(_VERSION_REGEX)
+          if (NOT ${_NAME}_FIND_VERSION VERSION_EQUAL _VERSION_HEAD)
+            set(VERSION_MSG "Found unsuitable version \"${_FOUND_VERSION}\", but required is exact version \"${${_NAME}_FIND_VERSION}\"")
+            set(VERSION_OK FALSE)
+          else ()
+            set(VERSION_MSG "(found suitable exact version \"${_FOUND_VERSION}\")")
+          endif ()
+          unset(_VERSION_HEAD)
+        else ()
+          if (NOT ${_NAME}_FIND_VERSION VERSION_EQUAL _FOUND_VERSION)
+            set(VERSION_MSG "Found unsuitable version \"${_FOUND_VERSION}\", but required is exact version \"${${_NAME}_FIND_VERSION}\"")
+            set(VERSION_OK FALSE)
+          else ()
+            set(VERSION_MSG "(found suitable exact version \"${_FOUND_VERSION}\")")
+          endif ()
+        endif ()
+        unset(_VERSION_DOTS)
+
+      else()     # minimum version specified:
+        if (${_NAME}_FIND_VERSION VERSION_GREATER _FOUND_VERSION)
+          set(VERSION_MSG "Found unsuitable version \"${_FOUND_VERSION}\", but required is at least \"${${_NAME}_FIND_VERSION}\"")
+          set(VERSION_OK FALSE)
+        else ()
+          set(VERSION_MSG "(found suitable version \"${_FOUND_VERSION}\", minimum required is \"${${_NAME}_FIND_VERSION}\")")
+        endif ()
+      endif()
+
+    else()
+
+      # if the package was not found, but a version was given, add that to the output:
+      if(${_NAME}_FIND_VERSION_EXACT)
+         set(VERSION_MSG "(Required is exact version \"${${_NAME}_FIND_VERSION}\")")
+      else()
+         set(VERSION_MSG "(Required is at least version \"${${_NAME}_FIND_VERSION}\")")
+      endif()
+
+    endif()
+  else ()
+    # Check with DEFINED as the found version may be 0.
+    if(DEFINED ${FPHSA_VERSION_VAR})
+      set(VERSION_MSG "(found version \"${${FPHSA_VERSION_VAR}}\")")
+    endif()
+  endif ()
+
+  if(VERSION_OK)
+    string(APPEND DETAILS "[v${${FPHSA_VERSION_VAR}}(${${_NAME}_FIND_VERSION})]")
+  else()
+    set(${_NAME}_FOUND FALSE)
+  endif()
+
+
+  # print the result:
+  if (${_NAME}_FOUND)
+    FIND_PACKAGE_MESSAGE(${_NAME} "Found ${_NAME}: ${${_FIRST_REQUIRED_VAR}} ${VERSION_MSG} ${COMPONENT_MSG}" "${DETAILS}")
+  else ()
+
+    if(FPHSA_CONFIG_MODE)
+      _FPHSA_HANDLE_FAILURE_CONFIG_MODE()
+    else()
+      if(NOT VERSION_OK)
+        _FPHSA_FAILURE_MESSAGE("${FPHSA_FAIL_MESSAGE}: ${VERSION_MSG} (found ${${_FIRST_REQUIRED_VAR}})")
+      else()
+        _FPHSA_FAILURE_MESSAGE("${FPHSA_FAIL_MESSAGE} (missing:${MISSING_VARS}) ${VERSION_MSG}")
+      endif()
+    endif()
+
+  endif ()
+
+  set(${_NAME}_FOUND ${${_NAME}_FOUND} PARENT_SCOPE)
+  set(${_NAME_UPPER}_FOUND ${${_NAME}_FOUND} PARENT_SCOPE)
+endfunction()
diff --git a/cmake/modules/FindPackageMessage.cmake b/cmake/modules/FindPackageMessage.cmake
new file mode 100644
index 0000000..6821cee
--- /dev/null
+++ b/cmake/modules/FindPackageMessage.cmake
@@ -0,0 +1,47 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#.rst:
+# FindPackageMessage
+# ------------------
+#
+#
+#
+# FIND_PACKAGE_MESSAGE(<name> "message for user" "find result details")
+#
+# This macro is intended to be used in FindXXX.cmake modules files.  It
+# will print a message once for each unique find result.  This is useful
+# for telling the user where a package was found.  The first argument
+# specifies the name (XXX) of the package.  The second argument
+# specifies the message to display.  The third argument lists details
+# about the find result so that if they change the message will be
+# displayed again.  The macro also obeys the QUIET argument to the
+# find_package command.
+#
+# Example:
+#
+# ::
+#
+#   if(X11_FOUND)
+#     FIND_PACKAGE_MESSAGE(X11 "Found X11: ${X11_X11_LIB}"
+#       "[${X11_X11_LIB}][${X11_INCLUDE_DIR}]")
+#   else()
+#    ...
+#   endif()
+
+function(FIND_PACKAGE_MESSAGE pkg msg details)
+  # Avoid printing a message repeatedly for the same find result.
+  if(NOT ${pkg}_FIND_QUIETLY)
+    string(REPLACE "\n" "" details "${details}")
+    set(DETAILS_VAR FIND_PACKAGE_MESSAGE_DETAILS_${pkg})
+    if(NOT "${details}" STREQUAL "${${DETAILS_VAR}}")
+      # The message has not yet been printed.
+      message(STATUS "${msg}")
+
+      # Save the find details in the cache to avoid printing the same
+      # message again.
+      set("${DETAILS_VAR}" "${details}"
+        CACHE INTERNAL "Details about finding ${pkg}")
+    endif()
+  endif()
+endfunction()
diff --git a/cmake/modules/FindPython.cmake b/cmake/modules/FindPython.cmake
new file mode 100644
index 0000000..ab73e1b
--- /dev/null
+++ b/cmake/modules/FindPython.cmake
@@ -0,0 +1,181 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#[=======================================================================[.rst:
+FindPython
+----------
+
+Find Python interpreter, compiler and development environment (include
+directories and libraries).
+
+Three components are supported:
+
+* ``Interpreter``: search for Python interpreter.
+* ``Compiler``: search for Python compiler. Only offered by IronPython.
+* ``Development``: search for development artifacts (include directories and
+  libraries).
+
+If no ``COMPONENTS`` is specified, ``Interpreter`` is assumed.
+
+To ensure consistent versions between components ``Interpreter``, ``Compiler``
+and ``Development``, specify all components at the same time::
+
+  find_package (Python COMPONENTS Interpreter Development)
+
+This module looks preferably for version 3 of Python. If not found, version 2
+is searched.
+To manage concurrent versions 3 and 2 of Python, use :module:`FindPython3` and
+:module:`FindPython2` modules rather than this one.
+
+Imported Targets
+^^^^^^^^^^^^^^^^
+
+This module defines the following :ref:`Imported Targets <Imported Targets>`:
+
+``Python::Interpreter``
+  Python interpreter. Target defined if component ``Interpreter`` is found.
+``Python::Compiler``
+  Python compiler. Target defined if component ``Compiler`` is found.
+``Python::Python``
+  Python library. Target defined if component ``Development`` is found.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This module will set the following variables in your project
+(see :ref:`Standard Variable Names <CMake Developer Standard Variable Names>`):
+
+``Python_FOUND``
+  System has the Python requested components.
+``Python_Interpreter_FOUND``
+  System has the Python interpreter.
+``Python_EXECUTABLE``
+  Path to the Python interpreter.
+``Python_INTERPRETER_ID``
+  A short string unique to the interpreter. Possible values include:
+    * Python
+    * ActivePython
+    * Anaconda
+    * Canopy
+    * IronPython
+``Python_STDLIB``
+  Standard platform independent installation directory.
+
+  Information returned by
+  ``distutils.sysconfig.get_python_lib(plat_specific=False,standard_lib=True)``.
+``Python_STDARCH``
+  Standard platform dependent installation directory.
+
+  Information returned by
+  ``distutils.sysconfig.get_python_lib(plat_specific=True,standard_lib=True)``.
+``Python_SITELIB``
+  Third-party platform independent installation directory.
+
+  Information returned by
+  ``distutils.sysconfig.get_python_lib(plat_specific=False,standard_lib=False)``.
+``Python_SITEARCH``
+  Third-party platform dependent installation directory.
+
+  Information returned by
+  ``distutils.sysconfig.get_python_lib(plat_specific=True,standard_lib=False)``.
+``Python_Compiler_FOUND``
+  System has the Python compiler.
+``Python_COMPILER``
+  Path to the Python compiler. Only offered by IronPython.
+``Python_COMPILER_ID``
+  A short string unique to the compiler. Possible values include:
+    * IronPython
+``Python_Development_FOUND``
+  System has the Python development artifacts.
+``Python_INCLUDE_DIRS``
+  The Python include directories.
+``Python_RUNTIME_LIBRARY_DIRS``
+  The Python libraries.
+``Python_LIBRARY_DIRS``
+  The Python library directories.
+``Python_RUNTIME_LIBRARY_DIRS``
+  The Python runtime library directories.
+``Python_VERSION``
+  Python version.
+``Python_VERSION_MAJOR``
+  Python major version.
+``Python_VERSION_MINOR``
+  Python minor version.
+``Python_VERSION_PATCH``
+  Python patch version.
+
+Hints
+^^^^^
+
+``Python_ROOT_DIR``
+  Define the root directory of a Python installation.
+
+``Python_USE_STATIC_LIBS``
+  * If not defined, search for shared libraries and static libraries in that
+    order.
+  * If set to TRUE, search **only** for static libraries.
+  * If set to FALSE, search **only** for shared libraries.
+
+Commands
+^^^^^^^^
+
+This module defines the command ``Python_add_library`` which have the same
+semantic as :command:`add_library` but take care of Python module naming rules
+(only applied if library is of type ``MODULE``) and add dependency to target
+``Python::Python``::
+
+  Python_add_library (my_module MODULE src1.cpp)
+
+If library type is not specified, ``MODULE`` is assumed.
+#]=======================================================================]
+
+
+set (_PYTHON_PREFIX Python)
+
+if (DEFINED Python_FIND_VERSION)
+  set (_Python_REQUIRED_VERSION_MAJOR ${Python_FIND_VERSION_MAJOR})
+
+  include (${CMAKE_CURRENT_LIST_DIR}/FindPython/Support.cmake)
+else()
+  # iterate over versions in quiet and NOT required modes to avoid multiple
+  # "Found" messages and prematurally failure.
+  set (_Python_QUIETLY ${Python_FIND_QUIETLY})
+  set (_Python_REQUIRED ${Python_FIND_REQUIRED})
+  set (Python_FIND_QUIETLY TRUE)
+  set (Python_FIND_REQUIRED FALSE)
+
+  set (_Python_REQUIRED_VERSIONS 3 2)
+  set (_Python_REQUIRED_VERSION_LAST 2)
+
+  foreach (_Python_REQUIRED_VERSION_MAJOR IN LISTS _Python_REQUIRED_VERSIONS)
+    set (Python_FIND_VERSION ${_Python_REQUIRED_VERSION_MAJOR})
+    include (${CMAKE_CURRENT_LIST_DIR}/FindPython/Support.cmake)
+    if (Python_FOUND OR
+        _Python_REQUIRED_VERSION_MAJOR EQUAL _Python_REQUIRED_VERSION_LAST)
+      break()
+    endif()
+    # clean-up some CACHE variables to ensure look-up restart from scratch
+    foreach (_Python_ITEM IN LISTS _Python_CACHED_VARS)
+      unset (${_Python_ITEM} CACHE)
+    endforeach()
+  endforeach()
+
+  unset (Python_FIND_VERSION)
+
+  set (Python_FIND_QUIETLY ${_Python_QUIETLY})
+  set (Python_FIND_REQUIRED ${_Python_REQUIRED})
+  if (Python_FIND_REQUIRED OR NOT Python_FIND_QUIETLY)
+    # call again validation command to get "Found" or error message
+    find_package_handle_standard_args (Python HANDLE_COMPONENTS
+                                              REQUIRED_VARS ${_Python_REQUIRED_VARS}
+                                              VERSION_VAR Python_VERSION)
+  endif()
+endif()
+
+if (COMMAND __Python_add_library)
+  macro (Python_add_library)
+    __Python_add_library (Python ${ARGV})
+  endmacro()
+endif()
+
+unset (_PYTHON_PREFIX)
diff --git a/cmake/modules/FindPython/Support.cmake b/cmake/modules/FindPython/Support.cmake
new file mode 100644
index 0000000..08f07fd
--- /dev/null
+++ b/cmake/modules/FindPython/Support.cmake
@@ -0,0 +1,929 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#
+# This file is a "template" file used by various FindPython modules.
+#
+
+cmake_policy (VERSION 3.7)
+
+#
+# Initial configuration
+#
+if (NOT DEFINED _PYTHON_PREFIX)
+  message (FATAL_ERROR "FindPython: INTERNAL ERROR")
+endif()
+if (NOT DEFINED _${_PYTHON_PREFIX}_REQUIRED_VERSION_MAJOR)
+  message (FATAL_ERROR "FindPython: INTERNAL ERROR")
+endif()
+if (_${_PYTHON_PREFIX}_REQUIRED_VERSION_MAJOR EQUAL 3)
+  set(_${_PYTHON_PREFIX}_VERSIONS 3.8 3.7 3.6 3.5 3.4 3.3 3.2 3.1 3.0)
+elseif (_${_PYTHON_PREFIX}_REQUIRED_VERSION_MAJOR EQUAL 2)
+  set(_${_PYTHON_PREFIX}_VERSIONS 2.7 2.6 2.5 2.4 2.3 2.2 2.1 2.0)
+else()
+  message (FATAL_ERROR "FindPython: INTERNAL ERROR")
+endif()
+
+
+#
+# helper commands
+#
+macro (_PYTHON_DISPLAY_FAILURE _PYTHON_MSG)
+  if (${_PYTHON_PREFIX}_FIND_REQUIRED)
+    message (FATAL_ERROR "${_PYTHON_MSG}")
+  else()
+    if (NOT ${_PYTHON_PREFIX}_FIND_QUIETLY)
+      message(STATUS "${_PYTHON_MSG}")
+    endif ()
+  endif()
+
+  set (${_PYTHON_PREFIX}_FOUND FALSE)
+  string (TOUPPER "${_PYTHON_PREFIX}" _${_PYTHON_PREFIX}_UPPER_PREFIX)
+  set (${_PYTHON_UPPER_PREFIX}_FOUND FALSE)
+  return()
+endmacro()
+
+
+function (_PYTHON_GET_FRAMEWORKS _PYTHON_PGF_FRAMEWORK_PATHS _PYTHON_VERSION)
+  set (_PYTHON_FRAMEWORK_PATHS)
+  foreach (_PYTHON_FRAMEWORK IN LISTS Python_FRAMEWORKS)
+    list (APPEND _PYTHON_FRAMEWORK_PATHS
+          "${_PYTHON_FRAMEWORK}/Versions/${_PYTHON_VERSION}")
+  endforeach()
+  set (${_PYTHON_PGF_FRAMEWORK_PATHS} ${_PYTHON_FRAMEWORK_PATHS} PARENT_SCOPE)
+endfunction()
+
+
+function (_PYTHON_VALIDATE_INTERPRETER)
+  if (NOT ${_PYTHON_PREFIX}_EXECUTABLE)
+    return()
+  endif()
+
+  if (${_PYTHON_PREFIX}_EXECUTABLE MATCHES "python${CMAKE_EXECUTABLE_SUFFIX}$")
+    # executable found do not have version in name
+    # ensure major version is OK
+    execute_process (COMMAND "${${_PYTHON_PREFIX}_EXECUTABLE}" -c
+                             "import sys; sys.stdout.write(str(sys.version_info[0]))"
+                     RESULT_VARIABLE result
+                     OUTPUT_VARIABLE version
+                     ERROR_QUIET
+                     OUTPUT_STRIP_TRAILING_WHITESPACE)
+    if (result OR NOT version EQUAL _${_PYTHON_PREFIX}_REQUIRED_VERSION_MAJOR)
+      # interpreter not usable or has wrong major version
+      set (${_PYTHON_PREFIX}_EXECUTABLE ${_PYTHON_PREFIX}_EXECUTABLE-NOTFOUND CACHE INTERNAL "" FORCE)
+      return()
+    endif()
+  endif()
+
+  if (CMAKE_SIZEOF_VOID_P AND "Development" IN_LIST ${_PYTHON_PREFIX}_FIND_COMPONENTS
+      AND NOT CMAKE_CROSSCOMPILING)
+    # In this case, interpreter must have same architecture as environment
+    execute_process (COMMAND "${${_PYTHON_PREFIX}_EXECUTABLE}" -c
+                             "import sys, struct; sys.stdout.write(str(struct.calcsize(\"P\")))"
+                     RESULT_VARIABLE result
+                     OUTPUT_VARIABLE size
+                     ERROR_QUIET
+                     OUTPUT_STRIP_TRAILING_WHITESPACE)
+    if (result OR NOT size EQUAL CMAKE_SIZEOF_VOID_P)
+      # interpreter not usable or has wrong architecture
+      set (${_PYTHON_PREFIX}_EXECUTABLE ${_PYTHON_PREFIX}_EXECUTABLE-NOTFOUND CACHE INTERNAL "" FORCE)
+      return()
+    endif()
+  endif()
+endfunction()
+
+
+function (_PYTHON_FIND_RUNTIME_LIBRARY _PYTHON_LIB)
+  string (REPLACE "_RUNTIME" "" _PYTHON_LIB "${_PYTHON_LIB}")
+  # look at runtime part on systems supporting it
+  if (CMAKE_SYSTEM_NAME STREQUAL "Windows" OR
+      (CMAKE_SYSTEM_NAME MATCHES "MSYS|CYGWIN"
+        AND ${_PYTHON_LIB} MATCHES "${CMAKE_IMPORT_LIBRARY_SUFFIX}$"))
+    set (CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_SHARED_LIBRARY_SUFFIX})
+    # MSYS has a special syntax for runtime libraries
+    if (CMAKE_SYSTEM_NAME MATCHES "MSYS")
+      list (APPEND CMAKE_FIND_LIBRARY_PREFIXES "msys-")
+    endif()
+    find_library (${ARGV})
+  endif()
+endfunction()
+
+
+function (_PYTHON_SET_LIBRARY_DIRS _PYTHON_SLD_RESULT)
+  unset (_PYTHON_DIRS)
+  set (_PYTHON_LIBS ${ARGV})
+  list (REMOVE_AT _PYTHON_LIBS 0)
+  foreach (_PYTHON_LIB IN LISTS _PYTHON_LIBS)
+    if (${_PYTHON_LIB})
+      get_filename_component (_PYTHON_DIR "${${_PYTHON_LIB}}" DIRECTORY)
+      list (APPEND _PYTHON_DIRS "${_PYTHON_DIR}")
+    endif()
+  endforeach()
+  if (_PYTHON_DIRS)
+    list (REMOVE_DUPLICATES _PYTHON_DIRS)
+  endif()
+  set (${_PYTHON_SLD_RESULT} ${_PYTHON_DIRS} PARENT_SCOPE)
+endfunction()
+
+
+# If major version is specified, it must be the same as internal major version
+if (DEFINED ${_PYTHON_PREFIX}_FIND_VERSION_MAJOR
+    AND NOT ${_PYTHON_PREFIX}_FIND_VERSION_MAJOR VERSION_EQUAL _${_PYTHON_PREFIX}_REQUIRED_VERSION_MAJOR)
+  _python_display_failure ("Could NOT find ${_PYTHON_PREFIX}: Wrong major version specified is \"${${_PYTHON_PREFIX}_FIND_VERSION_MAJOR}\", but expected major version is \"${_${_PYTHON_PREFIX}_REQUIRED_VERSION_MAJOR}\"")
+endif()
+
+
+# handle components
+if (NOT ${_PYTHON_PREFIX}_FIND_COMPONENTS)
+  set (${_PYTHON_PREFIX}_FIND_COMPONENTS Interpreter)
+  set (${_PYTHON_PREFIX}_FIND_REQUIRED_Interpreter TRUE)
+endif()
+foreach (_${_PYTHON_PREFIX}_COMPONENT IN LISTS ${_PYTHON_PREFIX}_FIND_COMPONENTS)
+  set (${_PYTHON_PREFIX}_${_${_PYTHON_PREFIX}_COMPONENT}_FOUND FALSE)
+endforeach()
+unset (_${_PYTHON_PREFIX}_FIND_VERSIONS)
+
+# Set versions to search
+## default: search any version
+set (_${_PYTHON_PREFIX}_FIND_VERSIONS ${_${_PYTHON_PREFIX}_VERSIONS})
+
+if (${_PYTHON_PREFIX}_FIND_VERSION_COUNT GREATER 1)
+  if (${_PYTHON_PREFIX}_FIND_VERSION_EXACT)
+    set (_${_PYTHON_PREFIX}_FIND_VERSIONS ${${_PYTHON_PREFIX}_FIND_VERSION_MAJOR}.${${_PYTHON_PREFIX}_FIND_VERSION_MINOR})
+  else()
+    unset (_${_PYTHON_PREFIX}_FIND_VERSIONS)
+    # add all compatible versions
+    foreach (_${_PYTHON_PREFIX}_VERSION IN LISTS _${_PYTHON_PREFIX}_VERSIONS)
+      if (_${_PYTHON_PREFIX}_VERSION VERSION_GREATER_EQUAL ${_PYTHON_PREFIX}_FIND_VERSION)
+        list (APPEND _${_PYTHON_PREFIX}_FIND_VERSIONS ${_${_PYTHON_PREFIX}_VERSION})
+      endif()
+    endforeach()
+  endif()
+endif()
+
+# Anaconda distribution: define which architectures can be used
+if (CMAKE_SIZEOF_VOID_P)
+  # In this case, search only for 64bit or 32bit
+  math (EXPR _${_PYTHON_PREFIX}_ARCH "${CMAKE_SIZEOF_VOID_P} * 8")
+  set (_${_PYTHON_PREFIX}_ARCH2 ${_${_PYTHON_PREFIX}_ARCH})
+else()
+  # architecture unknown, search for both 64bit and 32bit
+  set (_${_PYTHON_PREFIX}_ARCH 64)
+  set (_${_PYTHON_PREFIX}_ARCH2 32)
+endif()
+
+# IronPython support
+if (CMAKE_SIZEOF_VOID_P)
+  # In this case, search only for 64bit or 32bit
+  math (EXPR _${_PYTHON_PREFIX}_ARCH "${CMAKE_SIZEOF_VOID_P} * 8")
+  set (_${_PYTHON_PREFIX}_IRON_PYTHON_NAMES ipy${_${_PYTHON_PREFIX}_ARCH} ipy)
+else()
+  # architecture unknown, search for natural interpreter
+  set (_${_PYTHON_PREFIX}_IRON_PYTHON_NAMES ipy)
+endif()
+
+# Apple frameworks handling
+include (${CMAKE_CURRENT_LIST_DIR}/../CMakeFindFrameworks.cmake)
+cmake_find_frameworks (Python)
+
+# Save CMAKE_FIND_FRAMEWORK
+if (DEFINED CMAKE_FIND_FRAMEWORK)
+  set (_${_PYTHON_PREFIX}_CMAKE_FIND_FRAMEWORK ${CMAKE_FIND_FRAMEWORK})
+else()
+  unset (_${_PYTHON_PREFIX}_CMAKE_FIND_FRAMEWORK)
+endif()
+# To avoid picking up the system elements pre-maturely.
+set (CMAKE_FIND_FRAMEWORK LAST)
+
+
+unset (${_PYTHON_PREFIX}_VERSION_MAJOR)
+unset (${_PYTHON_PREFIX}_VERSION_MINOR)
+unset (${_PYTHON_PREFIX}_VERSION_PATCH)
+
+unset (_${_PYTHON_PREFIX}_REQUIRED_VARS)
+unset (_${_PYTHON_PREFIX}_CACHED_VARS)
+
+
+# first step, search for the interpreter
+if ("Interpreter" IN_LIST ${_PYTHON_PREFIX}_FIND_COMPONENTS)
+  if (${_PYTHON_PREFIX}_FIND_REQUIRED_Interpreter)
+    list (APPEND _${_PYTHON_PREFIX}_REQUIRED_VARS ${_PYTHON_PREFIX}_EXECUTABLE)
+    list (APPEND _${_PYTHON_PREFIX}_CACHED_VARS ${_PYTHON_PREFIX}_EXECUTABLE)
+  endif()
+
+  set (_${_PYTHON_PREFIX}_HINTS "${${_PYTHON_PREFIX}_ROOT_DIR}" ENV ${_PYTHON_PREFIX}_ROOT_DIR)
+
+  # look-up for various versions and locations
+  foreach (_${_PYTHON_PREFIX}_VERSION IN LISTS _${_PYTHON_PREFIX}_FIND_VERSIONS)
+    string (REPLACE "." "" _${_PYTHON_PREFIX}_VERSION_NO_DOTS ${_${_PYTHON_PREFIX}_VERSION})
+
+    _python_get_frameworks (_${_PYTHON_PREFIX}_FRAMEWORK_PATHS ${_${_PYTHON_PREFIX}_VERSION})
+
+    # try using HINTS
+    find_program (${_PYTHON_PREFIX}_EXECUTABLE
+                  NAMES python${_${_PYTHON_PREFIX}_VERSION}
+                  NAMES_PER_DIR
+                  HINTS ${_${_PYTHON_PREFIX}_HINTS}
+                  PATHS ${_${_PYTHON_PREFIX}_FRAMEWORK_PATHS}
+                  PATH_SUFFIXES bin
+                  NO_SYSTEM_ENVIRONMENT_PATH
+                  NO_CMAKE_SYSTEM_PATH)
+    # try using registry
+    if (WIN32)
+      find_program (${_PYTHON_PREFIX}_EXECUTABLE
+                    NAMES python${_${_PYTHON_PREFIX}_VERSION} python
+                          ${_${_PYTHON_PREFIX}_IRON_PYTHON_NAMES}
+                    NAMES_PER_DIR
+                    HINTS ${_${_PYTHON_PREFIX}_HINTS}
+                    PATHS [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                          [HKEY_CURRENT_USER\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH}\\InstallPath]
+                          [HKEY_CURRENT_USER\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH2}\\InstallPath]
+                          [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                          [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH}\\InstallPath]
+                          [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH2}\\InstallPath]
+                          [HKEY_LOCAL_MACHINE\\SOFTWARE\\IronPython\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                    PATH_SUFFIXES bin
+                    NO_SYSTEM_ENVIRONMENT_PATH
+                    NO_CMAKE_SYSTEM_PATH)
+    endif()
+    # try in standard paths
+    find_program (${_PYTHON_PREFIX}_EXECUTABLE
+                  NAMES python${_${_PYTHON_PREFIX}_VERSION})
+
+    _python_validate_interpreter ()
+    if (${_PYTHON_PREFIX}_EXECUTABLE)
+      break()
+    endif()
+  endforeach()
+
+  # try more generic names
+  if (NOT ${_PYTHON_PREFIX}_EXECUTABLE)
+    find_program (${_PYTHON_PREFIX}_EXECUTABLE
+                  NAMES python${${_PYTHON_PREFIX}_VERSION_MAJOR} python
+                        ${_${_PYTHON_PREFIX}_IRON_PYTHON_NAMES}
+                  HINTS ${_${_PYTHON_PREFIX}_HINTS}
+                  PATH_SUFFIXES bin)
+
+    _python_validate_interpreter ()
+  endif()
+
+  # retrieve exact version of executable found
+  if (${_PYTHON_PREFIX}_EXECUTABLE)
+    execute_process (COMMAND "${${_PYTHON_PREFIX}_EXECUTABLE}" -c
+                             "import sys; sys.stdout.write('.'.join([str(x) for x in sys.version_info[:3]]))"
+                     RESULT_VARIABLE _${_PYTHON_PREFIX}_RESULT
+                     OUTPUT_VARIABLE ${_PYTHON_PREFIX}_VERSION
+                     ERROR_QUIET
+                     OUTPUT_STRIP_TRAILING_WHITESPACE)
+    if (NOT _${_PYTHON_PREFIX}_RESULT)
+      string (REGEX MATCHALL "[0-9]+" _${_PYTHON_PREFIX}_VERSIONS "${${_PYTHON_PREFIX}_VERSION}")
+      list (GET _${_PYTHON_PREFIX}_VERSIONS 0 ${_PYTHON_PREFIX}_VERSION_MAJOR)
+      list (GET _${_PYTHON_PREFIX}_VERSIONS 1 ${_PYTHON_PREFIX}_VERSION_MINOR)
+      list (GET _${_PYTHON_PREFIX}_VERSIONS 2 ${_PYTHON_PREFIX}_VERSION_PATCH)
+    else()
+      # Interpreter is not usable
+      set (${_PYTHON_PREFIX}_EXECUTABLE ${_PYTHON_PREFIX}_EXECUTABLE-NOTFOUND CACHE INTERNAL "" FORCE)
+      unset (${_PYTHON_PREFIX}_VERSION)
+    endif()
+  endif()
+
+  if (${_PYTHON_PREFIX}_EXECUTABLE
+      AND ${_PYTHON_PREFIX}_VERSION_MAJOR VERSION_EQUAL _${_PYTHON_PREFIX}_REQUIRED_VERSION_MAJOR)
+    set (${_PYTHON_PREFIX}_Interpreter_FOUND TRUE)
+    # Use interpreter version for future searches to ensure consistency
+    set (_${_PYTHON_PREFIX}_FIND_VERSIONS ${${_PYTHON_PREFIX}_VERSION_MAJOR}.${${_PYTHON_PREFIX}_VERSION_MINOR})
+  endif()
+
+  if (${_PYTHON_PREFIX}_Interpreter_FOUND)
+    # retrieve interpreter identity
+    execute_process (COMMAND "${${_PYTHON_PREFIX}_EXECUTABLE}" -V
+                     RESULT_VARIABLE _${_PYTHON_PREFIX}_RESULT
+                     OUTPUT_VARIABLE ${_PYTHON_PREFIX}_INTERPRETER_ID
+                     ERROR_VARIABLE ${_PYTHON_PREFIX}_INTERPRETER_ID)
+    if (NOT _${_PYTHON_PREFIX}_RESULT)
+      if (${_PYTHON_PREFIX}_INTERPRETER_ID MATCHES "Anaconda")
+        set (${_PYTHON_PREFIX}_INTERPRETER_ID "Anaconda")
+      elseif (${_PYTHON_PREFIX}_INTERPRETER_ID MATCHES "Enthought")
+        set (${_PYTHON_PREFIX}_INTERPRETER_ID "Canopy")
+      else()
+        string (REGEX REPLACE "^([^ ]+).*" "\\1" ${_PYTHON_PREFIX}_INTERPRETER_ID "${${_PYTHON_PREFIX}_INTERPRETER_ID}")
+        if (${_PYTHON_PREFIX}_INTERPRETER_ID STREQUAL "Python")
+          # try to get a more precise ID
+          execute_process (COMMAND "${${_PYTHON_PREFIX}_EXECUTABLE}" -c "import sys; print(sys.copyright)"
+                           RESULT_VARIABLE _${_PYTHON_PREFIX}_RESULT
+                           OUTPUT_VARIABLE ${_PYTHON_PREFIX}_COPYRIGHT
+                           ERROR_QUIET)
+          if (${_PYTHON_PREFIX}_COPYRIGHT MATCHES "ActiveState")
+            set (${_PYTHON_PREFIX}_INTERPRETER_ID "ActivePython")
+          endif()
+        endif()
+      endif()
+    else()
+      set (${_PYTHON_PREFIX}_INTERPRETER_ID Python)
+    endif()
+  else()
+    unset (${_PYTHON_PREFIX}_INTERPRETER_ID)
+  endif()
+
+  # retrieve various package installation directories
+  execute_process (COMMAND "${${_PYTHON_PREFIX}_EXECUTABLE}" -c "import sys; from distutils import sysconfig;sys.stdout.write(';'.join([sysconfig.get_python_lib(plat_specific=False,standard_lib=True),sysconfig.get_python_lib(plat_specific=True,standard_lib=True),sysconfig.get_python_lib(plat_specific=False,standard_lib=False),sysconfig.get_python_lib(plat_specific=True,standard_lib=False)]))"
+
+                   RESULT_VARIABLE _${_PYTHON_PREFIX}_RESULT
+                   OUTPUT_VARIABLE _${_PYTHON_PREFIX}_LIBPATHS
+                   ERROR_QUIET)
+  if (NOT _${_PYTHON_PREFIX}_RESULT)
+    list (GET _${_PYTHON_PREFIX}_LIBPATHS 0 ${_PYTHON_PREFIX}_STDLIB)
+    list (GET _${_PYTHON_PREFIX}_LIBPATHS 1 ${_PYTHON_PREFIX}_STDARCH)
+    list (GET _${_PYTHON_PREFIX}_LIBPATHS 2 ${_PYTHON_PREFIX}_SITELIB)
+    list (GET _${_PYTHON_PREFIX}_LIBPATHS 3 ${_PYTHON_PREFIX}_SITEARCH)
+  else()
+    unset (${_PYTHON_PREFIX}_STDLIB)
+    unset (${_PYTHON_PREFIX}_STDARCH)
+    unset (${_PYTHON_PREFIX}_SITELIB)
+    unset (${_PYTHON_PREFIX}_SITEARCH)
+  endif()
+
+  mark_as_advanced (${_PYTHON_PREFIX}_EXECUTABLE)
+endif()
+
+
+# second step, search for compiler (IronPython)
+if ("Compiler" IN_LIST ${_PYTHON_PREFIX}_FIND_COMPONENTS)
+  if (${_PYTHON_PREFIX}_FIND_REQUIRED_Compiler)
+    list (APPEND _${_PYTHON_PREFIX}_REQUIRED_VARS ${_PYTHON_PREFIX}_COMPILER)
+    list (APPEND _${_PYTHON_PREFIX}_CACHED_VARS ${_PYTHON_PREFIX}_COMPILER)
+  endif()
+
+  # IronPython specific artifacts
+  # If IronPython interpreter is found, use its path
+  unset (_${_PYTHON_PREFIX}_IRON_ROOT)
+  if (${_PYTHON_PREFIX}_Interpreter_FOUND AND ${_PYTHON_PREFIX}_INTERPRETER_ID STREQUAL "IronPython")
+    get_filename_component (_${_PYTHON_PREFIX}_IRON_ROOT "${${_PYTHON_PREFIX}_EXECUTABLE}" DIRECTORY)
+  endif()
+
+  # try using root dir and registry
+  foreach (_${_PYTHON_PREFIX}_VERSION IN LISTS _${_PYTHON_PREFIX}_FIND_VERSIONS)
+    find_program (${_PYTHON_PREFIX}_COMPILER
+                  NAMES ipyc
+                  HINTS ${_${_PYTHON_PREFIX}_IRON_ROOT} ${_${_PYTHON_PREFIX}_HINTS}
+                  PATHS [HKEY_LOCAL_MACHINE\\SOFTWARE\\IronPython\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                  NO_SYSTEM_ENVIRONMENT_PATH
+                  NO_CMAKE_SYSTEM_PATH)
+    if (${_PYTHON_PREFIX}_COMPILER)
+      break()
+    endif()
+  endforeach()
+  # try in standard paths
+  find_program (${_PYTHON_PREFIX}_COMPILER
+                NAMES ipyc)
+
+  if (${_PYTHON_PREFIX}_COMPILER)
+    # retrieve python environment version from compiler
+    set (_${_PYTHON_PREFIX}_VERSION_DIR "${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/PythonCompilerVersion.dir")
+    file (WRITE "${_${_PYTHON_PREFIX}_VERSION_DIR}/version.py" "import sys; sys.stdout.write('.'.join([str(x) for x in sys.version_info[:3]]))\n")
+    execute_process (COMMAND "${${_PYTHON_PREFIX}_COMPILER}" /target:exe /embed "${_${_PYTHON_PREFIX}_VERSION_DIR}/version.py"
+                     WORKING_DIRECTORY "${_${_PYTHON_PREFIX}_VERSION_DIR}"
+                     OUTPUT_QUIET
+                     ERROR_QUIET)
+    execute_process (COMMAND "${_${_PYTHON_PREFIX}_VERSION_DIR}/version"
+                     WORKING_DIRECTORY "${_${_PYTHON_PREFIX}_VERSION_DIR}"
+                     RESULT_VARIABLE _${_PYTHON_PREFIX}_RESULT
+                     OUTPUT_VARIABLE _${_PYTHON_PREFIX}_VERSION
+                     ERROR_QUIET)
+    if (NOT _${_PYTHON_PREFIX}_RESULT)
+      string (REGEX MATCHALL "[0-9]+" _${_PYTHON_PREFIX}_VERSIONS "${_${_PYTHON_PREFIX}_VERSION}")
+      list (GET _${_PYTHON_PREFIX}_VERSIONS 0 _${_PYTHON_PREFIX}_VERSION_MAJOR)
+      list (GET _${_PYTHON_PREFIX}_VERSIONS 1 _${_PYTHON_PREFIX}_VERSION_MINOR)
+      list (GET _${_PYTHON_PREFIX}_VERSIONS 2 _${_PYTHON_PREFIX}_VERSION_PATCH)
+
+      if (NOT ${_PYTHON_PREFIX}_Interpreter_FOUND)
+        # set public version information
+        set (${_PYTHON_PREFIX}_VERSION ${_${_PYTHON_PREFIX}_VERSION})
+        set (${_PYTHON_PREFIX}_VERSION_MAJOR ${_${_PYTHON_PREFIX}_VERSION_MAJOR})
+        set (${_PYTHON_PREFIX}_VERSION_MINOR ${_${_PYTHON_PREFIX}_VERSION_MINOR})
+        set (${_PYTHON_PREFIX}_VERSION_PATCH ${_${_PYTHON_PREFIX}_VERSION_PATCH})
+      endif()
+    else()
+      # compiler not usable
+      set (${_PYTHON_PREFIX}_COMPILER ${_PYTHON_PREFIX}_COMPILER-NOTFOUND CACHE INTERNAL "" FORCE)
+    endif()
+    file (REMOVE_RECURSE "${_${_PYTHON_PREFIX}_VERSION_DIR}")
+  endif()
+
+  if (${_PYTHON_PREFIX}_COMPILER)
+    if (${_PYTHON_PREFIX}_Interpreter_FOUND)
+      # Compiler must be compatible with interpreter
+      if (${_${_PYTHON_PREFIX}_VERSION_MAJOR}.${_${_PYTHON_PREFIX}_VERSION_MINOR} VERSION_EQUAL ${${_PYTHON_PREFIX}_VERSION_MAJOR}.${${_PYTHON_PREFIX}_VERSION_MINOR})
+        set (${_PYTHON_PREFIX}_Compiler_FOUND TRUE)
+      endif()
+    elseif (${_PYTHON_PREFIX}_VERSION_MAJOR VERSION_EQUAL _${_PYTHON_PREFIX}_REQUIRED_VERSION_MAJOR)
+      set (${_PYTHON_PREFIX}_Compiler_FOUND TRUE)
+    # Use compiler version for future searches to ensure consistency
+    set (_${_PYTHON_PREFIX}_FIND_VERSIONS ${${_PYTHON_PREFIX}_VERSION_MAJOR}.${${_PYTHON_PREFIX}_VERSION_MINOR})
+    endif()
+  endif()
+
+  if (${_PYTHON_PREFIX}_Compiler_FOUND)
+    set (${_PYTHON_PREFIX}_COMPILER_ID IronPython)
+  else()
+    unset (${_PYTHON_PREFIX}_COMPILER_ID)
+  endif()
+
+  mark_as_advanced (${_PYTHON_PREFIX}_COMPILER)
+endif()
+
+
+# third step, search for the development artifacts
+## Development environment is not compatible with IronPython interpreter
+if ("Development" IN_LIST ${_PYTHON_PREFIX}_FIND_COMPONENTS
+    AND NOT ${_PYTHON_PREFIX}_INTERPRETER_ID STREQUAL "IronPython")
+  if (${_PYTHON_PREFIX}_FIND_REQUIRED_Development)
+    list (APPEND _${_PYTHON_PREFIX}_REQUIRED_VARS ${_PYTHON_PREFIX}_LIBRARY
+                                                  ${_PYTHON_PREFIX}_INCLUDE_DIR)
+    list (APPEND _${_PYTHON_PREFIX}_CACHED_VARS ${_PYTHON_PREFIX}_LIBRARY
+                                                ${_PYTHON_PREFIX}_LIBRARY_RELEASE
+                                                ${_PYTHON_PREFIX}_RUNTIME_LIBRARY_RELEASE
+                                                ${_PYTHON_PREFIX}_LIBRARY_DEBUG
+                                                ${_PYTHON_PREFIX}_RUNTIME_LIBRARY_DEBUG
+                                                ${_PYTHON_PREFIX}_INCLUDE_DIR)
+  endif()
+
+  # Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES
+  unset (_${_PYTHON_PREFIX}_CMAKE_FIND_LIBRARY_SUFFIXES)
+  if (DEFINED ${_PYTHON_PREFIX}_USE_STATIC_LIBS AND NOT WIN32)
+    set(_${_PYTHON_PREFIX}_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
+    if(${_PYTHON_PREFIX}_USE_STATIC_LIBS)
+      set (CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
+    else()
+      list (REMOVE_ITEM CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
+    endif()
+  else()
+  endif()
+
+  # if python interpreter is found, use its location and version to ensure consistency
+  # between interpreter and development environment
+  unset (_${_PYTHON_PREFIX}_PREFIX)
+  if (${_PYTHON_PREFIX}_Interpreter_FOUND)
+    execute_process (COMMAND "${${_PYTHON_PREFIX}_EXECUTABLE}" -c
+                             "import sys; from distutils import sysconfig; sys.stdout.write(sysconfig.PREFIX)"
+                     RESULT_VARIABLE _${_PYTHON_PREFIX}_RESULT
+                     OUTPUT_VARIABLE _${_PYTHON_PREFIX}_PREFIX
+                     ERROR_QUIET
+                     OUTPUT_STRIP_TRAILING_WHITESPACE)
+    if (_${_PYTHON_PREFIX}_RESULT)
+      unset (_${_PYTHON_PREFIX}_PREFIX)
+    endif()
+  endif()
+  set (_${_PYTHON_PREFIX}_HINTS "${_${_PYTHON_PREFIX}_PREFIX}" "${${_PYTHON_PREFIX}_ROOT_DIR}" ENV ${_PYTHON_PREFIX}_ROOT_DIR)
+
+  foreach (_${_PYTHON_PREFIX}_VERSION IN LISTS _${_PYTHON_PREFIX}_FIND_VERSIONS)
+    string (REPLACE "." "" _${_PYTHON_PREFIX}_VERSION_NO_DOTS ${_${_PYTHON_PREFIX}_VERSION})
+
+    # try to use pythonX.Y-config tool
+    set (_${_PYTHON_PREFIX}_CONFIG_NAMES)
+    if (DEFINED CMAKE_LIBRARY_ARCHITECTURE)
+      set (_${_PYTHON_PREFIX}_CONFIG_NAMES "${CMAKE_LIBRARY_ARCHITECTURE}-python${_${_PYTHON_PREFIX}_VERSION}-config")
+    endif()
+    list (APPEND _${_PYTHON_PREFIX}_CONFIG_NAMES "python${_${_PYTHON_PREFIX}_VERSION}-config")
+    find_program (_${_PYTHON_PREFIX}_CONFIG
+                  NAMES ${_${_PYTHON_PREFIX}_CONFIG_NAMES}
+                  HINTS ${_${_PYTHON_PREFIX}_HINTS}
+                  PATH_SUFFIXES bin)
+    unset (_${_PYTHON_PREFIX}_CONFIG_NAMES)
+
+    if (NOT _${_PYTHON_PREFIX}_CONFIG)
+      continue()
+    endif()
+
+    # retrieve root install directory
+    execute_process (COMMAND "${_${_PYTHON_PREFIX}_CONFIG}" --prefix
+                     RESULT_VARIABLE _${_PYTHON_PREFIX}_RESULT
+                     OUTPUT_VARIABLE _${_PYTHON_PREFIX}_PREFIX
+                     ERROR_QUIET
+                     OUTPUT_STRIP_TRAILING_WHITESPACE)
+    if (_${_PYTHON_PREFIX}_RESULT)
+      # python-config is not usable
+      unset (_${_PYTHON_PREFIX}_CONFIG CACHE)
+      continue()
+    endif()
+    set (_${_PYTHON_PREFIX}_HINTS "${_${_PYTHON_PREFIX}_PREFIX}" "${${_PYTHON_PREFIX}_ROOT_DIR}" ENV ${_PYTHON_PREFIX}_ROOT_DIR)
+
+    # retrieve library
+    execute_process (COMMAND "${_${_PYTHON_PREFIX}_CONFIG}" --ldflags
+                     RESULT_VARIABLE _${_PYTHON_PREFIX}_RESULT
+                     OUTPUT_VARIABLE _${_PYTHON_PREFIX}_FLAGS
+                     ERROR_QUIET
+                     OUTPUT_STRIP_TRAILING_WHITESPACE)
+    if (NOT _${_PYTHON_PREFIX}_RESULT)
+      # retrieve library directory
+      string (REGEX MATCHALL "-L[^ ]+" _${_PYTHON_PREFIX}_LIB_DIRS "${_${_PYTHON_PREFIX}_FLAGS}")
+      string (REPLACE "-L" "" _${_PYTHON_PREFIX}_LIB_DIRS "${_${_PYTHON_PREFIX}_LIB_DIRS}")
+      list (REMOVE_DUPLICATES _${_PYTHON_PREFIX}_LIB_DIRS)
+      # retrieve library name
+      string (REGEX MATCHALL "-lpython[^ ]+" _${_PYTHON_PREFIX}_LIB_NAMES "${_${_PYTHON_PREFIX}_FLAGS}")
+      string (REPLACE "-l" "" _${_PYTHON_PREFIX}_LIB_NAMES "${_${_PYTHON_PREFIX}_LIB_NAMES}")
+      list (REMOVE_DUPLICATES _${_PYTHON_PREFIX}_LIB_NAMES)
+
+      find_library (${_PYTHON_PREFIX}_LIBRARY_RELEASE
+                    NAMES ${_${_PYTHON_PREFIX}_LIB_NAMES}
+                    NAMES_PER_DIR
+                    HINTS ${_${_PYTHON_PREFIX}_HINTS} ${_${_PYTHON_PREFIX}_LIB_DIRS}
+                    PATH_SUFFIXES lib
+                    NO_SYSTEM_ENVIRONMENT_PATH
+                    NO_CMAKE_SYSTEM_PATH)
+      # retrieve runtime library
+      if (${_PYTHON_PREFIX}_LIBRARY_RELEASE)
+        get_filename_component (_${_PYTHON_PREFIX}_PATH "${${_PYTHON_PREFIX}_LIBRARY_RELEASE}" DIRECTORY)
+        _python_find_runtime_library (${_PYTHON_PREFIX}_RUNTIME_LIBRARY_RELEASE
+                                      NAMES ${_${_PYTHON_PREFIX}_LIB_NAMES}
+                                      NAMES_PER_DIR
+                                      HINTS ${_${_PYTHON_PREFIX}_PATH} ${_${_PYTHON_PREFIX}_HINTS}
+                                      PATH_SUFFIXES bin
+                                      NO_SYSTEM_ENVIRONMENT_PATH
+                                      NO_CMAKE_SYSTEM_PATH)
+      endif()
+    endif()
+
+    # retrieve include directory
+    execute_process (COMMAND "${_${_PYTHON_PREFIX}_CONFIG}" --includes
+                     RESULT_VARIABLE _${_PYTHON_PREFIX}_RESULT
+                     OUTPUT_VARIABLE _${_PYTHON_PREFIX}_FLAGS
+                     ERROR_QUIET
+                     OUTPUT_STRIP_TRAILING_WHITESPACE)
+    if (NOT _${_PYTHON_PREFIX}_RESULT)
+      # retrieve include directory
+      string (REGEX MATCHALL "-I[^ ]+" _${_PYTHON_PREFIX}_INCLUDE_DIRS "${_${_PYTHON_PREFIX}_FLAGS}")
+      string (REPLACE "-I" "" _${_PYTHON_PREFIX}_INCLUDE_DIRS "${_${_PYTHON_PREFIX}_INCLUDE_DIRS}")
+      list (REMOVE_DUPLICATES _${_PYTHON_PREFIX}_INCLUDE_DIRS)
+
+      find_path (${_PYTHON_PREFIX}_INCLUDE_DIR
+                 NAMES Python.h
+                 HINTS ${_${_PYTHON_PREFIX}_INCLUDE_DIRS}
+                 NO_SYSTEM_ENVIRONMENT_PATH
+                 NO_CMAKE_SYSTEM_PATH)
+    endif()
+
+    if (${_PYTHON_PREFIX}_LIBRARY_RELEASE AND ${_PYTHON_PREFIX}_INCLUDE_DIR)
+      break()
+    endif()
+  endforeach()
+
+  # Rely on HINTS and standard paths if config tool failed to locate artifacts
+  if (NOT (${_PYTHON_PREFIX}_LIBRARY_RELEASE OR ${_PYTHON_PREFIX}_LIBRARY_DEBUG) OR NOT ${_PYTHON_PREFIX}_INCLUDE_DIR)
+    foreach (_${_PYTHON_PREFIX}_VERSION IN LISTS _${_PYTHON_PREFIX}_FIND_VERSIONS)
+      string (REPLACE "." "" _${_PYTHON_PREFIX}_VERSION_NO_DOTS ${_${_PYTHON_PREFIX}_VERSION})
+
+      _python_get_frameworks (_${_PYTHON_PREFIX}_FRAMEWORK_PATHS ${_${_PYTHON_PREFIX}_VERSION})
+
+      # search first in known locations
+      find_library (${_PYTHON_PREFIX}_LIBRARY_RELEASE
+                    NAMES python${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}
+                          python${_${_PYTHON_PREFIX}_VERSION}mu
+                          python${_${_PYTHON_PREFIX}_VERSION}m
+                          python${_${_PYTHON_PREFIX}_VERSION}u
+                          python${_${_PYTHON_PREFIX}_VERSION}
+                    NAMES_PER_DIR
+                    HINTS ${_${_PYTHON_PREFIX}_HINTS}
+                    PATHS ${_${_PYTHON_PREFIX}_FRAMEWORK_PATHS}
+                          [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                          [HKEY_CURRENT_USER\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH}\\InstallPath]
+                          [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                          [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH}\\InstallPath]
+                    PATH_SUFFIXES lib/${CMAKE_LIBRARY_ARCHITECTURE} lib libs
+                                  lib/python${_${_PYTHON_PREFIX}_VERSION}/config-${_${_PYTHON_PREFIX}_VERSION}mu
+                                  lib/python${_${_PYTHON_PREFIX}_VERSION}/config-${_${_PYTHON_PREFIX}_VERSION}m
+                                  lib/python${_${_PYTHON_PREFIX}_VERSION}/config-${_${_PYTHON_PREFIX}_VERSION}u
+                                  lib/python${_${_PYTHON_PREFIX}_VERSION}/config-${_${_PYTHON_PREFIX}_VERSION}
+                                  lib/python${_${_PYTHON_PREFIX}_VERSION}/config
+                    NO_SYSTEM_ENVIRONMENT_PATH
+                    NO_CMAKE_SYSTEM_PATH)
+      # search in all default paths
+      find_library (${_PYTHON_PREFIX}_LIBRARY_RELEASE
+                    NAMES python${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}
+                          python${_${_PYTHON_PREFIX}_VERSION}mu
+                          python${_${_PYTHON_PREFIX}_VERSION}m
+                          python${_${_PYTHON_PREFIX}_VERSION}u
+                          python${_${_PYTHON_PREFIX}_VERSION}
+                    NAMES_PER_DIR
+                    PATH_SUFFIXES lib/${CMAKE_LIBRARY_ARCHITECTURE} lib libs
+                                  lib/python${_${_PYTHON_PREFIX}_VERSION}/config-${_${_PYTHON_PREFIX}_VERSION}mu
+                                  lib/python${_${_PYTHON_PREFIX}_VERSION}/config-${_${_PYTHON_PREFIX}_VERSION}m
+                                  lib/python${_${_PYTHON_PREFIX}_VERSION}/config-${_${_PYTHON_PREFIX}_VERSION}u
+                                  lib/python${_${_PYTHON_PREFIX}_VERSION}/config-${_${_PYTHON_PREFIX}_VERSION}
+                                  lib/python${_${_PYTHON_PREFIX}_VERSION}/config)
+      # retrieve runtime library
+      if (${_PYTHON_PREFIX}_LIBRARY_RELEASE)
+        get_filename_component (_${_PYTHON_PREFIX}_PATH "${${_PYTHON_PREFIX}_LIBRARY_RELEASE}" DIRECTORY)
+        _python_find_runtime_library (${_PYTHON_PREFIX}_RUNTIME_LIBRARY_RELEASE
+                                      NAMES python${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}
+                                            python${_${_PYTHON_PREFIX}_VERSION}mu
+                                            python${_${_PYTHON_PREFIX}_VERSION}m
+                                            python${_${_PYTHON_PREFIX}_VERSION}u
+                                            python${_${_PYTHON_PREFIX}_VERSION}
+                                      NAMES_PER_DIR
+                                      HINTS "${_${_PYTHON_PREFIX}_PATH}" ${_${_PYTHON_PREFIX}_HINTS}
+                                      PATHS ${_${_PYTHON_PREFIX}_FRAMEWORK_PATHS}
+                                            [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                                            [HKEY_CURRENT_USER\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH}\\InstallPath]
+                                            [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                                            [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH}\\InstallPath]
+                                      PATH_SUFFIXES bin)
+      endif()
+
+      if (WIN32)
+        # search for debug library
+        if (${_PYTHON_PREFIX}_LIBRARY_RELEASE)
+          # use library location as a hint
+          get_filename_component (_${_PYTHON_PREFIX}_PATH "${${_PYTHON_PREFIX}_LIBRARY_RELEASE}" DIRECTORY)
+          find_library (${_PYTHON_PREFIX}_LIBRARY_DEBUG
+                      NAMES python${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}_d
+                      NAMES_PER_DIR
+                      HINTS "${_${_PYTHON_PREFIX}_PATH}" ${_${_PYTHON_PREFIX}_HINTS}
+                      NO_DEFAULT_PATH)
+        else()
+          # search first in known locations
+          find_library (${_PYTHON_PREFIX}_LIBRARY_DEBUG
+                        NAMES python${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}_d
+                        NAMES_PER_DIR
+                        HINTS ${_${_PYTHON_PREFIX}_HINTS}
+                        PATHS [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                              [HKEY_CURRENT_USER\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH}\\InstallPath]
+                              [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                              [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH}\\InstallPath]
+                        PATH_SUFFIXES lib libs
+                        NO_SYSTEM_ENVIRONMENT_PATH
+                        NO_CMAKE_SYSTEM_PATH)
+          # search in all default paths
+          find_library (${_PYTHON_PREFIX}_LIBRARY_DEBUG
+                        NAMES python${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}_d
+                        NAMES_PER_DIR
+                        PATH_SUFFIXES lib libs)
+        endif()
+        if (${_PYTHON_PREFIX}_LIBRARY_DEBUG)
+          get_filename_component (_${_PYTHON_PREFIX}_PATH "${${_PYTHON_PREFIX}_LIBRARY_DEBUG}" DIRECTORY)
+          _python_find_runtime_library (${_PYTHON_PREFIX}_RUNTIME_LIBRARY_DEBUG
+                                        NAMES python${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}_d
+                                        NAMES_PER_DIR
+                                        HINTS "${_${_PYTHON_PREFIX}_PATH}" ${_${_PYTHON_PREFIX}_HINTS}
+                                        PATHS [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                                              [HKEY_CURRENT_USER\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH}\\InstallPath]
+                                              [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                                              [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH}\\InstallPath]
+                                        PATH_SUFFIXES bin)
+        endif()
+      endif()
+
+      # Don't search for include dir until library location is known
+      if (${_PYTHON_PREFIX}_LIBRARY_RELEASE OR ${_PYTHON_PREFIX}_LIBRARY_DEBUG)
+        unset (_${_PYTHON_PREFIX}_INCLUDE_HINTS)
+        foreach (_${_PYTHON_PREFIX}_LIB IN ITEMS ${_PYTHON_PREFIX}_LIBRARY_RELEASE ${_PYTHON_PREFIX}_LIBRARY_DEBUG)
+          if (${_${_PYTHON_PREFIX}_LIB})
+            # Use the library's install prefix as a hint
+            if (${_${_PYTHON_PREFIX}_LIB} MATCHES "^(.+/Frameworks/Python.framework/Versions/[0-9.]+)")
+              list (APPEND _${_PYTHON_PREFIX}_INCLUDE_HINTS "${CMAKE_MATCH_1}")
+            elseif (${_${_PYTHON_PREFIX}_LIB} MATCHES "^(.+)/lib(64|32)?/python[0-9.]+/config")
+              list (APPEND _${_PYTHON_PREFIX}_INCLUDE_HINTS "${CMAKE_MATCH_1}")
+            elseif (DEFINED CMAKE_LIBRARY_ARCHITECTURE AND ${_${_PYTHON_PREFIX}_LIB} MATCHES "^(.+)/lib/${CMAKE_LIBRARY_ARCHITECTURE}")
+              list (APPEND _${_PYTHON_PREFIX}_INCLUDE_HINTS "${CMAKE_MATCH_1}")
+            else()
+              # assume library is in a directory under root
+              get_filename_component (_${_PYTHON_PREFIX}_PREFIX "${${_${_PYTHON_PREFIX}_LIB}}" DIRECTORY)
+              get_filename_component (_${_PYTHON_PREFIX}_PREFIX "${_${_PYTHON_PREFIX}_PREFIX}" DIRECTORY)
+              list (APPEND _${_PYTHON_PREFIX}_INCLUDE_HINTS "${_${_PYTHON_PREFIX}_PREFIX}")
+            endif()
+          endif()
+        endforeach()
+        list (REMOVE_DUPLICATES _${_PYTHON_PREFIX}_INCLUDE_HINTS)
+
+        find_path (${_PYTHON_PREFIX}_INCLUDE_DIR
+                   NAMES Python.h
+                   HINTS ${_${_PYTHON_PREFIX}_INCLUDE_HINTS} ${_${_PYTHON_PREFIX}_HINTS}
+                   PATHS ${_${_PYTHON_PREFIX}_FRAMEWORK_PATHS}
+                         [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                         [HKEY_CURRENT_USER\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH}\\InstallPath]
+                         [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_${_PYTHON_PREFIX}_VERSION}\\InstallPath]
+                         [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\ContinuumAnalytics\\Anaconda${_${_PYTHON_PREFIX}_VERSION_NO_DOTS}-${_${_PYTHON_PREFIX}_ARCH}\\InstallPath]
+                   PATH_SUFFIXES include/python${_${_PYTHON_PREFIX}_VERSION}mu
+                                 include/python${_${_PYTHON_PREFIX}_VERSION}m
+                                 include/python${_${_PYTHON_PREFIX}_VERSION}u
+                                 include/python${_${_PYTHON_PREFIX}_VERSION}
+                                 include
+                   NO_SYSTEM_ENVIRONMENT_PATH
+                   NO_CMAKE_SYSTEM_PATH)
+      endif()
+
+      if ((${_PYTHON_PREFIX}_LIBRARY_RELEASE OR ${_PYTHON_PREFIX}_LIBRARY_DEBUG) AND ${_PYTHON_PREFIX}_INCLUDE_DIR)
+        break()
+      endif()
+    endforeach()
+
+    # search header file in standard locations
+    find_path (${_PYTHON_PREFIX}_INCLUDE_DIR
+               NAMES Python.h)
+  endif()
+
+  if (${_PYTHON_PREFIX}_INCLUDE_DIR)
+    # retrieve version from header file
+    file (STRINGS "${${_PYTHON_PREFIX}_INCLUDE_DIR}/patchlevel.h" _${_PYTHON_PREFIX}_VERSION
+          REGEX "^#define[ \t]+PY_VERSION[ \t]+\"[^\"]+\"")
+    string (REGEX REPLACE "^#define[ \t]+PY_VERSION[ \t]+\"([^\"]+)\".*" "\\1"
+                          _${_PYTHON_PREFIX}_VERSION "${_${_PYTHON_PREFIX}_VERSION}")
+    string (REGEX MATCHALL "[0-9]+" _${_PYTHON_PREFIX}_VERSIONS "${_${_PYTHON_PREFIX}_VERSION}")
+    list (GET _${_PYTHON_PREFIX}_VERSIONS 0 _${_PYTHON_PREFIX}_VERSION_MAJOR)
+    list (GET _${_PYTHON_PREFIX}_VERSIONS 1 _${_PYTHON_PREFIX}_VERSION_MINOR)
+    list (GET _${_PYTHON_PREFIX}_VERSIONS 2 _${_PYTHON_PREFIX}_VERSION_PATCH)
+
+    if (NOT ${_PYTHON_PREFIX}_Interpreter_FOUND AND NOT ${_PYTHON_PREFIX}_Compiler_FOUND)
+      # set public version information
+      set (${_PYTHON_PREFIX}_VERSION ${_${_PYTHON_PREFIX}_VERSION})
+      set (${_PYTHON_PREFIX}_VERSION_MAJOR ${_${_PYTHON_PREFIX}_VERSION_MAJOR})
+      set (${_PYTHON_PREFIX}_VERSION_MINOR ${_${_PYTHON_PREFIX}_VERSION_MINOR})
+      set (${_PYTHON_PREFIX}_VERSION_PATCH ${_${_PYTHON_PREFIX}_VERSION_PATCH})
+    endif()
+  endif()
+
+  # define public variables
+  include (${CMAKE_CURRENT_LIST_DIR}/../SelectLibraryConfigurations.cmake)
+  select_library_configurations (${_PYTHON_PREFIX})
+  if (${_PYTHON_PREFIX}_RUNTIME_LIBRARY_RELEASE)
+    set (${_PYTHON_PREFIX}_RUNTIME_LIBRARY "${${_PYTHON_PREFIX}_RUNTIME_LIBRARY_RELEASE}")
+  elseif (${_PYTHON_PREFIX}_RUNTIME_LIBRARY_DEBUG)
+    set (${_PYTHON_PREFIX}_RUNTIME_LIBRARY "${${_PYTHON_PREFIX}_RUNTIME_LIBRARY_DEBUG}")
+  else()
+    set (${_PYTHON_PREFIX}_RUNTIME_LIBRARY "$${_PYTHON_PREFIX}_RUNTIME_LIBRARY-NOTFOUND")
+  endif()
+
+  _python_set_library_dirs (${_PYTHON_PREFIX}_LIBRARY_DIRS
+                            ${_PYTHON_PREFIX}_LIBRARY_RELEASE ${_PYTHON_PREFIX}_LIBRARY_DEBUG)
+  if (UNIX)
+    if (${_PYTHON_PREFIX}_LIBRARY_RELEASE MATCHES "${CMAKE_SHARED_LIBRARY_SUFFIX}$"
+        OR ${_PYTHON_PREFIX}_LIBRARY_RELEASE MATCHES "${CMAKE_SHARED_LIBRARY_SUFFIX}$")
+      set (${_PYTHON_PREFIX}_RUNTIME_LIBRARY_DIRS ${${_PYTHON_PREFIX}_LIBRARY_DIRS})
+    endif()
+  else()
+      _python_set_library_dirs (${_PYTHON_PREFIX}_RUNTIME_LIBRARY_DIRS
+                                ${_PYTHON_PREFIX}_RUNTIME_LIBRARY_RELEASE ${_PYTHON_PREFIX}_RUNTIME_LIBRARY_DEBUG)
+  endif()
+
+  set (${_PYTHON_PREFIX}_INCLUDE_DIRS "${${_PYTHON_PREFIX}_INCLUDE_DIR}")
+
+  mark_as_advanced (${_PYTHON_PREFIX}_RUNTIME_LIBRARY_RELEASE
+                    ${_PYTHON_PREFIX}_RUNTIME_LIBRARY_DEBUG
+                    ${_PYTHON_PREFIX}_INCLUDE_DIR)
+
+  if ((${_PYTHON_PREFIX}_LIBRARY_RELEASE OR ${_PYTHON_PREFIX}_LIBRARY_DEBUG)
+      AND ${_PYTHON_PREFIX}_INCLUDE_DIR)
+    if (${_PYTHON_PREFIX}_Interpreter_FOUND OR ${_PYTHON_PREFIX}_Compiler_FOUND)
+      # development environment must be compatible with interpreter/compiler
+      if (${_${_PYTHON_PREFIX}_VERSION_MAJOR}.${_${_PYTHON_PREFIX}_VERSION_MINOR} VERSION_EQUAL ${${_PYTHON_PREFIX}_VERSION_MAJOR}.${${_PYTHON_PREFIX}_VERSION_MINOR})
+        set (${_PYTHON_PREFIX}_Development_FOUND TRUE)
+      endif()
+    elseif (${_PYTHON_PREFIX}_VERSION_MAJOR VERSION_EQUAL _${_PYTHON_PREFIX}_REQUIRED_VERSION_MAJOR)
+      set (${_PYTHON_PREFIX}_Development_FOUND TRUE)
+    endif()
+  endif()
+
+  # Restore the original find library ordering
+  if (DEFINED _${_PYTHON_PREFIX}_CMAKE_FIND_LIBRARY_SUFFIXES)
+    set (CMAKE_FIND_LIBRARY_SUFFIXES ${_${_PYTHON_PREFIX}_CMAKE_FIND_LIBRARY_SUFFIXES})
+  endif()
+endif()
+
+# final validation
+if (${_PYTHON_PREFIX}_VERSION_MAJOR AND
+    NOT ${_PYTHON_PREFIX}_VERSION_MAJOR VERSION_EQUAL _${_PYTHON_PREFIX}_REQUIRED_VERSION_MAJOR)
+  _python_display_failure ("Could NOT find ${_PYTHON_PREFIX}: Found unsuitable major version \"${${_PYTHON_PREFIX}_VERSION_MAJOR}\", but required major version is exact version \"${_${_PYTHON_PREFIX}_REQUIRED_VERSION_MAJOR}\"")
+endif()
+
+include (${CMAKE_CURRENT_LIST_DIR}/../FindPackageHandleStandardArgs.cmake)
+find_package_handle_standard_args (${_PYTHON_PREFIX}
+                                   REQUIRED_VARS ${_${_PYTHON_PREFIX}_REQUIRED_VARS}
+                                   VERSION_VAR ${_PYTHON_PREFIX}_VERSION
+                                   HANDLE_COMPONENTS)
+
+# Create imported targets and helper functions
+if ("Interpreter" IN_LIST ${_PYTHON_PREFIX}_FIND_COMPONENTS
+    AND ${_PYTHON_PREFIX}_Interpreter_FOUND
+    AND NOT TARGET ${_PYTHON_PREFIX}::Interpreter)
+  add_executable (${_PYTHON_PREFIX}::Interpreter IMPORTED)
+  set_property (TARGET ${_PYTHON_PREFIX}::Interpreter
+                PROPERTY IMPORTED_LOCATION "${${_PYTHON_PREFIX}_EXECUTABLE}")
+endif()
+
+if ("Compiler" IN_LIST ${_PYTHON_PREFIX}_FIND_COMPONENTS
+    AND ${_PYTHON_PREFIX}_Compiler_FOUND
+    AND NOT TARGET ${_PYTHON_PREFIX}::Compiler)
+  add_executable (${_PYTHON_PREFIX}::Compiler IMPORTED)
+  set_property (TARGET ${_PYTHON_PREFIX}::Compiler
+                PROPERTY IMPORTED_LOCATION "${${_PYTHON_PREFIX}_COMPILER}")
+endif()
+
+if ("Development" IN_LIST ${_PYTHON_PREFIX}_FIND_COMPONENTS
+    AND ${_PYTHON_PREFIX}_Development_FOUND AND NOT TARGET ${_PYTHON_PREFIX}::Python)
+
+  if (${_PYTHON_PREFIX}_LIBRARY_RELEASE MATCHES "${CMAKE_SHARED_LIBRARY_SUFFIX}$"
+      OR ${_PYTHON_PREFIX}_LIBRARY_DEBUG MATCHES "${CMAKE_SHARED_LIBRARY_SUFFIX}$"
+      OR ${_PYTHON_PREFIX}_RUNTIME_LIBRARY_RELEASE OR ${_PYTHON_PREFIX}_RUNTIME_LIBRARY_DEBUG)
+    set (_${_PYTHON_PREFIX}_LIBRARY_TYPE SHARED)
+  else()
+    set (_${_PYTHON_PREFIX}_LIBRARY_TYPE STATIC)
+  endif()
+
+  add_library (${_PYTHON_PREFIX}::Python ${_${_PYTHON_PREFIX}_LIBRARY_TYPE} IMPORTED)
+
+  set_property (TARGET ${_PYTHON_PREFIX}::Python
+                PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${${_PYTHON_PREFIX}_INCLUDE_DIR}")
+
+  if ((${_PYTHON_PREFIX}_LIBRARY_RELEASE AND ${_PYTHON_PREFIX}_RUNTIME_LIBRARY_RELEASE)
+      OR (${_PYTHON_PREFIX}_LIBRARY_DEBUG AND ${_PYTHON_PREFIX}_RUNTIME_LIBRARY_DEBUG))
+    # System manage shared libraries in two parts: import and runtime
+    if (${_PYTHON_PREFIX}_LIBRARY_RELEASE AND ${_PYTHON_PREFIX}_LIBRARY_DEBUG)
+      set_property (TARGET ${_PYTHON_PREFIX}::Python PROPERTY IMPORTED_CONFIGURATIONS RELEASE DEBUG)
+      set_target_properties (${_PYTHON_PREFIX}::Python
+                             PROPERTIES IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "C"
+                                        IMPORTED_IMPLIB_RELEASE "${${_PYTHON_PREFIX}_LIBRARY_RELEASE}"
+                                        IMPORTED_LOCATION_RELEASE "${${_PYTHON_PREFIX}_RUNTIME_LIBRARY_RELEASE}")
+      set_target_properties (${_PYTHON_PREFIX}::Python
+                             PROPERTIES IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "C"
+                                        IMPORTED_IMPLIB_DEBUG "${${_PYTHON_PREFIX}_LIBRARY_DEBUG}"
+                                        IMPORTED_LOCATION_DEBUG "${${_PYTHON_PREFIX}_RUNTIME_LIBRARY_DEBUG}")
+    else()
+      set_target_properties (${_PYTHON_PREFIX}::Python
+                             PROPERTIES IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+                                        IMPORTED_IMPLIB "${${_PYTHON_PREFIX}_LIBRARY}"
+                                        IMPORTED_LOCATION "${${_PYTHON_PREFIX}_RUNTIME_LIBRARY}")
+    endif()
+  else()
+    if (${_PYTHON_PREFIX}_LIBRARY_RELEASE AND ${_PYTHON_PREFIX}_LIBRARY_DEBUG)
+      set_property (TARGET ${_PYTHON_PREFIX}::Python PROPERTY IMPORTED_CONFIGURATIONS RELEASE DEBUG)
+      set_target_properties (${_PYTHON_PREFIX}::Python
+                             PROPERTIES IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "C"
+                                        IMPORTED_LOCATION_RELEASE "${${_PYTHON_PREFIX}_LIBRARY_RELEASE}")
+      set_target_properties (${_PYTHON_PREFIX}::Python
+                             PROPERTIES IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "C"
+                                        IMPORTED_LOCATION_DEBUG "${${_PYTHON_PREFIX}_LIBRARY_DEBUG}")
+    else()
+      set_target_properties (${_PYTHON_PREFIX}::Python
+                             PROPERTIES IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+                                        IMPORTED_LOCATION "${${_PYTHON_PREFIX}_LIBRARY}")
+    endif()
+  endif()
+
+  if (_${_PYTHON_PREFIX}_CONFIG AND _${_PYTHON_PREFIX}_LIBRARY_TYPE STREQUAL "STATIC")
+    # extend link information with dependent libraries
+    execute_process (COMMAND "${_${_PYTHON_PREFIX}_CONFIG}" --ldflags
+                     RESULT_VARIABLE _${_PYTHON_PREFIX}_RESULT
+                     OUTPUT_VARIABLE _${_PYTHON_PREFIX}_FLAGS
+                     ERROR_QUIET
+                     OUTPUT_STRIP_TRAILING_WHITESPACE)
+    if (NOT _${_PYTHON_PREFIX}_RESULT)
+      string (REGEX MATCHALL "-[Ll][^ ]+" _${_PYTHON_PREFIX}_LINK_LIBRARIES "${_${_PYTHON_PREFIX}_FLAGS}")
+      # remove elements relative to python library itself
+      list (FILTER _${_PYTHON_PREFIX}_LINK_LIBRARIES EXCLUDE REGEX "-lpython")
+      foreach (_${_PYTHON_PREFIX}_DIR IN LISTS ${_PYTHON_PREFIX}_LIBRARY_DIRS)
+        list (FILTER _${_PYTHON_PREFIX}_LINK_LIBRARIES EXCLUDE REGEX "-L${${_PYTHON_PREFIX}_DIR}")
+      endforeach()
+      set_property (TARGET ${_PYTHON_PREFIX}::Python
+                    PROPERTY INTERFACE_LINK_LIBRARIES ${_${_PYTHON_PREFIX}_LINK_LIBRARIES})
+    endif()
+  endif()
+
+  #
+  # PYTHON_ADD_LIBRARY (<name> [STATIC|SHARED|MODULE] src1 src2 ... srcN)
+  # It is used to build modules for python.
+  #
+  function (__${_PYTHON_PREFIX}_ADD_LIBRARY prefix name)
+    cmake_parse_arguments (PARSE_ARGV 2 PYTHON_ADD_LIBRARY
+                           "STATIC;SHARED;MODULE" "" "")
+
+    unset (type)
+    if (NOT (PYTHON_ADD_LIBRARY_STATIC
+          OR PYTHON_ADD_LIBRARY_SHARED
+          OR PYTHON_ADD_LIBRARY_MODULE))
+      set (type MODULE)
+    endif()
+    add_library (${name} ${type} ${ARGN})
+    target_link_libraries (${name} PRIVATE ${prefix}::Python)
+
+    # customize library name to follow module name rules
+    get_property (type TARGET ${name} PROPERTY TYPE)
+    if (type STREQUAL "MODULE_LIBRARY")
+      set_property (TARGET ${name} PROPERTY PREFIX "")
+      if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
+        set_property (TARGET ${name} PROPERTY SUFFIX ".pyd")
+      endif()
+    endif()
+  endfunction()
+endif()
+
+# final clean-up
+
+# Restore CMAKE_FIND_FRAMEWORK
+if (DEFINED _${_PYTHON_PREFIX}_CMAKE_FIND_FRAMEWORK)
+  set (CMAKE_FIND_FRAMEWORK ${_${_PYTHON_PREFIX}_CMAKE_FIND_FRAMEWORK})
+  unset (_${_PYTHON_PREFIX}_CMAKE_FIND_FRAMEWORK)
+else()
+  unset (CMAKE_FIND_FRAMEWORK)
+endif()
+
+unset (_${_PYTHON_PREFIX}_CONFIG CACHE)
diff --git a/cmake/modules/FindPython2.cmake b/cmake/modules/FindPython2.cmake
new file mode 100644
index 0000000..22e9a8f
--- /dev/null
+++ b/cmake/modules/FindPython2.cmake
@@ -0,0 +1,146 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#[=======================================================================[.rst:
+FindPython2
+-----------
+
+Find Python 2 interpreter, compiler and development environment (include
+directories and libraries).
+
+Three components are supported:
+
+* ``Interpreter``: search for Python 2 interpreter
+* ``Compiler``: search for Python 2 compiler. Only offered by IronPython.
+* ``Development``: search for development artifacts (include directories and
+  libraries)
+
+If no ``COMPONENTS`` is specified, ``Interpreter`` is assumed.
+
+To ensure consistent versions between components ``Interpreter``, ``Compiler``
+and ``Development``, specify all components at the same time::
+
+  find_package (Python2 COMPONENTS Interpreter Development)
+
+This module looks only for version 2 of Python. This module can be used
+concurrently with :module:`FindPython3` module to use both Python versions.
+
+The :module:`FindPython` module can be used if Python version does not matter
+for you.
+
+Imported Targets
+^^^^^^^^^^^^^^^^
+
+This module defines the following :ref:`Imported Targets <Imported Targets>`:
+
+``Python2::Interpreter``
+  Python 2 interpreter. Target defined if component ``Interpreter`` is found.
+``Python2::Compiler``
+  Python 2 compiler. Target defined if component ``Compiler`` is found.
+``Python2::Python``
+  Python 2 library. Target defined if component ``Development`` is found.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This module will set the following variables in your project
+(see :ref:`Standard Variable Names <CMake Developer Standard Variable Names>`):
+
+``Python2_FOUND``
+  System has the Python 2 requested components.
+``Python2_Interpreter_FOUND``
+  System has the Python 2 interpreter.
+``Python2_EXECUTABLE``
+  Path to the Python 2 interpreter.
+``Python2_INTERPRETER_ID``
+  A short string unique to the interpreter. Possible values include:
+    * Python
+    * ActivePython
+    * Anaconda
+    * Canopy
+    * IronPython
+``Python2_STDLIB``
+  Standard platform independent installation directory.
+
+  Information returned by
+  ``distutils.sysconfig.get_python_lib(plat_specific=False,standard_lib=True)``.
+``Python2_STDARCH``
+  Standard platform dependent installation directory.
+
+  Information returned by
+  ``distutils.sysconfig.get_python_lib(plat_specific=True,standard_lib=True)``.
+``Python2_SITELIB``
+  Third-party platform independent installation directory.
+
+  Information returned by
+  ``distutils.sysconfig.get_python_lib(plat_specific=False,standard_lib=False)``.
+``Python2_SITEARCH``
+  Third-party platform dependent installation directory.
+
+  Information returned by
+  ``distutils.sysconfig.get_python_lib(plat_specific=True,standard_lib=False)``.
+``Python2_Compiler_FOUND``
+  System has the Python 2 compiler.
+``Python2_COMPILER``
+  Path to the Python 2 compiler. Only offered by IronPython.
+``Python2_COMPILER_ID``
+  A short string unique to the compiler. Possible values include:
+    * IronPython
+``Python2_Development_FOUND``
+  System has the Python 2 development artifacts.
+``Python2_INCLUDE_DIRS``
+  The Python 2 include directories.
+``Python2_LIBRARIES``
+  The Python 2 libraries.
+``Python2_LIBRARY_DIRS``
+  The Python 2 library directories.
+``Python2_RUNTIME_LIBRARY_DIRS``
+  The Python 2 runtime library directories.
+``Python2_VERSION``
+  Python 2 version.
+``Python2_VERSION_MAJOR``
+  Python 2 major version.
+``Python2_VERSION_MINOR``
+  Python 2 minor version.
+``Python2_VERSION_PATCH``
+  Python 2 patch version.
+
+Hints
+^^^^^
+
+``Python2_ROOT_DIR``
+  Define the root directory of a Python 2 installation.
+
+``Python2_USE_STATIC_LIBS``
+  * If not defined, search for shared libraries and static libraries in that
+    order.
+  * If set to TRUE, search **only** for static libraries.
+  * If set to FALSE, search **only** for shared libraries.
+
+Commands
+^^^^^^^^
+
+This module defines the command ``Python2_add_library`` which have the same
+semantic as :command:`add_library` but take care of Python module naming rules
+(only applied if library is of type ``MODULE``) and add dependency to target
+``Python2::Python``::
+
+  Python2_add_library (my_module MODULE src1.cpp)
+
+If library type is not specified, ``MODULE`` is assumed.
+#]=======================================================================]
+
+
+set (_PYTHON_PREFIX Python2)
+
+set (_Python2_REQUIRED_VERSION_MAJOR 2)
+
+include (${CMAKE_CURRENT_LIST_DIR}/FindPython/Support.cmake)
+
+if (COMMAND __Python2_add_library)
+  macro (Python2_add_library)
+    __Python2_add_library (Python2 ${ARGV})
+  endmacro()
+endif()
+
+unset (_PYTHON_PREFIX)
diff --git a/cmake/modules/FindPython3.cmake b/cmake/modules/FindPython3.cmake
new file mode 100644
index 0000000..99c159b
--- /dev/null
+++ b/cmake/modules/FindPython3.cmake
@@ -0,0 +1,146 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#[=======================================================================[.rst:
+FindPython3
+-----------
+
+Find Python 3 interpreter, compiler and development environment (include
+directories and libraries).
+
+Three components are supported:
+
+* ``Interpreter``: search for Python 3 interpreter
+* ``Compiler``: search for Python 3 compiler. Only offered by IronPython.
+* ``Development``: search for development artifacts (include directories and
+  libraries)
+
+If no ``COMPONENTS`` is specified, ``Interpreter`` is assumed.
+
+To ensure consistent versions between components ``Interpreter``, ``Compiler``
+and ``Development``, specify all components at the same time::
+
+  find_package (Python3 COMPONENTS Interpreter Development)
+
+This module looks only for version 3 of Python. This module can be used
+concurrently with :module:`FindPython2` module to use both Python versions.
+
+The :module:`FindPython` module can be used if Python version does not matter
+for you.
+
+Imported Targets
+^^^^^^^^^^^^^^^^
+
+This module defines the following :ref:`Imported Targets <Imported Targets>`:
+
+``Python3::Interpreter``
+  Python 3 interpreter. Target defined if component ``Interpreter`` is found.
+``Python3::Compiler``
+  Python 3 compiler. Target defined if component ``Compiler`` is found.
+``Python3::Python``
+  Python 3 library. Target defined if component ``Development`` is found.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This module will set the following variables in your project
+(see :ref:`Standard Variable Names <CMake Developer Standard Variable Names>`):
+
+``Python3_FOUND``
+  System has the Python 3 requested components.
+``Python3_Interpreter_FOUND``
+  System has the Python 3 interpreter.
+``Python3_EXECUTABLE``
+  Path to the Python 3 interpreter.
+``Python3_INTERPRETER_ID``
+  A short string unique to the interpreter. Possible values include:
+    * Python
+    * ActivePython
+    * Anaconda
+    * Canopy
+    * IronPython
+``Python3_STDLIB``
+  Standard platform independent installation directory.
+
+  Information returned by
+  ``distutils.sysconfig.get_python_lib(plat_specific=False,standard_lib=True)``.
+``Python3_STDARCH``
+  Standard platform dependent installation directory.
+
+  Information returned by
+  ``distutils.sysconfig.get_python_lib(plat_specific=True,standard_lib=True)``.
+``Python3_SITELIB``
+  Third-party platform independent installation directory.
+
+  Information returned by
+  ``distutils.sysconfig.get_python_lib(plat_specific=False,standard_lib=False)``.
+``Python3_SITEARCH``
+  Third-party platform dependent installation directory.
+
+  Information returned by
+  ``distutils.sysconfig.get_python_lib(plat_specific=True,standard_lib=False)``.
+``Python3_Compiler_FOUND``
+  System has the Python 3 compiler.
+``Python3_COMPILER``
+  Path to the Python 3 compiler. Only offered by IronPython.
+``Python3_COMPILER_ID``
+  A short string unique to the compiler. Possible values include:
+    * IronPython
+``Python3_Development_FOUND``
+  System has the Python 3 development artifacts.
+``Python3_INCLUDE_DIRS``
+  The Python 3 include directories.
+``Python3_LIBRARIES``
+  The Python 3 libraries.
+``Python3_LIBRARY_DIRS``
+  The Python 3 library directories.
+``Python3_RUNTIME_LIBRARY_DIRS``
+  The Python 3 runtime library directories.
+``Python3_VERSION``
+  Python 3 version.
+``Python3_VERSION_MAJOR``
+  Python 3 major version.
+``Python3_VERSION_MINOR``
+  Python 3 minor version.
+``Python3_VERSION_PATCH``
+  Python 3 patch version.
+
+Hints
+^^^^^
+
+``Python3_ROOT_DIR``
+  Define the root directory of a Python 3 installation.
+
+``Python3_USE_STATIC_LIBS``
+  * If not defined, search for shared libraries and static libraries in that
+    order.
+  * If set to TRUE, search **only** for static libraries.
+  * If set to FALSE, search **only** for shared libraries.
+
+Commands
+^^^^^^^^
+
+This module defines the command ``Python3_add_library`` which have the same
+semantic as :command:`add_library` but take care of Python module naming rules
+(only applied if library is of type ``MODULE``) and add dependency to target
+``Python3::Python``::
+
+  Python3_add_library (my_module MODULE src1.cpp)
+
+If library type is not specified, ``MODULE`` is assumed.
+#]=======================================================================]
+
+
+set (_PYTHON_PREFIX Python3)
+
+set (_Python3_REQUIRED_VERSION_MAJOR 3)
+
+include (${CMAKE_CURRENT_LIST_DIR}/FindPython/Support.cmake)
+
+if (COMMAND __Python3_add_library)
+  macro (Python3_add_library)
+    __Python3_add_library (Python3 ${ARGV})
+  endmacro()
+endif()
+
+unset (_PYTHON_PREFIX)
diff --git a/cmake/modules/FindPythonInterp.cmake b/cmake/modules/FindPythonInterp.cmake
new file mode 100644
index 0000000..370e5e4
--- /dev/null
+++ b/cmake/modules/FindPythonInterp.cmake
@@ -0,0 +1,161 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#.rst:
+# FindPythonInterp
+# ----------------
+#
+# Find python interpreter
+#
+# .. deprecated:: 3.12
+#
+#   Use :module:`FindPython3`, :module:`FindPython2` or :module:`FindPython` instead.
+#
+# This module finds if Python interpreter is installed and determines
+# where the executables are.  This code sets the following variables:
+#
+# ::
+#
+#   PYTHONINTERP_FOUND         - Was the Python executable found
+#   PYTHON_EXECUTABLE          - path to the Python interpreter
+#
+#
+#
+# ::
+#
+#   PYTHON_VERSION_STRING      - Python version found e.g. 2.5.2
+#   PYTHON_VERSION_MAJOR       - Python major version found e.g. 2
+#   PYTHON_VERSION_MINOR       - Python minor version found e.g. 5
+#   PYTHON_VERSION_PATCH       - Python patch version found e.g. 2
+#
+#
+#
+# The Python_ADDITIONAL_VERSIONS variable can be used to specify a list
+# of version numbers that should be taken into account when searching
+# for Python.  You need to set this variable before calling
+# find_package(PythonInterp).
+#
+# If calling both ``find_package(PythonInterp)`` and
+# ``find_package(PythonLibs)``, call ``find_package(PythonInterp)`` first to
+# get the currently active Python version by default with a consistent version
+# of PYTHON_LIBRARIES.
+
+unset(_Python_NAMES)
+
+set(_PYTHON1_VERSIONS 1.6 1.5)
+set(_PYTHON2_VERSIONS 2.7 2.6 2.5 2.4 2.3 2.2 2.1 2.0)
+set(_PYTHON3_VERSIONS 3.8 3.7 3.6 3.5 3.4 3.3 3.2 3.1 3.0)
+
+if(PythonInterp_FIND_VERSION)
+    if(PythonInterp_FIND_VERSION_COUNT GREATER 1)
+        set(_PYTHON_FIND_MAJ_MIN "${PythonInterp_FIND_VERSION_MAJOR}.${PythonInterp_FIND_VERSION_MINOR}")
+        list(APPEND _Python_NAMES
+             python${_PYTHON_FIND_MAJ_MIN}
+             python${PythonInterp_FIND_VERSION_MAJOR})
+        unset(_PYTHON_FIND_OTHER_VERSIONS)
+        if(NOT PythonInterp_FIND_VERSION_EXACT)
+            foreach(_PYTHON_V ${_PYTHON${PythonInterp_FIND_VERSION_MAJOR}_VERSIONS})
+                if(NOT _PYTHON_V VERSION_LESS _PYTHON_FIND_MAJ_MIN)
+                    list(APPEND _PYTHON_FIND_OTHER_VERSIONS ${_PYTHON_V})
+                endif()
+             endforeach()
+        endif()
+        unset(_PYTHON_FIND_MAJ_MIN)
+    else()
+        list(APPEND _Python_NAMES python${PythonInterp_FIND_VERSION_MAJOR})
+        set(_PYTHON_FIND_OTHER_VERSIONS ${_PYTHON${PythonInterp_FIND_VERSION_MAJOR}_VERSIONS})
+    endif()
+else()
+    set(_PYTHON_FIND_OTHER_VERSIONS ${_PYTHON3_VERSIONS} ${_PYTHON2_VERSIONS} ${_PYTHON1_VERSIONS})
+endif()
+find_program(PYTHON_EXECUTABLE NAMES ${_Python_NAMES})
+
+# Set up the versions we know about, in the order we will search. Always add
+# the user supplied additional versions to the front.
+set(_Python_VERSIONS ${Python_ADDITIONAL_VERSIONS})
+# If FindPythonInterp has already found the major and minor version,
+# insert that version next to get consistent versions of the interpreter and
+# library.
+if(DEFINED PYTHONLIBS_VERSION_STRING)
+  string(REPLACE "." ";" _PYTHONLIBS_VERSION "${PYTHONLIBS_VERSION_STRING}")
+  list(GET _PYTHONLIBS_VERSION 0 _PYTHONLIBS_VERSION_MAJOR)
+  list(GET _PYTHONLIBS_VERSION 1 _PYTHONLIBS_VERSION_MINOR)
+  list(APPEND _Python_VERSIONS ${_PYTHONLIBS_VERSION_MAJOR}.${_PYTHONLIBS_VERSION_MINOR})
+endif()
+# Search for the current active python version first
+list(APPEND _Python_VERSIONS ";")
+list(APPEND _Python_VERSIONS ${_PYTHON_FIND_OTHER_VERSIONS})
+
+unset(_PYTHON_FIND_OTHER_VERSIONS)
+unset(_PYTHON1_VERSIONS)
+unset(_PYTHON2_VERSIONS)
+unset(_PYTHON3_VERSIONS)
+
+# Search for newest python version if python executable isn't found
+if(NOT PYTHON_EXECUTABLE)
+    foreach(_CURRENT_VERSION IN LISTS _Python_VERSIONS)
+      set(_Python_NAMES python${_CURRENT_VERSION})
+      if(CMAKE_HOST_WIN32)
+        list(APPEND _Python_NAMES python)
+      endif()
+      find_program(PYTHON_EXECUTABLE
+        NAMES ${_Python_NAMES}
+        PATHS
+            [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]
+            [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}-32\\InstallPath]
+            [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}-64\\InstallPath]
+            [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]
+            [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}-32\\InstallPath]
+            [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}-64\\InstallPath]
+        )
+    endforeach()
+endif()
+
+# determine python version string
+if(PYTHON_EXECUTABLE)
+    execute_process(COMMAND "${PYTHON_EXECUTABLE}" -c
+                            "import sys; sys.stdout.write(';'.join([str(x) for x in sys.version_info[:3]]))"
+                    OUTPUT_VARIABLE _VERSION
+                    RESULT_VARIABLE _PYTHON_VERSION_RESULT
+                    ERROR_QUIET)
+    if(NOT _PYTHON_VERSION_RESULT)
+        string(REPLACE ";" "." PYTHON_VERSION_STRING "${_VERSION}")
+        list(GET _VERSION 0 PYTHON_VERSION_MAJOR)
+        list(GET _VERSION 1 PYTHON_VERSION_MINOR)
+        list(GET _VERSION 2 PYTHON_VERSION_PATCH)
+        if(PYTHON_VERSION_PATCH EQUAL 0)
+            # it's called "Python 2.7", not "2.7.0"
+            string(REGEX REPLACE "\\.0$" "" PYTHON_VERSION_STRING "${PYTHON_VERSION_STRING}")
+        endif()
+    else()
+        # sys.version predates sys.version_info, so use that
+        execute_process(COMMAND "${PYTHON_EXECUTABLE}" -c "import sys; sys.stdout.write(sys.version)"
+                        OUTPUT_VARIABLE _VERSION
+                        RESULT_VARIABLE _PYTHON_VERSION_RESULT
+                        ERROR_QUIET)
+        if(NOT _PYTHON_VERSION_RESULT)
+            string(REGEX REPLACE " .*" "" PYTHON_VERSION_STRING "${_VERSION}")
+            string(REGEX REPLACE "^([0-9]+)\\.[0-9]+.*" "\\1" PYTHON_VERSION_MAJOR "${PYTHON_VERSION_STRING}")
+            string(REGEX REPLACE "^[0-9]+\\.([0-9])+.*" "\\1" PYTHON_VERSION_MINOR "${PYTHON_VERSION_STRING}")
+            if(PYTHON_VERSION_STRING MATCHES "^[0-9]+\\.[0-9]+\\.([0-9]+)")
+                set(PYTHON_VERSION_PATCH "${CMAKE_MATCH_1}")
+            else()
+                set(PYTHON_VERSION_PATCH "0")
+            endif()
+        else()
+            # sys.version was first documented for Python 1.5, so assume
+            # this is older.
+            set(PYTHON_VERSION_STRING "1.4")
+            set(PYTHON_VERSION_MAJOR "1")
+            set(PYTHON_VERSION_MINOR "4")
+            set(PYTHON_VERSION_PATCH "0")
+        endif()
+    endif()
+    unset(_PYTHON_VERSION_RESULT)
+    unset(_VERSION)
+endif()
+
+include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(PythonInterp REQUIRED_VARS PYTHON_EXECUTABLE VERSION_VAR PYTHON_VERSION_STRING)
+
+mark_as_advanced(PYTHON_EXECUTABLE)
diff --git a/cmake/modules/FindPythonLibs.cmake b/cmake/modules/FindPythonLibs.cmake
new file mode 100644
index 0000000..3ac1ce2
--- /dev/null
+++ b/cmake/modules/FindPythonLibs.cmake
@@ -0,0 +1,354 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#.rst:
+# FindPythonLibs
+# --------------
+#
+# Find python libraries
+#
+# .. deprecated:: 3.12
+#
+#   Use :module:`FindPython3`, :module:`FindPython2` or :module:`FindPython` instead.
+#
+# This module finds if Python is installed and determines where the
+# include files and libraries are.  It also determines what the name of
+# the library is.  This code sets the following variables:
+#
+# ::
+#
+#   PYTHONLIBS_FOUND           - have the Python libs been found
+#   PYTHON_LIBRARIES           - path to the python library
+#   PYTHON_INCLUDE_PATH        - path to where Python.h is found (deprecated)
+#   PYTHON_INCLUDE_DIRS        - path to where Python.h is found
+#   PYTHON_DEBUG_LIBRARIES     - path to the debug library (deprecated)
+#   PYTHONLIBS_VERSION_STRING  - version of the Python libs found (since CMake 2.8.8)
+#
+#
+#
+# The Python_ADDITIONAL_VERSIONS variable can be used to specify a list
+# of version numbers that should be taken into account when searching
+# for Python.  You need to set this variable before calling
+# find_package(PythonLibs).
+#
+# If you'd like to specify the installation of Python to use, you should
+# modify the following cache variables:
+#
+# ::
+#
+#   PYTHON_LIBRARY             - path to the python library
+#   PYTHON_INCLUDE_DIR         - path to where Python.h is found
+#
+# If calling both ``find_package(PythonInterp)`` and
+# ``find_package(PythonLibs)``, call ``find_package(PythonInterp)`` first to
+# get the currently active Python version by default with a consistent version
+# of PYTHON_LIBRARIES.
+
+# Use the executable's path as a hint
+set(_Python_LIBRARY_PATH_HINT)
+if(IS_ABSOLUTE "${PYTHON_EXECUTABLE}")
+  if(WIN32)
+    get_filename_component(_Python_PREFIX "${PYTHON_EXECUTABLE}" PATH)
+    if(_Python_PREFIX)
+      set(_Python_LIBRARY_PATH_HINT ${_Python_PREFIX}/libs)
+    endif()
+    unset(_Python_PREFIX)
+  else()
+    get_filename_component(_Python_PREFIX "${PYTHON_EXECUTABLE}" PATH)
+    get_filename_component(_Python_PREFIX "${_Python_PREFIX}" PATH)
+    if(_Python_PREFIX)
+      set(_Python_LIBRARY_PATH_HINT ${_Python_PREFIX}/lib)
+    endif()
+    unset(_Python_PREFIX)
+  endif()
+endif()
+
+include(${CMAKE_CURRENT_LIST_DIR}/CMakeFindFrameworks.cmake)
+# Search for the python framework on Apple.
+CMAKE_FIND_FRAMEWORKS(Python)
+
+# Save CMAKE_FIND_FRAMEWORK
+if(DEFINED CMAKE_FIND_FRAMEWORK)
+  set(_PythonLibs_CMAKE_FIND_FRAMEWORK ${CMAKE_FIND_FRAMEWORK})
+else()
+  unset(_PythonLibs_CMAKE_FIND_FRAMEWORK)
+endif()
+# To avoid picking up the system Python.h pre-maturely.
+set(CMAKE_FIND_FRAMEWORK LAST)
+
+set(_PYTHON1_VERSIONS 1.6 1.5)
+set(_PYTHON2_VERSIONS 2.7 2.6 2.5 2.4 2.3 2.2 2.1 2.0)
+set(_PYTHON3_VERSIONS 3.8 3.7 3.6 3.5 3.4 3.3 3.2 3.1 3.0)
+
+if(PythonLibs_FIND_VERSION)
+    if(PythonLibs_FIND_VERSION_COUNT GREATER 1)
+        set(_PYTHON_FIND_MAJ_MIN "${PythonLibs_FIND_VERSION_MAJOR}.${PythonLibs_FIND_VERSION_MINOR}")
+        unset(_PYTHON_FIND_OTHER_VERSIONS)
+        if(PythonLibs_FIND_VERSION_EXACT)
+            if(_PYTHON_FIND_MAJ_MIN STREQUAL PythonLibs_FIND_VERSION)
+                set(_PYTHON_FIND_OTHER_VERSIONS "${PythonLibs_FIND_VERSION}")
+            else()
+                set(_PYTHON_FIND_OTHER_VERSIONS "${PythonLibs_FIND_VERSION}" "${_PYTHON_FIND_MAJ_MIN}")
+            endif()
+        else()
+            foreach(_PYTHON_V ${_PYTHON${PythonLibs_FIND_VERSION_MAJOR}_VERSIONS})
+                if(NOT _PYTHON_V VERSION_LESS _PYTHON_FIND_MAJ_MIN)
+                    list(APPEND _PYTHON_FIND_OTHER_VERSIONS ${_PYTHON_V})
+                endif()
+             endforeach()
+        endif()
+        unset(_PYTHON_FIND_MAJ_MIN)
+    else()
+        set(_PYTHON_FIND_OTHER_VERSIONS ${_PYTHON${PythonLibs_FIND_VERSION_MAJOR}_VERSIONS})
+    endif()
+else()
+    set(_PYTHON_FIND_OTHER_VERSIONS ${_PYTHON3_VERSIONS} ${_PYTHON2_VERSIONS} ${_PYTHON1_VERSIONS})
+endif()
+
+# Set up the versions we know about, in the order we will search. Always add
+# the user supplied additional versions to the front.
+# If FindPythonInterp has already found the major and minor version,
+# insert that version between the user supplied versions and the stock
+# version list.
+set(_Python_VERSIONS ${Python_ADDITIONAL_VERSIONS})
+if(DEFINED PYTHON_VERSION_MAJOR AND DEFINED PYTHON_VERSION_MINOR)
+  list(APPEND _Python_VERSIONS ${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR})
+endif()
+list(APPEND _Python_VERSIONS ${_PYTHON_FIND_OTHER_VERSIONS})
+
+unset(_PYTHON_FIND_OTHER_VERSIONS)
+unset(_PYTHON1_VERSIONS)
+unset(_PYTHON2_VERSIONS)
+unset(_PYTHON3_VERSIONS)
+
+foreach(_CURRENT_VERSION ${_Python_VERSIONS})
+  string(REPLACE "." "" _CURRENT_VERSION_NO_DOTS ${_CURRENT_VERSION})
+  if(WIN32)
+    find_library(PYTHON_DEBUG_LIBRARY
+      NAMES python${_CURRENT_VERSION_NO_DOTS}_d python
+      NAMES_PER_DIR
+      HINTS ${_Python_LIBRARY_PATH_HINT}
+      PATHS
+      [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/libs/Debug
+      [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/libs/Debug
+      [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/libs
+      [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/libs
+      )
+  endif()
+
+  set(PYTHON_FRAMEWORK_LIBRARIES)
+  if(Python_FRAMEWORKS AND NOT PYTHON_LIBRARY)
+    foreach(dir ${Python_FRAMEWORKS})
+      list(APPEND PYTHON_FRAMEWORK_LIBRARIES
+           ${dir}/Versions/${_CURRENT_VERSION}/lib)
+    endforeach()
+  endif()
+  find_library(PYTHON_LIBRARY
+    NAMES
+      python${_CURRENT_VERSION_NO_DOTS}
+      python${_CURRENT_VERSION}mu
+      python${_CURRENT_VERSION}m
+      python${_CURRENT_VERSION}u
+      python${_CURRENT_VERSION}
+    NAMES_PER_DIR
+    HINTS
+      ${_Python_LIBRARY_PATH_HINT}
+    PATHS
+      ${PYTHON_FRAMEWORK_LIBRARIES}
+      [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/libs
+      [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/libs
+  )
+  # Look for the static library in the Python config directory
+  find_library(PYTHON_LIBRARY
+    NAMES python${_CURRENT_VERSION_NO_DOTS} python${_CURRENT_VERSION}
+    NAMES_PER_DIR
+    # This is where the static library is usually located
+    PATH_SUFFIXES python${_CURRENT_VERSION}/config
+  )
+
+  # Don't search for include dir until library location is known
+  if(PYTHON_LIBRARY)
+
+    # Use the library's install prefix as a hint
+    set(_Python_INCLUDE_PATH_HINT)
+    # PYTHON_LIBRARY may contain a list because of SelectLibraryConfigurations
+    # which may have been run previously. If it is the case, the list can be:
+    #   optimized;<FILEPATH_TO_RELEASE_LIBRARY>;debug;<FILEPATH_TO_DEBUG_LIBRARY>
+    foreach(lib ${PYTHON_LIBRARY} ${PYTHON_DEBUG_LIBRARY})
+      if(IS_ABSOLUTE "${lib}")
+        get_filename_component(_Python_PREFIX "${lib}" PATH)
+        get_filename_component(_Python_PREFIX "${_Python_PREFIX}" PATH)
+        if(_Python_PREFIX)
+          list(APPEND _Python_INCLUDE_PATH_HINT ${_Python_PREFIX}/include)
+        endif()
+        unset(_Python_PREFIX)
+      endif()
+    endforeach()
+
+    # Add framework directories to the search paths
+    set(PYTHON_FRAMEWORK_INCLUDES)
+    if(Python_FRAMEWORKS AND NOT PYTHON_INCLUDE_DIR)
+      foreach(dir ${Python_FRAMEWORKS})
+        list(APPEND PYTHON_FRAMEWORK_INCLUDES
+          ${dir}/Versions/${_CURRENT_VERSION}/include)
+      endforeach()
+    endif()
+
+    find_path(PYTHON_INCLUDE_DIR
+      NAMES Python.h
+      HINTS
+        ${_Python_INCLUDE_PATH_HINT}
+      PATHS
+        ${PYTHON_FRAMEWORK_INCLUDES}
+        [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/include
+        [HKEY_CURRENT_USER\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/include
+      PATH_SUFFIXES
+        python${_CURRENT_VERSION}mu
+        python${_CURRENT_VERSION}m
+        python${_CURRENT_VERSION}u
+        python${_CURRENT_VERSION}
+    )
+  endif()
+
+  # For backward compatibility, set PYTHON_INCLUDE_PATH.
+  set(PYTHON_INCLUDE_PATH "${PYTHON_INCLUDE_DIR}")
+
+  if(PYTHON_INCLUDE_DIR AND EXISTS "${PYTHON_INCLUDE_DIR}/patchlevel.h")
+    file(STRINGS "${PYTHON_INCLUDE_DIR}/patchlevel.h" python_version_str
+         REGEX "^#define[ \t]+PY_VERSION[ \t]+\"[^\"]+\"")
+    string(REGEX REPLACE "^#define[ \t]+PY_VERSION[ \t]+\"([^\"]+)\".*" "\\1"
+                         PYTHONLIBS_VERSION_STRING "${python_version_str}")
+    unset(python_version_str)
+  endif()
+
+  if(PYTHON_LIBRARY AND PYTHON_INCLUDE_DIR)
+    break()
+  endif()
+endforeach()
+
+unset(_Python_INCLUDE_PATH_HINT)
+unset(_Python_LIBRARY_PATH_HINT)
+
+mark_as_advanced(
+  PYTHON_DEBUG_LIBRARY
+  PYTHON_LIBRARY
+  PYTHON_INCLUDE_DIR
+)
+
+# We use PYTHON_INCLUDE_DIR, PYTHON_LIBRARY and PYTHON_DEBUG_LIBRARY for the
+# cache entries because they are meant to specify the location of a single
+# library. We now set the variables listed by the documentation for this
+# module.
+set(PYTHON_INCLUDE_DIRS "${PYTHON_INCLUDE_DIR}")
+set(PYTHON_DEBUG_LIBRARIES "${PYTHON_DEBUG_LIBRARY}")
+
+# These variables have been historically named in this module different from
+# what SELECT_LIBRARY_CONFIGURATIONS() expects.
+set(PYTHON_LIBRARY_DEBUG "${PYTHON_DEBUG_LIBRARY}")
+set(PYTHON_LIBRARY_RELEASE "${PYTHON_LIBRARY}")
+include(${CMAKE_CURRENT_LIST_DIR}/SelectLibraryConfigurations.cmake)
+SELECT_LIBRARY_CONFIGURATIONS(PYTHON)
+# SELECT_LIBRARY_CONFIGURATIONS() sets ${PREFIX}_FOUND if it has a library.
+# Unset this, this prefix doesn't match the module prefix, they are different
+# for historical reasons.
+unset(PYTHON_FOUND)
+
+# Restore CMAKE_FIND_FRAMEWORK
+if(DEFINED _PythonLibs_CMAKE_FIND_FRAMEWORK)
+  set(CMAKE_FIND_FRAMEWORK ${_PythonLibs_CMAKE_FIND_FRAMEWORK})
+  unset(_PythonLibs_CMAKE_FIND_FRAMEWORK)
+else()
+  unset(CMAKE_FIND_FRAMEWORK)
+endif()
+
+include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(PythonLibs
+                                  REQUIRED_VARS PYTHON_LIBRARIES PYTHON_INCLUDE_DIRS
+                                  VERSION_VAR PYTHONLIBS_VERSION_STRING)
+
+# PYTHON_ADD_MODULE(<name> src1 src2 ... srcN) is used to build modules for python.
+# PYTHON_WRITE_MODULES_HEADER(<filename>) writes a header file you can include
+# in your sources to initialize the static python modules
+function(PYTHON_ADD_MODULE _NAME )
+  get_property(_TARGET_SUPPORTS_SHARED_LIBS
+    GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS)
+  option(PYTHON_ENABLE_MODULE_${_NAME} "Add module ${_NAME}" TRUE)
+  option(PYTHON_MODULE_${_NAME}_BUILD_SHARED
+    "Add module ${_NAME} shared" ${_TARGET_SUPPORTS_SHARED_LIBS})
+
+  # Mark these options as advanced
+  mark_as_advanced(PYTHON_ENABLE_MODULE_${_NAME}
+    PYTHON_MODULE_${_NAME}_BUILD_SHARED)
+
+  if(PYTHON_ENABLE_MODULE_${_NAME})
+    if(PYTHON_MODULE_${_NAME}_BUILD_SHARED)
+      set(PY_MODULE_TYPE MODULE)
+    else()
+      set(PY_MODULE_TYPE STATIC)
+      set_property(GLOBAL  APPEND  PROPERTY  PY_STATIC_MODULES_LIST ${_NAME})
+    endif()
+
+    set_property(GLOBAL  APPEND  PROPERTY  PY_MODULES_LIST ${_NAME})
+    add_library(${_NAME} ${PY_MODULE_TYPE} ${ARGN})
+#    target_link_libraries(${_NAME} ${PYTHON_LIBRARIES})
+
+    if(PYTHON_MODULE_${_NAME}_BUILD_SHARED)
+      set_target_properties(${_NAME} PROPERTIES PREFIX "${PYTHON_MODULE_PREFIX}")
+      if(WIN32 AND NOT CYGWIN)
+        set_target_properties(${_NAME} PROPERTIES SUFFIX ".pyd")
+      endif()
+    endif()
+
+  endif()
+endfunction()
+
+function(PYTHON_WRITE_MODULES_HEADER _filename)
+
+  get_property(PY_STATIC_MODULES_LIST  GLOBAL  PROPERTY PY_STATIC_MODULES_LIST)
+
+  get_filename_component(_name "${_filename}" NAME)
+  string(REPLACE "." "_" _name "${_name}")
+  string(TOUPPER ${_name} _nameUpper)
+  set(_filename ${CMAKE_CURRENT_BINARY_DIR}/${_filename})
+
+  set(_filenameTmp "${_filename}.in")
+  file(WRITE ${_filenameTmp} "/*Created by cmake, do not edit, changes will be lost*/\n")
+  file(APPEND ${_filenameTmp}
+"#ifndef ${_nameUpper}
+#define ${_nameUpper}
+
+#include <Python.h>
+
+#ifdef __cplusplus
+extern \"C\" {
+#endif /* __cplusplus */
+
+")
+
+  foreach(_currentModule ${PY_STATIC_MODULES_LIST})
+    file(APPEND ${_filenameTmp} "extern void init${PYTHON_MODULE_PREFIX}${_currentModule}(void);\n\n")
+  endforeach()
+
+  file(APPEND ${_filenameTmp}
+"#ifdef __cplusplus
+}
+#endif /* __cplusplus */
+
+")
+
+
+  foreach(_currentModule ${PY_STATIC_MODULES_LIST})
+    file(APPEND ${_filenameTmp} "int ${_name}_${_currentModule}(void) \n{\n  static char name[]=\"${PYTHON_MODULE_PREFIX}${_currentModule}\"; return PyImport_AppendInittab(name, init${PYTHON_MODULE_PREFIX}${_currentModule});\n}\n\n")
+  endforeach()
+
+  file(APPEND ${_filenameTmp} "void ${_name}_LoadAllPythonModules(void)\n{\n")
+  foreach(_currentModule ${PY_STATIC_MODULES_LIST})
+    file(APPEND ${_filenameTmp} "  ${_name}_${_currentModule}();\n")
+  endforeach()
+  file(APPEND ${_filenameTmp} "}\n\n")
+  file(APPEND ${_filenameTmp} "#ifndef EXCLUDE_LOAD_ALL_FUNCTION\nvoid CMakeLoadAllPythonModules(void)\n{\n  ${_name}_LoadAllPythonModules();\n}\n#endif\n\n#endif\n")
+
+# with configure_file() cmake complains that you may not use a file created using file(WRITE) as input file for configure_file()
+  execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different "${_filenameTmp}" "${_filename}" OUTPUT_QUIET ERROR_QUIET)
+
+endfunction()
diff --git a/cmake/modules/SelectLibraryConfigurations.cmake b/cmake/modules/SelectLibraryConfigurations.cmake
new file mode 100644
index 0000000..fe3bb00
--- /dev/null
+++ b/cmake/modules/SelectLibraryConfigurations.cmake
@@ -0,0 +1,71 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#.rst:
+# SelectLibraryConfigurations
+# ---------------------------
+#
+#
+#
+# select_library_configurations( basename )
+#
+# This macro takes a library base name as an argument, and will choose
+# good values for basename_LIBRARY, basename_LIBRARIES,
+# basename_LIBRARY_DEBUG, and basename_LIBRARY_RELEASE depending on what
+# has been found and set.  If only basename_LIBRARY_RELEASE is defined,
+# basename_LIBRARY will be set to the release value, and
+# basename_LIBRARY_DEBUG will be set to basename_LIBRARY_DEBUG-NOTFOUND.
+# If only basename_LIBRARY_DEBUG is defined, then basename_LIBRARY will
+# take the debug value, and basename_LIBRARY_RELEASE will be set to
+# basename_LIBRARY_RELEASE-NOTFOUND.
+#
+# If the generator supports configuration types, then basename_LIBRARY
+# and basename_LIBRARIES will be set with debug and optimized flags
+# specifying the library to be used for the given configuration.  If no
+# build type has been set or the generator in use does not support
+# configuration types, then basename_LIBRARY and basename_LIBRARIES will
+# take only the release value, or the debug value if the release one is
+# not set.
+
+# This macro was adapted from the FindQt4 CMake module and is maintained by Will
+# Dicharry <wdicharry@stellarscience.com>.
+
+macro( select_library_configurations basename )
+    if(NOT ${basename}_LIBRARY_RELEASE)
+        set(${basename}_LIBRARY_RELEASE "${basename}_LIBRARY_RELEASE-NOTFOUND" CACHE FILEPATH "Path to a library.")
+    endif()
+    if(NOT ${basename}_LIBRARY_DEBUG)
+        set(${basename}_LIBRARY_DEBUG "${basename}_LIBRARY_DEBUG-NOTFOUND" CACHE FILEPATH "Path to a library.")
+    endif()
+
+    get_property(_isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
+    if( ${basename}_LIBRARY_DEBUG AND ${basename}_LIBRARY_RELEASE AND
+           NOT ${basename}_LIBRARY_DEBUG STREQUAL ${basename}_LIBRARY_RELEASE AND
+           ( _isMultiConfig OR CMAKE_BUILD_TYPE ) )
+        # if the generator is multi-config or if CMAKE_BUILD_TYPE is set for
+        # single-config generators, set optimized and debug libraries
+        set( ${basename}_LIBRARY "" )
+        foreach( _libname IN LISTS ${basename}_LIBRARY_RELEASE )
+            list( APPEND ${basename}_LIBRARY optimized "${_libname}" )
+        endforeach()
+        foreach( _libname IN LISTS ${basename}_LIBRARY_DEBUG )
+            list( APPEND ${basename}_LIBRARY debug "${_libname}" )
+        endforeach()
+    elseif( ${basename}_LIBRARY_RELEASE )
+        set( ${basename}_LIBRARY ${${basename}_LIBRARY_RELEASE} )
+    elseif( ${basename}_LIBRARY_DEBUG )
+        set( ${basename}_LIBRARY ${${basename}_LIBRARY_DEBUG} )
+    else()
+        set( ${basename}_LIBRARY "${basename}_LIBRARY-NOTFOUND")
+    endif()
+
+    set( ${basename}_LIBRARIES "${${basename}_LIBRARY}" )
+
+    if( ${basename}_LIBRARY )
+        set( ${basename}_FOUND TRUE )
+    endif()
+
+    mark_as_advanced( ${basename}_LIBRARY_RELEASE
+        ${basename}_LIBRARY_DEBUG
+    )
+endmacro()
diff --git a/cmake/run_omniidl.cmake b/cmake/run_omniidl.cmake
new file mode 100644
index 0000000..23a4ffa
--- /dev/null
+++ b/cmake/run_omniidl.cmake
@@ -0,0 +1,19 @@
+macro(RUN_OMNIIDL IDL_FILE OUTPUT_DIRECTORY INCLUDE_DIRECTORY OPTIONS OUTPUT_FILES)
+    file(MAKE_DIRECTORY ${OUTPUT_DIRECTORY})
+    get_filename_component(IDL_FILE_BASENAME ${IDL_FILE} NAME)
+    set(INTERNAL_OUTPUT_FILES ${OUTPUT_FILES})
+    set(INTERNAL_OPTIONS ${OPTIONS})
+    set(OUT_WITH_PATH)
+    foreach (arg IN LISTS INTERNAL_OUTPUT_FILES)
+        set(OUT_WITH_PATH ${OUT_WITH_PATH} ${OUTPUT_DIRECTORY}/${arg})
+    endforeach ()
+    ADD_CUSTOM_COMMAND(OUTPUT ${OUT_WITH_PATH}
+            COMMAND ${OMNIORB4_IDL_COMPILER} ${OMNIIDL_PLATFORM_FLAGS} -bcxx -p${OMNI_PYTHON_RESOURCES} -I${INCLUDE_DIRECTORY} ${INTERNAL_OPTIONS} -C${OUTPUT_DIRECTORY} ${IDL_FILE}
+            DEPENDS ${IDL_FILE} ${RUN_OMNIIDL_DEPS}
+            COMMENT "Processing ${IDL_FILE_BASENAME}..")
+
+    set(OUTPARAM "${ARGN}")
+    foreach (loop_var IN LISTS OUTPARAM)
+        set(${OUTPARAM} ${${OUTPARAM}} ${OUT_WITH_PATH})
+    endforeach ()
+endmacro(RUN_OMNIIDL)
\ No newline at end of file
diff --git a/cmake/timeofdayTimezone.c b/cmake/timeofdayTimezone.c
new file mode 100644
index 0000000..3a731c8
--- /dev/null
+++ b/cmake/timeofdayTimezone.c
@@ -0,0 +1,7 @@
+#include <sys/time.h>
+
+int main(int ac, char** av)
+{
+    struct timeval v;
+    gettimeofday(&v, 0);
+}
\ No newline at end of file
diff --git a/codegen.cmake b/codegen.cmake
new file mode 100755
index 0000000..f530f2d
--- /dev/null
+++ b/codegen.cmake
@@ -0,0 +1,74 @@
+if (${Python_VERSION_MAJOR} EQUAL 2)
+    set(PYTHONPATH "PYTHONPATH=\"${PROJECT_SOURCE_DIR}/src/tool/omniidl/python\"")
+    set(OMNI_PYTHON_RESOURCES ${PROJECT_SOURCE_DIR}/src/lib/omniORB/python)
+else ()
+    set(PYTHONPATH "PYTHONPATH=\"${PROJECT_SOURCE_DIR}/src/tool/omniidl/python3\"")
+    set(OMNI_PYTHON_RESOURCES ${PROJECT_SOURCE_DIR}/src/lib/omniORB/python3)
+endif ()
+
+set(PYTHONPATH_INSTALL "PYTHONPATH=\"\${PACKAGE_PREFIX_DIR}/${PYTHON_SITE}\"")
+set(OMNI_PYTHON_RESOURCES_INSTALL ${PYTHON_SITE})
+
+if (WIN32)
+    if (Python_ROOT_DIR)
+        set(PYTHONHOME "PYTHONHOME=${Python_ROOT_DIR}")
+    else ()
+        set(PYTHONHOME "PYTHONHOME=${Python_STDLIB}/..")
+    endif ()
+    set(Python_RUNTIME_LIBRARY_DIRS ${Python_RUNTIME_LIBRARY_DIRS} ${PROJECT_SOURCE_DIR})
+    set(PATH_ENV)
+    FOREACH (_PATH ${Python_RUNTIME_LIBRARY_DIRS})
+        set(PATH_ENV "${_PATH}$<SEMICOLON>${PATH_ENV}")
+    ENDFOREACH ()
+    set(PATH_ENV PATH=${PATH_ENV})
+    set(OMNIIDL_PLATFORM_FLAGS "-T")
+
+    set(OMNIORB4_IDL_COMPILER ${CMAKE_COMMAND} -E env ${PATH_ENV}${CMAKE_BINARY_DIR}/bin ${PYTHONHOME} ${PYTHONPATH} $<TARGET_FILE:omniidl>)
+    set(OMNIIDL_EXEC_INSTALL ${CMAKE_COMMAND} -E env ${PATH_ENV} ${PYTHONHOME} ${PYTHONPATH_INSTALL} $<TARGET_FILE:OmniORB::omniidl>)
+
+else ()
+    set(OMNIIDL_PLATFORM_FLAGS "")
+    set(OMNIORB4_IDL_COMPILER ${CMAKE_COMMAND} -E env ${PYTHONPATH} ${Python_EXECUTABLE} ${PROJECT_BINARY_DIR}/bin/omniidl)
+    set(OMNIIDL_EXEC_INSTALL ${CMAKE_COMMAND} -E env ${PYTHONPATH_INSTALL} ${Python_EXECUTABLE} \${PACKAGE_PREFIX_DIR}/bin/omniidl)
+
+endif ()
+
+set(RUN_OMNIIDL_DEPS omniidl omnicpp)
+
+include(cmake/run_omniidl.cmake)
+
+set(GEN_DIR ${PROJECT_BINARY_DIR}/generated/lib/omniORB/omniORB4/)
+set(IDL_DIR ${PROJECT_SOURCE_DIR}/idl/)
+set(SOURCE_FILES)
+
+RUN_OMNIIDL(${IDL_DIR}/Naming.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wba;-Wbdebug" "Naming.hh;NamingDynSK.cc;NamingSK.cc" SOURCE_FILES)
+RUN_OMNIIDL(${IDL_DIR}/corbaidl.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wbdebug;-Wba;-nf;-P;-WbF" "corbaidlSK.cc;corbaidlDynSK.cc;corbaidl_poa.hh;corbaidl_operators.hh;corbaidl_defs.hh" SOURCE_FILES)
+RUN_OMNIIDL(${IDL_DIR}/ir.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wbdebug;-Wba;-WbF" "ir_defs.hh;ir_operators.hh;ir_poa.hh;irDynSK.cc;irSK.cc" SOURCE_FILES)
+RUN_OMNIIDL(${IDL_DIR}/boxes.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wbdebug;-Wba;-nf;-P;-WbF" "boxes_defs.hh;boxes_operators.hh;boxes_poa.hh;boxesDynSK.cc;boxesSK.cc" SOURCE_FILES)
+RUN_OMNIIDL(${IDL_DIR}/pollable.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wbdebug;-Wba;-nf;-P;-WbF" "pollable_defs.hh;pollable_operators.hh;pollable_poa.hh;pollableDynSK.cc;pollableSK.cc" SOURCE_FILES)
+RUN_OMNIIDL(${IDL_DIR}/poa_enums.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wbdebug;-Wba;-nf;-P;-WbF" "poa_enums_defs.hh;poa_enums_operators.hh;poa_enums_poa.hh;poa_enumsDynSK.cc;poa_enumsSK.cc" SOURCE_FILES)
+RUN_OMNIIDL(${IDL_DIR}/omniTypedefs.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wbdebug" "omniTypedefs.hh;omniTypedefsSK.cc" SOURCE_FILES)
+RUN_OMNIIDL(${IDL_DIR}/bootstrap.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wbdebug;-Wba" "bootstrap.hh;bootstrapDynSK.cc;bootstrapSK.cc" SOURCE_FILES)
+RUN_OMNIIDL(${IDL_DIR}/omniConnectionData.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wbdebug" "omniConnectionData.hh;omniConnectionDataSK.cc" SOURCE_FILES)
+RUN_OMNIIDL(${IDL_DIR}/messaging.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wbdebug" "messaging.hh;messagingSK.cc" SOURCE_FILES)
+RUN_OMNIIDL(${IDL_DIR}/messaging_policy.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wbdebug" "messaging_policy.hh;messaging_policySK.cc" SOURCE_FILES)
+RUN_OMNIIDL(${IDL_DIR}/compression.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wbdebug;-Wba" "compression.hh;compressionDynSK.cc;compressionSK.cc" SOURCE_FILES)
+RUN_OMNIIDL(${IDL_DIR}/ziop.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wbdebug;-WbF;-Wba" "ziop_defs.hh;ziop_operators.hh;ziop_poa.hh;ziopDynSK.cc;ziopSK.cc" SOURCE_FILES)
+
+
+ADD_CUSTOM_COMMAND(OUTPUT ${GEN_DIR}/distdate.hh
+        COMMAND ${CMAKE_COMMAND} -E env ${PYTHONPATH} ${Python_EXECUTABLE} ${PROJECT_SOURCE_DIR}/bin/scripts/distdate.py < ${PROJECT_SOURCE_DIR}/update.log > ${GEN_DIR}/distdate.hh
+        DEPENDS ${PROJECT_SOURCE_DIR}/update.log omniidl omnicpp
+        COMMENT "Processing update.log..")
+
+
+ADD_CUSTOM_TARGET(RunGenerator DEPENDS
+        ${SOURCE_FILES}
+        ${GEN_DIR}/distdate.hh
+        COMMENT "Checking if re-generation is required for target omniORB4")
+
+
+INSTALL(DIRECTORY ${PROJECT_BINARY_DIR}/generated/lib/omniORB/
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+        FILES_MATCHING PATTERN "*.h*")
+
diff --git a/contrib/CMakeLists.txt b/contrib/CMakeLists.txt
new file mode 100644
index 0000000..f3d9d36
--- /dev/null
+++ b/contrib/CMakeLists.txt
@@ -0,0 +1,3 @@
+if (UNIX)
+    add_subdirectory(pkgconfig)
+endif ()
\ No newline at end of file
diff --git a/contrib/pkgconfig/CMakeLists.txt b/contrib/pkgconfig/CMakeLists.txt
new file mode 100644
index 0000000..57ee393
--- /dev/null
+++ b/contrib/pkgconfig/CMakeLists.txt
@@ -0,0 +1,28 @@
+set(prefix ${CMAKE_INSTALL_PREFIX})
+set(exec_prefix \${prefix})
+set(libdir \${exec_prefix}/lib)
+set(includedir \${prefix}/include)
+set(datadir \${prefix}/share)
+set(bindir \${exec_prefix}/bin)
+
+
+configure_file(omniConnectionMgmt4.pc.in ${CMAKE_CURRENT_BINARY_DIR}/omniConnectionMgmt4.pc @ONLY)
+configure_file(omniCOS4.pc.in ${CMAKE_CURRENT_BINARY_DIR}/omniCOS4.pc @ONLY)
+configure_file(omniCOSDynamic4.pc.in ${CMAKE_CURRENT_BINARY_DIR}/omniCOSDynamic4.pc @ONLY)
+configure_file(omniDynamic4.pc.in ${CMAKE_CURRENT_BINARY_DIR}/omniDynamic4.pc @ONLY)
+configure_file(omniORB4.pc.in ${CMAKE_CURRENT_BINARY_DIR}/omniORB4.pc @ONLY)
+configure_file(omnithread3.pc.in ${CMAKE_CURRENT_BINARY_DIR}/omnithread3.pc @ONLY)
+configure_file(omniZIOP4.pc.in ${CMAKE_CURRENT_BINARY_DIR}/omniZIOP4.pc @ONLY)
+configure_file(omniZIOPDynamic4.pc.in ${CMAKE_CURRENT_BINARY_DIR}/omniZIOPDynamic4.pc @ONLY)
+
+
+install(FILES
+        ${CMAKE_CURRENT_BINARY_DIR}/omniConnectionMgmt4.pc
+        ${CMAKE_CURRENT_BINARY_DIR}/omniCOS4.pc
+        ${CMAKE_CURRENT_BINARY_DIR}/omniCOSDynamic4.pc
+        ${CMAKE_CURRENT_BINARY_DIR}/omniDynamic4.pc
+        ${CMAKE_CURRENT_BINARY_DIR}/omniORB4.pc
+        ${CMAKE_CURRENT_BINARY_DIR}/omnithread3.pc
+        ${CMAKE_CURRENT_BINARY_DIR}/omniZIOP4.pc
+        ${CMAKE_CURRENT_BINARY_DIR}/omniZIOPDynamic4.pc
+        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
\ No newline at end of file
diff --git a/include/.gitignore b/include/.gitignore
new file mode 100644
index 0000000..57da632
--- /dev/null
+++ b/include/.gitignore
@@ -0,0 +1 @@
+/omniconfig.h
diff --git a/include/omniORB4/.gitignore b/include/omniORB4/.gitignore
new file mode 100644
index 0000000..582b538
--- /dev/null
+++ b/include/omniORB4/.gitignore
@@ -0,0 +1 @@
+/acconfig.h
diff --git a/include/omniORB4/CORBA.h b/include/omniORB4/CORBA.h
index 3077b84..b778c71 100644
--- a/include/omniORB4/CORBA.h
+++ b/include/omniORB4/CORBA.h
@@ -45,12 +45,16 @@
 # error "_OMNIORB_LIBRARY and _OMNIORB_DYNAMIC_LIBRARY are both defined."
 #endif
 
+#ifndef _MSC_VER
+#define _OMNIORB_NTDLL_EXPORT
+#endif
+
 #if    defined(_OMNIORB_LIBRARY)
-#         define _core_attr
+#         define _core_attr _OMNIORB_NTDLL_EXPORT
 #         define _dyn_attr  _OMNIORB_NTDLL_IMPORT
 #elif  defined(_OMNIORB_DYNAMIC_LIBRARY)
 #         define _core_attr _OMNIORB_NTDLL_IMPORT
-#         define _dyn_attr
+#         define _dyn_attr _OMNIORB_NTDLL_EXPORT
 #else
 #         define _core_attr _OMNIORB_NTDLL_IMPORT
 #         define _dyn_attr  _OMNIORB_NTDLL_IMPORT
diff --git a/include/omniORB4/CORBA_sysdep.h b/include/omniORB4/CORBA_sysdep.h
index 03eb733..5469f81 100644
--- a/include/omniORB4/CORBA_sysdep.h
+++ b/include/omniORB4/CORBA_sysdep.h
@@ -65,6 +65,9 @@ typedef unsigned long omni_ptr_arith_t;
 #elif SIZEOF_PTR == SIZEOF_INT
 typedef unsigned int omni_ptr_arith_t;
 #elif defined (_WIN64)
+#ifdef HAVE_INTTYPES_H
+#include <inttypes.h>
+#endif
 typedef size_t omni_ptr_arith_t;
 #else
 #error "No suitable type to do pointer arithmetic"
@@ -232,8 +235,10 @@ typedef size_t omni_ptr_arith_t;
 
 #  ifdef _WINSTATIC
 #    define _OMNIORB_NTDLL_IMPORT
+#    define _OMNIORB_NTDLL_EXPORT
 #  else
 #    define _OMNIORB_NTDLL_IMPORT  __declspec(dllimport)
+#    define _OMNIORB_NTDLL_EXPORT  __declspec(dllexport)
 #  endif
 
 #  if defined(_DEBUG)
diff --git a/include/omniORB4/acconfig_cmake.h.in b/include/omniORB4/acconfig_cmake.h.in
new file mode 100644
index 0000000..4d9b19b
--- /dev/null
+++ b/include/omniORB4/acconfig_cmake.h.in
@@ -0,0 +1,342 @@
+#pragma once
+#ifndef HAVE_ALLOCA_H
+#cmakedefine HAVE_ALLOCA_H 1
+#endif
+
+#ifndef HAVE_ALLOCA
+#cmakedefine HAVE_ALLOCA 1
+#endif
+
+#ifndef HAVE_ACCESS
+#cmakedefine HAVE_ACCESS 1
+#endif
+
+#ifndef HAVE_BOOL
+#cmakedefine HAVE_BOOL 1
+#endif
+
+#ifndef HAVE_CATCH_BY_BASE
+#cmakedefine HAVE_CATCH_BY_BASE 1
+#endif
+
+#ifndef HAVE_CONST_CAST
+#cmakedefine HAVE_CONST_CAST 1
+#endif
+
+#ifndef HAVE_DYNAMIC_CAST
+#cmakedefine HAVE_DYNAMIC_CAST 1
+#endif
+
+#ifndef HAVE_REINTERPRET_CAST
+#cmakedefine HAVE_REINTERPRET_CAST 1
+#endif
+
+#ifndef HAVE_MEMBER_CONSTANTS
+#cmakedefine HAVE_MEMBER_CONSTANTS 1
+#endif
+
+#ifndef HAVE_NAMESPACES
+#cmakedefine HAVE_NAMESPACES 1
+#endif
+
+#ifndef HAVE_EXCEPTIONS
+#cmakedefine HAVE_EXCEPTIONS 1
+#endif
+
+#ifndef HAVE_STD
+#cmakedefine HAVE_STD 1
+#endif
+
+#ifndef HAVE_STDIO_H
+#cmakedefine HAVE_STDIO_H 1
+#endif
+
+#ifndef HAVE_SIG_IGN
+#cmakedefine HAVE_SIG_IGN 1
+#endif
+
+#ifndef HAVE_STRUCT_LIFCONF
+#cmakedefine HAVE_STRUCT_LIFCONF 1
+#endif
+
+#ifndef HAVE_STRUCT_LIFCONF
+#cmakedefine HAVE_STRUCT_LIFCONF 1
+#endif
+
+#ifndef HAVE_STRUCT_SOCKADDR_IN6
+#cmakedefine HAVE_STRUCT_SOCKADDR_IN6 1
+#endif
+
+#ifndef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN
+#cmakedefine HAVE_STRUCT_SOCKADDR_IN_SIN_LEN 1
+#endif
+
+#ifndef HAVE_STRUCT_SOCKADDR_IN_SIN_ZERO
+#cmakedefine HAVE_STRUCT_SOCKADDR_IN_SIN_ZERO 1
+#endif
+
+#ifndef HAVE_STRUCT_SOCKADDR_STORAGE
+#cmakedefine HAVE_STRUCT_SOCKADDR_STORAGE 1
+#endif
+
+#ifndef OMNI_SOCKNAME_SIZE_T
+#cmakedefine OMNI_SOCKNAME_SIZE_T @OMNI_SOCKNAME_SIZE_T@
+#endif
+
+
+#ifndef HAVE_ERRNO_H
+#cmakedefine HAVE_ERRNO_H @HAVE_ERRNO_H@
+#endif
+
+#ifndef HAVE_FCNTL_H
+#cmakedefine HAVE_FCNTL_H @HAVE_FCNTL_H@
+#endif
+
+#ifndef HAVE_GETADDRINFO
+#cmakedefine HAVE_GETADDRINFO @HAVE_GETADDRINFO@
+#endif
+
+#ifndef HAVE_GETHOSTNAME
+#cmakedefine HAVE_GETHOSTNAME @HAVE_GETHOSTNAME@
+#endif
+
+#ifndef HAVE_GETNAMEINFO
+#cmakedefine HAVE_GETNAMEINFO @HAVE_GETNAMEINFO@
+#endif
+
+#ifndef HAVE_GETOPT
+#cmakedefine HAVE_GETOPT @HAVE_GETOPT@
+#endif
+
+#ifndef HAVE_GETTIMEOFDAY
+#cmakedefine HAVE_GETTIMEOFDAY @HAVE_GETTIMEOFDAY@
+#endif
+
+#ifndef GETTIMEOFDAY_TIMEZONE
+#cmakedefine GETTIMEOFDAY_TIMEZONE 1
+#endif
+
+#ifndef HAVE_IFADDRS_H
+#cmakedefine HAVE_IFADDRS_H @HAVE_IFADDRS_H@
+#endif
+
+#ifndef HAVE_INET_NTOP
+#cmakedefine HAVE_INET_NTOP @HAVE_INET_NTOP@
+#endif
+
+#ifndef HAVE_INSINFF
+#cmakedefine HAVE_INSINFF @HAVE_INSINFF@
+#endif
+
+#ifndef HAVE_INTTYPES_H
+#cmakedefine HAVE_INTTYPES_H @HAVE_INTTYPES_H@
+#endif
+
+#ifndef HAVE_ISINF
+#cmakedefine HAVE_ISINF @HAVE_ISINF@
+#endif
+
+#ifndef HAVE_ISINFL
+#cmakedefine HAVE_ISINFL @HAVE_ISINFL@
+#endif
+
+#ifndef HAVE_ISNANORINF
+#cmakedefine HAVE_ISNANORINF @HAVE_ISNANORINF@
+#endif
+
+#ifndef HAVE_LOCALTIME
+#cmakedefine HAVE_LOCALTIME @HAVE_LOCALTIME@
+#endif
+
+#ifndef HAVE_MEMORY_H
+#cmakedefine HAVE_MEMORY_H @HAVE_MEMORY_H@
+#endif
+
+#ifndef HAVE_NANOSLEEP
+#cmakedefine HAVE_NANOSLEEP @HAVE_NANOSLEEP@
+#endif
+
+#ifndef HAVE_NAN_H
+#cmakedefine HAVE_NAN_H @HAVE_NAN_H@
+#endif
+
+#ifndef HAVE_NETDB_H
+#cmakedefine HAVE_NETDB_H @HAVE_NETDB_H@
+#endif
+
+#ifndef HAVE_POLL
+#cmakedefine HAVE_POLL @HAVE_POLL@
+#endif
+
+#ifndef HAVE_RAND_R
+#cmakedefine HAVE_RAND_R @HAVE_RAND_R@
+#endif
+
+#ifndef HAVE_SIGACTION
+#cmakedefine HAVE_SIGACTION @HAVE_SIGACTION@
+#endif
+
+#ifndef HAVE_SIGNAL_H
+#cmakedefine HAVE_SIGNAL_H @HAVE_SIGNAL_H@
+#endif
+
+#ifndef HAVE_SIGVEC
+#cmakedefine HAVE_SIGVEC @HAVE_SIGVEC@
+#endif
+
+#ifndef HAVE_SNPRINTF
+#cmakedefine HAVE_SNPRINTF @HAVE_SNPRINTF@
+#endif
+
+#ifndef HAVE_STDINT_H
+#cmakedefine HAVE_STDINT_H @HAVE_STDINT_H@
+#endif
+
+#ifndef HAVE_STDLIB_H
+#cmakedefine HAVE_STDLIB_H @HAVE_STDLIB_H@
+#endif
+
+#ifndef HAVE_STRCASECMP
+#cmakedefine HAVE_STRCASECMP @HAVE_STRCASECMP@
+#endif
+
+#ifndef HAVE_STRDUP
+#cmakedefine HAVE_STRDUP @HAVE_STRDUP@
+#endif
+
+#ifndef HAVE_STRERROR
+#cmakedefine HAVE_STRERROR @HAVE_STRERROR@
+#endif
+
+#ifndef HAVE_STRFTIME
+#cmakedefine HAVE_STRFTIME @HAVE_STRFTIME@
+#endif
+
+#ifndef HAVE_STRICMP
+#cmakedefine HAVE_STRICMP @HAVE_STRICMP@
+#endif
+
+#ifndef HAVE_STRINGS_H
+#cmakedefine HAVE_STRINGS_H @HAVE_STRINGS_H@
+#endif
+
+#ifndef HAVE_STRING_H
+#cmakedefine HAVE_STRING_H @HAVE_STRING_H@
+#endif
+
+#ifndef HAVE_STRNCASECMP
+#cmakedefine HAVE_STRNCASECMP @HAVE_STRNCASECMP@
+#endif
+
+#ifndef HAVE_STRTOUL
+#cmakedefine HAVE_STRTOUL @HAVE_STRTOUL@
+#endif
+
+#ifndef HAVE_STRTOULL
+#cmakedefine HAVE_STRTOULL @HAVE_STRTOULL@
+#endif
+
+#ifndef HAVE_STRTOUQ
+#cmakedefine HAVE_STRTOUQ @HAVE_STRTOUQ@
+#endif
+
+#ifndef HAVE_SYS_IF_H
+#cmakedefine HAVE_SYS_IF_H @HAVE_SYS_IF_H@
+#endif
+
+#ifndef HAVE_SYS_IOCTL_H
+#cmakedefine HAVE_SYS_IOCTL_H @HAVE_SYS_IOCTL_H@
+#endif
+
+#ifndef HAVE_SYS_PARAM_H
+#cmakedefine HAVE_SYS_PARAM_H @HAVE_SYS_PARAM_H@
+#endif
+
+#ifndef HAVE_SYS_POLL_H
+#cmakedefine HAVE_SYS_POLL_H @HAVE_SYS_POLL_H@
+#endif
+
+#ifndef HAVE_SYS_STAT_H
+#cmakedefine HAVE_SYS_STAT_H @HAVE_SYS_STAT_H@
+#endif
+
+#ifndef HAVE_SYS_TIME_H
+#cmakedefine HAVE_SYS_TIME_H @HAVE_SYS_TIME_H@
+#endif
+
+#ifndef HAVE_SYS_TYPES_H
+#cmakedefine HAVE_SYS_TYPES_H @HAVE_SYS_TYPES_H@
+#endif
+
+#ifndef HAVE_SYS_TYPES_H
+#cmakedefine HAVE_SYS_TYPES_H @HAVE_SYS_TYPES_H@
+#endif
+
+#ifndef HAVE_UNAME
+#cmakedefine HAVE_UNAME @HAVE_UNAME@
+#endif
+
+#ifndef HAVE_UNISTD_H
+#cmakedefine HAVE_UNISTD_H @HAVE_UNISTD_H@
+#endif
+
+#ifndef HAVE_VPRINTF
+#cmakedefine HAVE_VPRINTF @HAVE_VPRINTF@
+#endif
+
+#ifndef HAVE_VSNPRINTF
+#cmakedefine HAVE_VSNPRINTF @HAVE_VSNPRINTF@
+#endif
+
+#ifndef STACK_DIRECTION
+#cmakedefine STACK_DIRECTION @STACK_DIRECTION@
+#endif
+
+
+#cmakedefine SIZEOF_WCHAR_T @SIZEOF_WCHAR_T@
+
+#cmakedefine SIZEOF_BOOL @SIZEOF_BOOL@
+#cmakedefine SIZEOF_CHAR @SIZEOF_CHAR@
+#cmakedefine SIZEOF_DOUBLE @SIZEOF_DOUBLE@
+#cmakedefine SIZEOF_FLOAT @SIZEOF_FLOAT@
+#cmakedefine SIZEOF_INT @SIZEOF_INT@
+#cmakedefine SIZEOF_LONG @SIZEOF_LONG@
+#cmakedefine SIZEOF_LONG_DOUBLE @SIZEOF_LONG_DOUBLE@
+#cmakedefine SIZEOF_LONG_LONG @SIZEOF_LONG_LONG@
+#cmakedefine SIZEOF_SHORT @SIZEOF_SHORT@
+#cmakedefine SIZEOF_UNSIGNED_CHAR @SIZEOF_UNSIGNED_CHAR@
+#cmakedefine SIZEOF_VOIDP @SIZEOF_VOIDP@
+
+
+#ifndef STDC_HEADERS
+#cmakedefine STDC_HEADERS @STDC_HEADERS@
+#endif
+
+#cmakedefine WORDS_BIGENDIAN @WORDS_BIGENDIAN@
+
+#ifndef OMNI_LONG_IS_INT
+#cmakedefine OMNI_LONG_IS_INT @OMNI_LONG_IS_INT@
+#endif
+
+
+
+#ifndef OMNIORB_DISABLE_ALLOCA
+#cmakedefine OMNIORB_DISABLE_ALLOCA @OMNIORB_DISABLE_ALLOCA@
+#endif
+
+#ifndef OMNIORB_DISABLE_LONGDOUBLE
+#cmakedefine OMNIORB_DISABLE_LONGDOUBLE @OMNIORB_DISABLE_LONGDOUBLE@
+#endif
+
+#ifndef OMNIORB_ENABLE_LOCK_TRACES
+#cmakedefine OMNIORB_ENABLE_LOCK_TRACES @OMNIORB_ENABLE_LOCK_TRACES@
+#endif
+
+#ifndef OMNI_DISABLE_ATOMIC_OPS
+#cmakedefine OMNI_DISABLE_ATOMIC_OPS @OMNI_DISABLE_ATOMIC_OPS@
+#endif
+
+#ifndef OMNI_DISABLE_IPV6
+#cmakedefine OMNI_DISABLE_IPV6 @OMNI_DISABLE_IPV6@
+#endif
+
diff --git a/include/omniORB4/aconfig.h b/include/omniORB4/aconfig.h
new file mode 100644
index 0000000..f200272
--- /dev/null
+++ b/include/omniORB4/aconfig.h
@@ -0,0 +1,253 @@
+#pragma once
+#ifndef HAVE_ALLOCA_H
+#define HAVE_ALLOCA_H
+#endif
+
+#ifndef HAVE_ALLOCA
+/* #undef HAVE_ALLOCA */
+#endif
+
+#ifndef HAVE_ACCESS
+#define HAVE_ACCESS 1
+#endif
+
+#ifndef HAVE_STRUCT_LIFCONF
+/* #undef HAVE_STRUCT_LIFCONF */
+#endif
+
+#ifndef HAVE_STRUCT_SOCKADDR_IN6
+/* #undef HAVE_STRUCT_SOCKADDR_IN6 */
+#endif
+
+#ifndef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN
+/* #undef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */
+#endif
+
+#ifndef HAVE_STRUCT_SOCKADDR_IN_SIN_ZERO
+/* #undef HAVE_STRUCT_SOCKADDR_IN_SIN_ZERO */
+#endif
+
+#ifndef HAVE_STRUCT_SOCKADDR_STORAGE
+/* #undef HAVE_STRUCT_SOCKADDR_STORAGE */
+#endif
+
+#ifndef HAVE_ERRNO_H
+#define HAVE_ERRNO_H 1
+#endif
+
+#ifndef HAVE_FCNTL_H
+#define HAVE_FCNTL_H 1
+#endif
+
+#ifndef HAVE_GETADDRINFO
+#define HAVE_GETADDRINFO 1
+#endif
+
+#ifndef HAVE_GETHOSTNAME
+#define HAVE_GETHOSTNAME 1
+#endif
+
+#ifndef HAVE_GETNAMEINFO
+#define HAVE_GETNAMEINFO 1
+#endif
+
+#ifndef HAVE_GETOPT
+#define HAVE_GETOPT 1
+#endif
+
+#ifndef HAVE_GETTIMEOFDAY
+#define HAVE_GETTIMEOFDAY 1
+#endif
+
+#ifndef HAVE_IFADDRS_H
+#define HAVE_IFADDRS_H 1
+#endif
+
+#ifndef HAVE_INET_NTOP
+#define HAVE_INET_NTOP 1
+#endif
+
+#ifndef HAVE_INSINFF
+/* #undef HAVE_INSINFF */
+#endif
+
+#ifndef HAVE_INTTYPES_H
+#define HAVE_INTTYPES_H 1
+#endif
+
+#ifndef HAVE_ISINF
+#define HAVE_ISINF 1
+#endif
+
+#ifndef HAVE_ISINFL
+#define HAVE_ISINFL 1
+#endif
+
+#ifndef HAVE_ISNANORINF
+/* #undef HAVE_ISNANORINF */
+#endif
+
+#ifndef HAVE_LOCALTIME
+#define HAVE_LOCALTIME 1
+#endif
+
+#ifndef HAVE_MEMORY_H
+#define HAVE_MEMORY_H 1
+#endif
+
+#ifndef HAVE_NANOSLEEP
+#define HAVE_NANOSLEEP 1
+#endif
+
+#ifndef HAVE_NAN_H
+/* #undef HAVE_NAN_H */
+#endif
+
+#ifndef HAVE_NETDB_H
+#define HAVE_NETDB_H 1
+#endif
+
+#ifndef HAVE_POLL
+#define HAVE_POLL 1
+#endif
+
+#ifndef HAVE_RAND_R
+#define HAVE_RAND_R 1
+#endif
+
+#ifndef HAVE_SIGACTION
+#define HAVE_SIGACTION 1
+#endif
+
+#ifndef HAVE_SIGNAL_H
+#define HAVE_SIGNAL_H 1
+#endif
+
+#ifndef HAVE_SIGVEC
+/* #undef HAVE_SIGVEC */
+#endif
+
+#ifndef HAVE_SNPRINTF
+#define HAVE_SNPRINTF 1
+#endif
+
+#ifndef HAVE_STDINT_H
+#define HAVE_STDINT_H 1
+#endif
+
+#ifndef HAVE_STDLIB_H
+#define HAVE_STDLIB_H 1
+#endif
+
+#ifndef HAVE_STRCASECMP
+#define HAVE_STRCASECMP 1
+#endif
+
+#ifndef HAVE_STRDUP
+#define HAVE_STRDUP 1
+#endif
+
+#ifndef HAVE_STRERROR
+#define HAVE_STRERROR 1
+#endif
+
+#ifndef HAVE_STRFTIME
+#define HAVE_STRFTIME 1
+#endif
+
+#ifndef HAVE_STRICMP
+/* #undef HAVE_STRICMP */
+#endif
+
+#ifndef HAVE_STRINGS_H
+#define HAVE_STRINGS_H 1
+#endif
+
+#ifndef HAVE_STRING_H
+#define HAVE_STRING_H 1
+#endif
+
+#ifndef HAVE_STRNCASECMP
+#define HAVE_STRNCASECMP 1
+#endif
+
+#ifndef HAVE_STRTOUL
+#define HAVE_STRTOUL 1
+#endif
+
+#ifndef HAVE_STRTOULL
+#define HAVE_STRTOULL 1
+#endif
+
+#ifndef HAVE_STRTOUQ
+#define HAVE_STRTOUQ 1
+#endif
+
+#ifndef HAVE_SYS_IF_H
+/* #undef HAVE_SYS_IF_H */
+#endif
+
+#ifndef HAVE_SYS_IOCTL_H
+#define HAVE_SYS_IOCTL_H 1
+#endif
+
+#ifndef HAVE_SYS_PARAM_H
+#define HAVE_SYS_PARAM_H 1
+#endif
+
+#ifndef HAVE_SYS_POLL_H
+#define HAVE_SYS_POLL_H 1
+#endif
+
+#ifndef HAVE_SYS_STAT_H
+#define HAVE_SYS_STAT_H 1
+#endif
+
+#ifndef HAVE_SYS_TIME_H
+#define HAVE_SYS_TIME_H 1
+#endif
+
+#ifndef HAVE_SYS_TYPES_H
+#define HAVE_SYS_TYPES_H 1
+#endif
+
+#ifndef HAVE_SYS_TYPES_H
+#define HAVE_SYS_TYPES_H 1
+#endif
+
+#ifndef HAVE_UNAME
+#define HAVE_UNAME 1
+#endif
+
+#ifndef HAVE_UNISTD_H
+#define HAVE_UNISTD_H 1
+#endif
+
+#ifndef HAVE_VPRINTF
+#define HAVE_VPRINTF 1
+#endif
+
+#ifndef HAVE_VSNPRINTF
+#define HAVE_VSNPRINTF 1
+#endif
+
+
+#define SIZEOF_WCHAR_T 4
+/* #undef SIZEOF_BOOL */
+#define SIZEOF_CHAR 1
+#define SIZEOF_DOUBLE 8
+#define SIZEOF_FLOAT 4
+#define SIZEOF_INT 4
+#define SIZEOF_LONG 8
+#define SIZEOF_LONG_DOUBLE 16
+#define SIZEOF_LONG_LONG 8
+#define SIZEOF_SHORT 2
+#define SIZEOF_UNSIGNED_CHAR 1
+#define SIZEOF_VOIDP 8
+
+
+#ifndef STDC_HEADERS
+#define STDC_HEADERS
+#endif
+
+/* #undef WORDS_BIGENDIAN */
diff --git a/include/omniORB4/internal/codeSetUtil.h b/include/omniORB4/internal/codeSetUtil.h
index c4795a5..4c1019b 100644
--- a/include/omniORB4/internal/codeSetUtil.h
+++ b/include/omniORB4/internal/codeSetUtil.h
@@ -41,7 +41,7 @@
 #endif
 
 #if defined(_OMNIORB_LIBRARY)
-#     define _core_attr
+#     define _core_attr _OMNIORB_NTDLL_EXPORT
 #else
 #     define _core_attr _OMNIORB_NTDLL_IMPORT
 #endif
diff --git a/package_config.cmake b/package_config.cmake
new file mode 100644
index 0000000..eed76a1
--- /dev/null
+++ b/package_config.cmake
@@ -0,0 +1,27 @@
+
+set(INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR})
+set(LIB_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR})
+set(BIN_INSTALL_DIR ${CMAKE_INSTALL_BINDIR})
+set(SYSCONFIG_INSTALL_DIR ${CMAKE_INSTALL_SYSCONFDIR})
+set(OMNI_CMAKE_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}/)
+
+
+
+include(CMakePackageConfigHelpers)
+
+configure_package_config_file(cmake/OmniORBConfig.cmake.in ${PROJECT_BINARY_DIR}/OmniORBConfig.cmake
+        INSTALL_DESTINATION ${OMNI_CMAKE_INSTALL_DIR}
+        PATH_VARS INCLUDE_INSTALL_DIR SYSCONFIG_INSTALL_DIR)
+
+write_basic_package_version_file(${PROJECT_BINARY_DIR}/OmniORBConfigVersion.cmake
+        VERSION ${PROJECT_VERSION}
+        COMPATIBILITY SameMajorVersion)
+
+install(FILES ${CMAKE_SOURCE_DIR}/cmake/run_omniidl.cmake ${CMAKE_CURRENT_BINARY_DIR}/OmniORBConfig.cmake ${CMAKE_CURRENT_BINARY_DIR}/OmniORBConfigVersion.cmake
+        DESTINATION ${OMNI_CMAKE_INSTALL_DIR})
+
+
+install(EXPORT ${PROJECT_NAME}Targets
+        NAMESPACE "${PROJECT_NAME}::"
+        DESTINATION ${OMNI_CMAKE_INSTALL_DIR}
+        )
\ No newline at end of file
diff --git a/platform_checks.cmake b/platform_checks.cmake
new file mode 100644
index 0000000..a0686d4
--- /dev/null
+++ b/platform_checks.cmake
@@ -0,0 +1,263 @@
+if(${CMAKE_VERSION} VERSION_GREATER "3.12")
+    cmake_policy(SET CMP0075 NEW)
+endif()
+
+INCLUDE(CheckFunctionExists)
+INCLUDE(CheckIncludeFiles)
+INCLUDE(CheckTypeSize)
+INCLUDE(CheckPrototypeDefinition)
+INCLUDE(CheckSymbolExists)
+INCLUDE(TestForSTDNamespace)
+include(${CMAKE_SOURCE_DIR}/cmake/CheckWinVer.cmake)
+
+
+if ("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" OR "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "AMD64")
+    set(PROCESSOR_NAME x86Processor)
+    set(PROCESSOR_DEFINE __x86_64__)
+    add_definitions(-D__x86__)
+else ()
+    message(FATAL_ERROR "System: ${CMAKE_SYSTEM_PROCESSOR} not supported")
+endif ()
+
+
+# Variables used in configure_file
+if (WIN32)
+
+    set(OSVERSION "4")
+    set(PLATFORM_DEFINE "__NT__")
+    set(PLATFORM_NAME "Windows")
+    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
+    ##get_WIN32_WINNT(_WIN32_WINNT)
+    set(_WIN32_WINNT 0x0501) # force XP Compatibility for now
+    set(__WIN32__ 1)
+    set(CMAKE_REQUIRED_DEFINITIONS -D__WIN32__ -D__NT__ -D_WIN32_WINNT=${_WIN32_WINNT} -D__OSVERSION__=4)
+    add_definitions(-D__WIN32__ -D__NT__ -D_WIN32_WINNT=${_WIN32_WINNT} -D__OSVERSION__=4)
+elseif (UNIX AND NOT APPLE)
+    set(OSVERSION "2")
+    set(PLATFORM_DEFINE "__linux__")
+    set(PLATFORM_NAME "Linux")
+else ()
+    message(FATAL_ERROR "System: ${CMAKE_SYSTEM_NAME} not supported")
+endif ()
+
+
+set(CFG_HEADERS)
+set(CFG_LIBS)
+
+macro(CHECK_INCLUDE_AND_ADD header var)
+    CHECK_INCLUDE_FILES("${header}" ${var})
+    if (${var})
+        list(APPEND CFG_HEADERS "${header}")
+        list(APPEND CFG_LIBS ${ARGN})
+    endif ()
+endmacro(CHECK_INCLUDE_AND_ADD)
+
+
+if (NOT ${CMAKE_NO_STD_NAMESPACE})
+    set(HAVE_CATCH_BY_BASE 1)
+    set(HAVE_CONST_CAST 1)
+    set(HAVE_DYNAMIC_CAST 1)
+    set(HAVE_REINTERPRET_CAST 1)
+    set(HAVE_MEMBER_CONSTANTS 1)
+    set(HAVE_NAMESPACES 1)
+    set(HAVE_EXCEPTIONS 1)
+    set(HAVE_STD 1)
+endif ()
+
+
+
+CHECK_INCLUDE_AND_ADD(alloca.h HAVE_ALLOCA_H)
+CHECK_INCLUDE_AND_ADD(signal.h HAVE_SIGNAL_H)
+CHECK_INCLUDE_AND_ADD(errno.h HAVE_ERRNO_H)
+CHECK_INCLUDE_AND_ADD(fcntl.h HAVE_FCNTL_H)
+CHECK_INCLUDE_AND_ADD(ifaddrs.h HAVE_IFADDRS_H)
+CHECK_INCLUDE_AND_ADD(inttypes.h HAVE_INTTYPES_H)
+CHECK_INCLUDE_AND_ADD(memory.h HAVE_MEMORY_H)
+CHECK_INCLUDE_AND_ADD(nan.h HAVE_NAN_H)
+CHECK_INCLUDE_AND_ADD(netdb.h HAVE_NETDB_H)
+CHECK_INCLUDE_AND_ADD(stdint.h HAVE_STDINT_H)
+CHECK_INCLUDE_AND_ADD(stdlib.h HAVE_STDLIB_H)
+CHECK_INCLUDE_AND_ADD(stdio.h HAVE_STDIO_H)
+CHECK_INCLUDE_AND_ADD(stdarg.h HAVE_STDARG_H)
+CHECK_INCLUDE_AND_ADD(strings.h HAVE_STRINGS_H)
+CHECK_INCLUDE_AND_ADD(string.h HAVE_STRING_H)
+CHECK_INCLUDE_AND_ADD(sys/if.h HAVE_SYS_IF_H)
+CHECK_INCLUDE_AND_ADD(sys/ioctl.h HAVE_SYS_IOCTL_H)
+CHECK_INCLUDE_AND_ADD(sys/param.h HAVE_SYS_PARAM_H)
+CHECK_INCLUDE_AND_ADD(sys/poll.h HAVE_SYS_POLL_H)
+CHECK_INCLUDE_AND_ADD(sys/stat.h HAVE_SYS_STAT_H)
+if (NOT WIN32) # TODO Fix in Code
+    CHECK_INCLUDE_AND_ADD(sys/time.h HAVE_SYS_TIME_H)
+endif ()
+CHECK_INCLUDE_AND_ADD(sys/types.h HAVE_SYS_TYPES_H)
+CHECK_INCLUDE_AND_ADD(unistd.h HAVE_UNISTD_H)
+CHECK_INCLUDE_AND_ADD("winsock2.h;ws2tcpip.h" HAVE_WINSOCKS2_H ws2_32 mswsock)
+CHECK_INCLUDE_AND_ADD("sys/socket.h;netinet/in.h" HAVE_SOCKET_H)
+if (NOT WIN32) # TODO Fix in Code
+    CHECK_INCLUDE_AND_ADD("sys/time.h;time.h" TIME_WITH_SYS_TIME)
+endif ()
+
+set(CMAKE_REQUIRED_LIBRARIES "${CFG_LIBS}")
+set(CMAKE_EXTRA_INCLUDE_FILES "${CFG_HEADERS}")
+
+CHECK_SYMBOL_EXISTS(SIG_IGN "${CFG_HEADERS}" HAVE_SIG_IGN)
+CHECK_SYMBOL_EXISTS(alloca "${CFG_HEADERS}" HAVE_ALLOCA)
+CHECK_SYMBOL_EXISTS(access "${CFG_HEADERS}" HAVE_ACCESS)
+CHECK_SYMBOL_EXISTS(getnameinfo "${CFG_HEADERS}" HAVE_GETNAMEINFO)
+CHECK_SYMBOL_EXISTS(inet_ntop "${CFG_HEADERS}" HAVE_INET_NTOP)
+CHECK_SYMBOL_EXISTS(insinff "${CFG_HEADERS}" HAVE_INSINFF)
+CHECK_SYMBOL_EXISTS(isinf "${CFG_HEADERS}" HAVE_ISINF)
+CHECK_SYMBOL_EXISTS(isinfl "${CFG_HEADERS}" HAVE_ISINFL)
+CHECK_SYMBOL_EXISTS(IsNANorINF "${CFG_HEADERS}" HAVE_ISNANORINF)
+CHECK_SYMBOL_EXISTS(localtime "${CFG_HEADERS}" HAVE_LOCALTIME)
+CHECK_SYMBOL_EXISTS(nanosleep "${CFG_HEADERS}" HAVE_NANOSLEEP)
+CHECK_SYMBOL_EXISTS(poll "${CFG_HEADERS}" HAVE_POLL)
+CHECK_SYMBOL_EXISTS(rand_r "${CFG_HEADERS}" HAVE_RAND_R)
+CHECK_SYMBOL_EXISTS(sigaction "${CFG_HEADERS}" HAVE_SIGACTION)
+CHECK_SYMBOL_EXISTS(sigvec "${CFG_HEADERS}" HAVE_SIGVEC)
+CHECK_SYMBOL_EXISTS(snprintf "${CFG_HEADERS}" HAVE_SNPRINTF)
+CHECK_SYMBOL_EXISTS(strcasecmp "${CFG_HEADERS}" HAVE_STRCASECMP)
+CHECK_SYMBOL_EXISTS(strdup "${CFG_HEADERS}" HAVE_STRDUP)
+CHECK_SYMBOL_EXISTS(strerror "${CFG_HEADERS}" HAVE_STRERROR)
+CHECK_SYMBOL_EXISTS(strftime "${CFG_HEADERS}" HAVE_STRFTIME)
+CHECK_SYMBOL_EXISTS(stricmp "${CFG_HEADERS}" HAVE_STRICMP)
+CHECK_SYMBOL_EXISTS(strncasecmp "${CFG_HEADERS}" HAVE_STRNCASECMP)
+CHECK_SYMBOL_EXISTS(strtoul "${CFG_HEADERS}" HAVE_STRTOUL)
+CHECK_SYMBOL_EXISTS(strtoull "${CFG_HEADERS}" HAVE_STRTOULL)
+CHECK_SYMBOL_EXISTS(strtouq "${CFG_HEADERS}" HAVE_STRTOUQ)
+CHECK_SYMBOL_EXISTS(uname "${CFG_HEADERS}" HAVE_UNAME)
+CHECK_SYMBOL_EXISTS(vprintf "${CFG_HEADERS}" HAVE_VPRINTF)
+CHECK_SYMBOL_EXISTS(vsnprintf "${CFG_HEADERS}" HAVE_VSNPRINTF)
+CHECK_SYMBOL_EXISTS(getaddrinfo "${CFG_HEADERS}" HAVE_GETADDRINFO)
+CHECK_SYMBOL_EXISTS(gethostname "${CFG_HEADERS}" HAVE_GETHOSTNAME)
+CHECK_SYMBOL_EXISTS(getopt "${CFG_HEADERS}" HAVE_GETOPT)
+CHECK_SYMBOL_EXISTS(gettimeofday "${CFG_HEADERS}" HAVE_GETTIMEOFDAY)
+
+CHECK_TYPE_SIZE("struct lifconf" STRUCT_LIFCONF)
+CHECK_TYPE_SIZE("struct sockaddr_in6" HAVE_STRUCT_SOCKADDR_IN6)
+CHECK_TYPE_SIZE("((struct sockaddr_in*)0)->sin_len" HAVE_STRUCT_SOCKADDR_IN_SIN_LEN)
+CHECK_TYPE_SIZE("((struct sockaddr_in*)0)->sin_zero" HAVE_STRUCT_SOCKADDR_IN_SIN_ZERO)
+CHECK_TYPE_SIZE("struct sockaddr_storage" HAVE_STRUCT_SOCKADDR_STORAGE)
+if (NOT WIN32) # TODO Fix in Code
+    try_compile(GETTIMEOFDAY_TIMEZONE ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_LIST_DIR}/cmake/timeofdayTimezone.c)
+endif ()
+CHECK_TYPE_SIZE("socklen_t" SOCKLEN_T_EXISTS)
+if (SOCKLEN_T_EXISTS)
+    set(OMNI_SOCKNAME_SIZE_T socklen_t)
+endif ()
+
+set(CMAKE_EXTRA_INCLUDE_FILES)
+
+CHECK_TYPE_SIZE("wchar_t" SIZEOF_WCHAR_T)
+CHECK_TYPE_SIZE("bool" SIZEOF_BOOL LANGUAGE CXX)
+CHECK_TYPE_SIZE("bool" HAVE_BOOL LANGUAGE CXX)
+CHECK_TYPE_SIZE("char" SIZEOF_CHAR)
+CHECK_TYPE_SIZE("double" SIZEOF_DOUBLE)
+CHECK_TYPE_SIZE("float" SIZEOF_FLOAT)
+CHECK_TYPE_SIZE("int" SIZEOF_INT)
+CHECK_TYPE_SIZE("long" SIZEOF_LONG)
+CHECK_TYPE_SIZE("long double" SIZEOF_LONG_DOUBLE)
+CHECK_TYPE_SIZE("long long" SIZEOF_LONG_LONG)
+CHECK_TYPE_SIZE("short" SIZEOF_SHORT)
+CHECK_TYPE_SIZE("unsigned char" SIZEOF_UNSIGNED_CHAR)
+CHECK_TYPE_SIZE("void*" SIZEOF_VOIDP)
+
+
+option(OMNIORB_DISABLE_ALLOCA "define if you want to avoid use of alloca" OFF)
+option(OMNIORB_DISABLE_LONGDOUBLE "define if you want to disable long double support" OFF)
+option(OMNIORB_ENABLE_LOCK_TRACES "if you want mutexes to be traced" OFF)
+option(OMNI_DISABLE_ATOMIC_OPS "define if you want to disable atomic operations" OFF)
+option(OMNI_DISABLE_IPV6 "define if you want to disable IPv6 support" OFF)
+
+
+#/* define if the compiler supports covariant return types */
+#define OMNI_HAVE_COVARIANT_RETURNS /**/
+
+#/* define if __sync_add_and_fetch and __sync_sub_and_fetch are available */
+#define OMNI_HAVE_SYNC_ADD_AND_FETCH /**/
+
+# TODO Unused in Code?
+#/* define if base constructors have to be fully qualified */
+#/* #undef OMNI_REQUIRES_FQ_BASE_CTOR */
+
+
+# used for PackageConfig
+# TODO generate PackageConfig files
+set(PACKAGE_VERSION ${PROJECT_VERSION})
+
+if (SIZEOF_LONG EQUAL SIZEOF_INT)
+    set(OMNI_LONG_IS_INT 1)
+endif ()
+
+
+include(cmake/CheckStackDirection.cmake)
+CHECK_STACK_DIRECTION(STACK_DIRECTION)
+
+#/* Define to 1 if you have the ANSI C header files. */
+include(cmake/CheckHeaderSTDC.cmake)
+CHECK_HEADER_STDC(STDC_HEADERS)
+
+
+INCLUDE(TestBigEndian)
+TEST_BIG_ENDIAN(WORDS_BIGENDIAN)
+
+#ase "$host" in
+#*-*-linux-*)   plat_name="Linux";    plat_def="__linux__";    os_v="2";;
+#*-*-uclinux-*) plat_name="Linux";    plat_def="__linux__";    os_v="2";;
+#*-*-cygwin*)   plat_name="Cygwin";   plat_def="__cygwin__";   os_v="1";;
+#*-*-solaris*)  plat_name="SunOS";    plat_def="__sunos__";    os_v="5";;
+#*-*-osf3*)     plat_name="OSF1";     plat_def="__osf1__";     os_v="3";;
+#*-*-osf4*)     plat_name="OSF1";     plat_def="__osf1__";     os_v="4";;
+#*-*-osf5*)     plat_name="OSF1";     plat_def="__osf1__";     os_v="5";;
+#*-*-hpux10*)   plat_name="HPUX";     plat_def="__hpux__";     os_v="10";;
+#*-*-hpux11*)   plat_name="HPUX";     plat_def="__hpux__";     os_v="11";;
+#*-*-nextstep*) plat_name="NextStep"; plat_def="__nextstep__"; os_v="3";;
+#*-*-openstep*) plat_name="NextStep"; plat_def="__nextstep__"; os_v="3";;
+#*-*-irix*)     plat_name="IRIX";     plat_def="__irix__";     os_v="6";;
+#*-*-aix*)      plat_name="AIX";      plat_def="__aix__";      os_v="4";;
+#*-*-darwin*)   plat_name="Darwin";   plat_def="__darwin__";   os_v="1";;
+#*-*-freebsd3*) plat_name="FreeBSD";  plat_def="__freebsd__";  os_v="3";;
+#*-*-freebsd4*) plat_name="FreeBSD";  plat_def="__freebsd__";  os_v="4";;
+#*-*-freebsd5*) plat_name="FreeBSD";  plat_def="__freebsd__";  os_v="5";;
+#*-*-freebsd6*) plat_name="FreeBSD";  plat_def="__freebsd__";  os_v="6";;
+#*-*-freebsd7*) plat_name="FreeBSD";  plat_def="__freebsd__";  os_v="7";;
+#*-*-freebsd8*) plat_name="FreeBSD";  plat_def="__freebsd__";  os_v="8";;
+#*-*-kfreebsd*) plat_name="kFreeBSD";  plat_def="__FreeBSD_kernel__";  os_v="6";;
+#*-*-netbsd*)   plat_name="NetBSD";   plat_def="__netbsd__";   os_v="1";;
+#*-*-openbsd*)  plat_name="OpenBSD";  plat_def="__openbsd__";  os_v="3";;
+#*-*-sco*)      plat_name="OSR5";     plat_def="__osr5__";     os_v="5";;
+#*-*-gnu*)      plat_name="GNU";      plat_def="__hurd__" ;    os_v="0";;
+#esac
+
+#case "$host" in
+#i?86-*)   proc_name="x86Processor";     proc_def="__x86__";;
+#x86_64-*) proc_name="x8664Processor";   proc_def="__x86_64__";;
+#sparc-*)  proc_name="SparcProcessor";   proc_def="__sparc__";;
+#alpha*)   proc_name="AlphaProcessor";   proc_def="__alpha__";;
+#m68k-*)   proc_name="m68kProcessor";    proc_def="__m68k__";;
+#mips*)    proc_name="IndigoProcessor";  proc_def="__mips__";;
+#arm-*)    proc_name="ArmProcessor";     proc_def="__arm__";;
+#s390-*)   proc_name="s390Processor";    proc_def="__s390__";;
+#ia64-*)   proc_name="ia64Processor";    proc_def="__ia64__";;
+#hppa*)    proc_name="HppaProcessor";    proc_def="__hppa__";;
+#powerpc*) proc_name="PowerPCProcessor"; proc_def="__powerpc__";;
+#esac
+
+
+
+if (CMAKE_CXX_COMPILER_ID MATCHES "clang")
+    # using Clang
+elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
+    # using GCC
+    set(COMPILE_FLAG_WNO_UNUSED -Wno-unused)
+    set(COMPILE_FLAG_FEXCEPTIONS -fexceptions)
+    set(COMPILE_FLAG_FPERMISSIVE -fpermissive)
+    set(COMPILE_FLAG_WNO_WRITE_STRINGS -Wno-write-strings)
+elseif (CMAKE_CXX_COMPILER_ID MATCHES "Intel")
+    # using Intel C++
+elseif (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
+    # using Visual Studio C++
+endif ()
+
+configure_file(include/omniconfig.h.in ${CMAKE_CURRENT_SOURCE_DIR}/include/omniconfig.h)
+configure_file(include/omniORB4/acconfig_cmake.h.in ${CMAKE_CURRENT_SOURCE_DIR}/include/omniORB4/acconfig.h)
\ No newline at end of file
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
new file mode 100755
index 0000000..ed18599
--- /dev/null
+++ b/src/CMakeLists.txt
@@ -0,0 +1,6 @@
+add_subdirectory(tool)
+add_subdirectory(appl)
+add_subdirectory(lib)
+add_subdirectory(services)
+add_subdirectory(examples)
+
diff --git a/src/appl/CMakeLists.txt b/src/appl/CMakeLists.txt
new file mode 100755
index 0000000..2f23b78
--- /dev/null
+++ b/src/appl/CMakeLists.txt
@@ -0,0 +1,3 @@
+add_subdirectory(omniMapper)
+add_subdirectory(omniNames)
+add_subdirectory(utils)
diff --git a/src/appl/omniMapper/CMakeLists.txt b/src/appl/omniMapper/CMakeLists.txt
new file mode 100644
index 0000000..8152ee0
--- /dev/null
+++ b/src/appl/omniMapper/CMakeLists.txt
@@ -0,0 +1,20 @@
+set(OMNIMAPPER_EXE_SRC
+    omniMapper.cc)
+
+set(CONFIG_FILE_ENV_VAR CONFIG_FILE_ENV_VAR=\"OMNIMAPPER_CONFIG\")
+if(WIN32)
+set(CONFIG_FILE_DEFAULT CONFIG_FILE_DEFAULT=\"C:\\\\omniMapper.cfg\")
+    else()
+set(CONFIG_FILE_DEFAULT CONFIG_FILE_DEFAULT=\"/etc/omniMapper.cfg\")
+endif()
+
+add_executable(omniMapper ${OMNIMAPPER_EXE_SRC})
+target_link_libraries(omniMapper PRIVATE omnithread omniORB4)
+target_compile_definitions(omniMapper PRIVATE  ${CONFIG_FILE_ENV_VAR} ${CONFIG_FILE_DEFAULT})
+target_include_directories(omniMapper PRIVATE ${PROJECT_BINARY_DIR}/generated/lib/omniORB ${PROJECT_SOURCE_DIR}/include)
+target_compile_options(omniMapper PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS} )
+
+install(TARGETS omniMapper
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
diff --git a/src/appl/omniNames/CMakeLists.txt b/src/appl/omniNames/CMakeLists.txt
new file mode 100644
index 0000000..76d7f56
--- /dev/null
+++ b/src/appl/omniNames/CMakeLists.txt
@@ -0,0 +1,31 @@
+set(OMNINAMES_EXE_SRC
+        omniNames.cc
+        NamingContext_i.cc
+        log.cc
+        omniNamesWin.cc)
+
+
+if (OMNINAMES_LOG_DEFAULT_LOCATION)
+    set(DEFAULT_LOGDIR DEFAULT_LOGDIR=${OMNINAMES_LOG_DEFAULT_LOCATION})
+else ()
+    if (WIN32)
+        set(DEFAULT_LOGDIR DEFAULT_LOGDIR=\"C:\\\\TEMP\")
+    else ()
+        set(DEFAULT_LOGDIR DEFAULT_LOGDIR=\"/var/omniNames\")
+        INSTALL(CODE "FILE(MAKE_DIRECTORY /var/omniNames)")
+    endif ()
+endif ()
+
+
+add_executable(omniNames ${OMNINAMES_EXE_SRC})
+target_link_libraries(omniNames PRIVATE omniORB4 omnithread Threads::Threads)
+target_compile_definitions(omniNames PRIVATE  ${DEFAULT_LOGDIR})
+target_include_directories(omniNames PRIVATE . ${PROJECT_SOURCE_DIR}/include/include ${PROJECT_BINARY_DIR}/generated/lib/omniORB)
+target_compile_options(omniNames PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+
+install(TARGETS omniNames
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
+
diff --git a/src/appl/utils/CMakeLists.txt b/src/appl/utils/CMakeLists.txt
new file mode 100755
index 0000000..8daa847
--- /dev/null
+++ b/src/appl/utils/CMakeLists.txt
@@ -0,0 +1,4 @@
+add_subdirectory(catior)
+add_subdirectory(convertior)
+add_subdirectory(genior)
+add_subdirectory(nameclt)
diff --git a/src/appl/utils/catior/CMakeLists.txt b/src/appl/utils/catior/CMakeLists.txt
new file mode 100644
index 0000000..70adb77
--- /dev/null
+++ b/src/appl/utils/catior/CMakeLists.txt
@@ -0,0 +1,7 @@
+set(CATIOR_EXE_SRC
+    catior.cc)
+add_executable(catior ${CATIOR_EXE_SRC})
+target_link_libraries(catior PRIVATE omniORB4 omnithread Threads::Threads)
+target_compile_definitions(catior PRIVATE  )
+target_include_directories(catior PRIVATE ${PROJECT_BINARY_DIR}/generated/lib/omniORB ${PROJECT_SOURCE_DIR}/include)
+target_compile_options(catior PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS} )
\ No newline at end of file
diff --git a/src/appl/utils/convertior/CMakeLists.txt b/src/appl/utils/convertior/CMakeLists.txt
new file mode 100644
index 0000000..f259016
--- /dev/null
+++ b/src/appl/utils/convertior/CMakeLists.txt
@@ -0,0 +1,7 @@
+set(CONVERTIOR_EXE_SRC
+    convertior.cc)
+add_executable(convertior ${CONVERTIOR_EXE_SRC})
+target_link_libraries(convertior PRIVATE omniORB4 omnithread Threads::Threads)
+target_compile_definitions(convertior PRIVATE  )
+target_include_directories(convertior PRIVATE ${PROJECT_BINARY_DIR}/generated/lib/omniORB ${PROJECT_SOURCE_DIR}/include)
+target_compile_options(convertior PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS} )
\ No newline at end of file
diff --git a/src/appl/utils/genior/CMakeLists.txt b/src/appl/utils/genior/CMakeLists.txt
new file mode 100644
index 0000000..b2ffb7f
--- /dev/null
+++ b/src/appl/utils/genior/CMakeLists.txt
@@ -0,0 +1,7 @@
+set(GENIOR_EXE_SRC
+    genior.cc)
+add_executable(genior ${GENIOR_EXE_SRC})
+target_link_libraries(genior PRIVATE omniORB4 omnithread Threads::Threads)
+target_compile_definitions(genior PRIVATE  )
+target_include_directories(genior PRIVATE ${PROJECT_BINARY_DIR}/generated/lib/omniORB ${PROJECT_SOURCE_DIR}/include)
+target_compile_options(genior PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS} )
\ No newline at end of file
diff --git a/src/appl/utils/nameclt/CMakeLists.txt b/src/appl/utils/nameclt/CMakeLists.txt
new file mode 100644
index 0000000..ff85fd3
--- /dev/null
+++ b/src/appl/utils/nameclt/CMakeLists.txt
@@ -0,0 +1,7 @@
+set(NAMECLT_EXE_SRC
+    nameclt.cc)
+add_executable(nameclt ${NAMECLT_EXE_SRC})
+target_link_libraries(nameclt PRIVATE omniORB4 omnithread Threads::Threads)
+target_compile_definitions(nameclt PRIVATE  )
+target_include_directories(nameclt PRIVATE ${PROJECT_BINARY_DIR}/generated/lib/omniORB ${PROJECT_SOURCE_DIR}/include)
+target_compile_options(nameclt PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS} )
\ No newline at end of file
diff --git a/src/examples/CMakeLists.txt b/src/examples/CMakeLists.txt
new file mode 100644
index 0000000..e7bf615
--- /dev/null
+++ b/src/examples/CMakeLists.txt
@@ -0,0 +1 @@
+add_subdirectory(valuetype)
diff --git a/src/examples/valuetype/CMakeLists.txt b/src/examples/valuetype/CMakeLists.txt
new file mode 100644
index 0000000..c01ac80
--- /dev/null
+++ b/src/examples/valuetype/CMakeLists.txt
@@ -0,0 +1 @@
+add_subdirectory(simple)
diff --git a/src/examples/valuetype/simple/CMakeLists.txt b/src/examples/valuetype/simple/CMakeLists.txt
new file mode 100644
index 0000000..8be16b7
--- /dev/null
+++ b/src/examples/valuetype/simple/CMakeLists.txt
@@ -0,0 +1,25 @@
+
+set(GEN_DIR ${PROJECT_BINARY_DIR}/generated/lib/omniORB/omniORB4/)
+set(IDL_DIR ${CMAKE_CURRENT_SOURCE_DIR})
+
+RUN_OMNIIDL(${IDL_DIR}/value.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl "-Wba;-Wbdebug" "value.hh;valueSK.cc" SOURCE_FILES)
+
+add_executable(vserver vserver.cc ${GEN_DIR}/valueSK.cc ${GEN_DIR}/value.hh)
+add_executable(vclient vclient.cc ${GEN_DIR}/valueSK.cc ${GEN_DIR}/value.hh)
+add_executable(vcoloc vcoloc.cc ${GEN_DIR}/valueSK.cc ${GEN_DIR}/value.hh)
+
+target_link_libraries(vserver PRIVATE omniORB4 omnithread omniDynamic4 Threads::Threads)
+target_compile_definitions(vserver PRIVATE  ${DEFAULT_LOGDIR})
+target_include_directories(vserver PRIVATE . ${PROJECT_SOURCE_DIR}/include ${GEN_DIR})
+target_compile_options(vserver PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+target_link_libraries(vclient PRIVATE omniORB4 omnithread omniDynamic4 Threads::Threads)
+target_compile_definitions(vclient PRIVATE  ${DEFAULT_LOGDIR})
+target_include_directories(vclient PRIVATE . ${PROJECT_SOURCE_DIR}/include ${GEN_DIR})
+target_compile_options(vclient PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+
+target_link_libraries(vcoloc PRIVATE omniORB4 omnithread omniDynamic4 Threads::Threads)
+target_compile_definitions(vcoloc PRIVATE  ${DEFAULT_LOGDIR})
+target_include_directories(vcoloc PRIVATE . ${PROJECT_SOURCE_DIR}/include ${GEN_DIR})
+target_compile_options(vcoloc PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
diff --git a/src/lib/CMakeLists.txt b/src/lib/CMakeLists.txt
new file mode 100755
index 0000000..a0fcd2d
--- /dev/null
+++ b/src/lib/CMakeLists.txt
@@ -0,0 +1,2 @@
+add_subdirectory(omniORB)
+add_subdirectory(omnithread)
diff --git a/src/lib/omniORB/CMakeLists.txt b/src/lib/omniORB/CMakeLists.txt
new file mode 100755
index 0000000..8da356b
--- /dev/null
+++ b/src/lib/omniORB/CMakeLists.txt
@@ -0,0 +1,18 @@
+add_subdirectory(codesets)
+add_subdirectory(connections)
+add_subdirectory(dynamic)
+add_subdirectory(orbcore)
+add_subdirectory(ziop)
+add_subdirectory(ziopdynamic)
+
+if (${Python_VERSION_MAJOR} EQUAL 2)
+    install(DIRECTORY
+            ${CMAKE_CURRENT_SOURCE_DIR}/python/
+            DESTINATION ${PYTHON_SITE}
+            FILES_MATCHING PATTERN "*.py")
+else ()
+    install(DIRECTORY
+            ${CMAKE_CURRENT_SOURCE_DIR}/python3/
+            DESTINATION ${PYTHON_SITE}
+            FILES_MATCHING PATTERN "*.py")
+endif ()
\ No newline at end of file
diff --git a/src/lib/omniORB/codesets/CMakeLists.txt b/src/lib/omniORB/codesets/CMakeLists.txt
new file mode 100644
index 0000000..aa27cd7
--- /dev/null
+++ b/src/lib/omniORB/codesets/CMakeLists.txt
@@ -0,0 +1,47 @@
+set(OMNICODESETS4_SRC
+    cs-8859-2.cc
+    cs-8859-3.cc
+    cs-8859-4.cc
+    cs-8859-5.cc
+    cs-8859-6.cc
+    cs-8859-7.cc
+    cs-8859-8.cc
+    cs-8859-9.cc
+    cs-8859-10.cc
+    cs-8859-11.cc
+    cs-8859-13.cc
+    cs-8859-14.cc
+    cs-8859-15.cc
+    cs-8859-16.cc
+    cs-UCS-4.cc
+    cs-cp1250.cc
+    cs-cp1251.cc
+    cs-cp1252.cc
+    cs-cp1253.cc
+    cs-cp1254.cc
+    cs-cp1255.cc
+    cs-cp1256.cc
+    cs-cp1257.cc
+    cs-cp1258.cc
+    cs-037.cc
+    cs-500.cc
+    cs-EDF-4.cc
+    cs-GBK.cc
+    omniCodeSets.cc)
+add_library(omniCodeSets4_static STATIC ${OMNICODESETS4_SRC})
+target_link_libraries(omniCodeSets4_static PRIVATE omniORB4_static omnithread_static Threads::Threads)
+target_compile_definitions(omniCodeSets4_static PRIVATE USE_omniORB_logStream)
+target_compile_options(omniCodeSets4_static PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS} )
+
+
+add_library(omniCodeSets4 SHARED ${OMNICODESETS4_SRC})
+target_link_libraries(omniCodeSets4 PRIVATE omniORB4 omnithread Threads::Threads)
+target_compile_definitions(omniCodeSets4 PRIVATE USE_omniORB_logStream)
+target_compile_options(omniCodeSets4 PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS}  )
+
+
+install(TARGETS omniCodeSets4_static omniCodeSets4
+        EXPORT ${PROJECT_NAME}Targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
\ No newline at end of file
diff --git a/src/lib/omniORB/connections/CMakeLists.txt b/src/lib/omniORB/connections/CMakeLists.txt
new file mode 100644
index 0000000..a82b8b9
--- /dev/null
+++ b/src/lib/omniORB/connections/CMakeLists.txt
@@ -0,0 +1,24 @@
+
+set(OMNICONNECTIONMGMT4_SRC
+        omniConnectionMgmt.cc
+        dataStub.cc
+        )
+
+add_library(omniConnectionMgmt4_static STATIC ${OMNICONNECTIONMGMT4_SRC})
+target_link_libraries(omniConnectionMgmt4_static PRIVATE omniORB4_static omnithread_static Threads::Threads)
+target_compile_definitions(omniConnectionMgmt4_static PRIVATE )
+target_compile_options(omniConnectionMgmt4_static PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+
+add_library(omniConnectionMgmt4 SHARED ${OMNICONNECTIONMGMT4_SRC})
+target_link_libraries(omniConnectionMgmt4 PRIVATE omniORB4 omnithread Threads::Threads)
+target_compile_definitions(omniConnectionMgmt4 PRIVATE )
+target_compile_options(omniConnectionMgmt4 PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+
+
+install(TARGETS omniConnectionMgmt4_static omniConnectionMgmt4
+        EXPORT ${PROJECT_NAME}Targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
\ No newline at end of file
diff --git a/src/lib/omniORB/dynamic/CMakeLists.txt b/src/lib/omniORB/dynamic/CMakeLists.txt
new file mode 100644
index 0000000..848102d
--- /dev/null
+++ b/src/lib/omniORB/dynamic/CMakeLists.txt
@@ -0,0 +1,58 @@
+set(OMNIDYNAMIC4_SRC
+    ami.cc
+    valueBase.cc
+    valueFactory.cc
+    valueTracker.cc
+    valueType.cc
+    unknownValue.cc
+    abstractBase.cc
+    any.cc
+    anyStream.cc
+    constants.cc
+    context.cc
+    contextList.cc
+    dynamicImplementation.cc
+    dynamicLib.cc
+    dynAny.cc
+    dynAnyNil.cc
+    dynException.cc
+    environment.cc
+    exceptionList.cc
+    namedValue.cc
+    nvList.cc
+    policy.cc
+    pseudoBase.cc
+    request.cc
+    orbMultiRequest.cc
+    serverRequest.cc
+    tcParser.cc
+    typecode.cc
+    unknownUserExn.cc
+    poastub.cc
+    bootstrapdynstub.cc
+    corbaidldynstub.cc
+    corbaidlstub.cc
+    irstub.cc
+    ir.cc
+    irdynstub.cc
+    Namingdynstub.cc
+    boxes.cc
+    pollablestub.cc
+    messagingstub.cc
+    omniTypedefs.cc)
+add_library(omniDynamic4_static STATIC ${OMNIDYNAMIC4_SRC})
+target_link_libraries(omniDynamic4_static PUBLIC omniORB4_static omnithread_static Threads::Threads)
+target_compile_definitions(omniDynamic4_static PRIVATE USE_omniORB_logStream _OMNIORB_DYNAMIC_LIBRARY)
+target_compile_options(omniDynamic4_static PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS} )
+
+
+add_library(omniDynamic4 SHARED ${OMNIDYNAMIC4_SRC})
+target_link_libraries(omniDynamic4 PUBLIC omniORB4 omnithread Threads::Threads)
+target_compile_definitions(omniDynamic4 PRIVATE USE_omniORB_logStream _OMNIORB_DYNAMIC_LIBRARY)
+target_compile_options(omniDynamic4 PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS}  )
+
+install(TARGETS omniDynamic4_static omniDynamic4
+        EXPORT ${PROJECT_NAME}Targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
\ No newline at end of file
diff --git a/src/lib/omniORB/orbcore/CMakeLists.txt b/src/lib/omniORB/orbcore/CMakeLists.txt
new file mode 100644
index 0000000..2bbfddc
--- /dev/null
+++ b/src/lib/omniORB/orbcore/CMakeLists.txt
@@ -0,0 +1,216 @@
+set(GIOP_SRCS
+        omniTransport.cc
+        cdrStream.cc
+        cdrStreamAdapter.cc
+        cdrMemoryStream.cc
+        cdrValueChunkStream.cc
+        giopEndpoint.cc
+        giopRope.cc
+        giopStrand.cc
+        giopStream.cc
+        giopServer.cc
+        giopWorker.cc
+        giopRendezvouser.cc
+        GIOP_C.cc
+        GIOP_S.cc
+        giopStreamImpl.cc
+        giopImpl10.cc
+        giopImpl11.cc
+        giopImpl12.cc
+        giopBiDir.cc
+        giopMonitor.cc
+        SocketCollection.cc)
+
+set(TRANSPORT_SRCS
+        tcpSocket.cc
+        tcp/tcpTransportImpl.cc
+        tcp/tcpConnection.cc
+        tcp/tcpEndpoint.cc
+        tcp/tcpAddress.cc
+        tcp/tcpActive.cc)
+
+set(UNIXSOCK_SRCS
+        unix/unixTransportImpl.cc
+        unix/unixConnection.cc
+        unix/unixEndpoint.cc
+        unix/unixAddress.cc
+        unix/unixActive.cc)
+
+set(SSL_SRCS
+        ssl/sslActive.cc
+        ssl/sslAddress.cc
+        ssl/sslConnection.cc
+        ssl/sslEndpoint.cc
+        ssl/sslTransportImpl.cc
+        ssl/sslContext.cc)
+
+set(CODESET_SRCS
+        codeSets.cc
+        cs-8bit.cc
+        cs-16bit.cc
+        cs-8859-1.cc
+        cs-UTF-8.cc
+        cs-UTF-16.cc)
+
+set(BUILTIN_STUB_SRCS
+        bootstrapstub.cc
+        objectStub.cc
+        poastubs.cc)
+
+if (vxWorksPlatform)
+    #ifndef vxNamesRequired
+    #BUILTIN_STUB_SRCS += Namingstub.cc
+    #endif
+else ()
+    set(BUILTIN_STUB_SRCS ${BUILTIN_STUB_SRCS} Namingstub.cc)
+endif ()
+
+set(ORB_SRCS
+        anonObject.cc
+        callDescriptor.cc
+        constants.cc
+        corbaObject.cc
+        corbaBoa.cc
+        corbaOrb.cc
+        corbaFixed.cc
+        corbaString.cc
+        corbaWString.cc
+        current.cc
+        dynamicLib.cc
+        exception.cc
+        exceptn.cc
+        initRefs.cc
+        interceptors.cc
+        invoker.cc
+        ior.cc
+        libcWrapper.cc
+        omniIdentity.cc
+        localIdentity.cc
+        localObject.cc
+        logIOstream.cc
+        minorCode.cc
+        objectAdapter.cc
+        omniInternal.cc
+        omniIOR.cc
+        omniObjRef.cc
+        omniORB.cc
+        omniServant.cc
+        orbOptions.cc
+        orbOptionsFile.cc
+        poa.cc
+        poamanager.cc
+        policy.cc
+        portableserver.cc
+        proxyFactory.cc
+        remoteIdentity.cc
+        inProcessIdentity.cc
+        shutdownIdentity.cc
+        callHandle.cc
+        tracedthread.cc
+        transportRules.cc
+        rmutex.cc
+        uri.cc
+        omniPolicy.cc
+        ${GIOP_SRCS}
+        ${CODESET_SRCS}
+        ${BUILTIN_STUB_SRCS}
+        ${TRANSPORT_SRCS}
+        )
+
+if (UNIX)
+    set(ORB_SRCS ${ORB_SRCS} ${UNIXSOCK_SRCS})
+endif ()
+
+
+set(OMNICORE_STATIC_DEFINITIONS)
+set(OMNICORE_DEFINITIONS
+        USE_omniORB_logStream
+        _OMNIORB_LIBRARY
+        OMNIORB_VERSION_STRING="${OMNIORB_VERSION}"
+        "OMNIORB_VERSION_HEX=${OMNIORB_VERSION_HEX}")
+
+if (OMNIORB_CONFIG_DEFAULT_LOCATION)
+    set(CONFIG_DEFAULT_LOCATION ${OMNIORB_CONFIG_DEFAULT_LOCATION})
+else ()
+    if (UNIX)
+        set(CONFIG_DEFAULT_LOCATION ${CMAKE_INSTALL_FULL_SYSCONFDIR}/omniORB.cfg)
+    endif ()
+    if (WIN32)
+        set(CONFIG_DEFAULT_LOCATION C:\\\\OMNIORB.CFG)
+    endif ()
+    if (vxWorksPlatform) # No vxWorks support in cmake
+        set(CONFIG_DEFAULT_LOCATION /a2/tmp/omniORB.cfg)
+    endif ()
+endif ()
+if(UNIX)
+    file(COPY ${CMAKE_SOURCE_DIR}/sample.cfg DESTINATION ${CMAKE_BINARY_DIR})
+    file(RENAME ${CMAKE_BINARY_DIR}/sample.cfg ${CMAKE_BINARY_DIR}/omniORB.cfg)
+    install(FILES ${CMAKE_BINARY_DIR}/omniORB.cfg DESTINATION ${CMAKE_INSTALL_SYSCONFDIR})
+endif()
+
+set(OMNICORE_DEFINITIONS
+        ${OMNICORE_DEFINITIONS}
+        CONFIG_DEFAULT_LOCATION="${CONFIG_DEFAULT_LOCATION}"
+        )
+
+##########################################################################
+if (OMNIORB_CONFIG_ENV)
+    set(CONFIG_ENV ${CONFIG_ENV} ${OMNIORB_CONFIG_ENV)
+else ()
+    set(CONFIG_ENV ${CONFIG_ENV} "OMNIORB_CONFIG")
+endif ()
+
+set(OMNICORE_DEFINITIONS
+        ${OMNICORE_DEFINITIONS}
+        CONFIG_ENV="${CONFIG_ENV}")
+
+##########################################################################
+
+set(PLATFORM_LIBS)
+if (WIN32)
+    set(PLATFORM_LIBS ws2_32 advapi32)
+    set(OMNICORE_STATIC_DEFINITIONS ${OMNICORE_STATIC_DEFINITIONS} _WINSTATIC)
+    set(ORB_SRCS ${ORB_SRCS} orbOptionsReg.cc)
+    if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
+        set(ORB_SRCS ${ORB_SRCS} msvcdllstub.cc)
+    endif ()
+endif ()
+
+
+add_library(omniORB4_static STATIC ${ORB_SRCS})
+target_link_libraries(omniORB4_static PUBLIC omnithread_static Threads::Threads ${PLATFORM_LIBS})
+target_compile_definitions(omniORB4_static PRIVATE ${OMNICORE_DEFINITIONS} ${OMNICORE_STATIC_DEFINITIONS})
+target_include_directories(omniORB4_static
+        PRIVATE
+        ${CMAKE_CURRENT_SOURCE_DIR}
+        PUBLIC
+        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include/omniORB4/internal>
+        $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/generated/lib/omniORB>
+        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
+        $<INSTALL_INTERFACE:include>)
+target_compile_options(omniORB4_static PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS} ${COMPILE_FLAG_FPERMISSIVE} ${COMPILE_FLAG_WNO_WRITE_STRINGS})
+add_dependencies(omniORB4_static RunGenerator)
+
+
+add_library(omniORB4 SHARED ${ORB_SRCS})
+target_link_libraries(omniORB4 PUBLIC omnithread Threads::Threads ${PLATFORM_LIBS})
+target_compile_definitions(omniORB4 PRIVATE ${OMNICORE_DEFINITIONS})
+target_include_directories(omniORB4
+        PRIVATE
+        ${CMAKE_CURRENT_SOURCE_DIR}
+        PUBLIC
+        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include/omniORB4/internal>
+        $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/generated/lib/omniORB>
+        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
+        $<INSTALL_INTERFACE:include>)
+target_compile_options(omniORB4 PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS} ${COMPILE_FLAG_FPERMISSIVE} ${COMPILE_FLAG_WNO_WRITE_STRINGS})
+add_dependencies(omniORB4 RunGenerator)
+
+
+install(TARGETS omniORB4_static omniORB4
+        EXPORT ${PROJECT_NAME}Targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
+
+add_subdirectory(ssl)
diff --git a/src/lib/omniORB/orbcore/ssl/CMakeLists.txt b/src/lib/omniORB/orbcore/ssl/CMakeLists.txt
new file mode 100644
index 0000000..f8e062f
--- /dev/null
+++ b/src/lib/omniORB/orbcore/ssl/CMakeLists.txt
@@ -0,0 +1,56 @@
+find_package(OpenSSL)
+
+if (OPENSSL_FOUND)
+    set(SSL_SRCS
+            sslActive.cc
+            sslAddress.cc
+            sslAddress.h
+            sslConnection.cc
+            sslConnection.h
+            sslContext.cc
+            sslEndpoint.cc
+            sslEndpoint.h
+            sslTransportImpl.cc
+            sslTransportImpl.h)
+
+
+    if (WIN32)
+        set(OMNISSL_STATIC_DEFINITIONS ${OMNISSL_STATIC_DEFINITIONS} _WINSTATIC)
+        #endif
+        if (CMAKE_CXX_COMPILER_ID MATCHES "clang")
+            # using Clang
+        elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
+            # using GCC
+
+        elseif (CMAKE_CXX_COMPILER_ID MATCHES "Intel")
+            # using Intel C++
+        elseif (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
+            # using Visual Studio C++
+            set(SSL_SRCS ${SSL_SRCS} msvcdllstub.cc)
+        endif ()
+
+    endif ()
+
+    add_library(omnisslTP4_static STATIC ${SSL_SRCS})
+    target_link_libraries(omnisslTP4_static PUBLIC omniORB4_static Threads::Threads ${OPENSSL_LIBRARIES} ${PLATFORM_LIBS})
+    target_compile_definitions(omnisslTP4_static PRIVATE _OMNIORB_SSL_LIBRARY ${OMNISSL_STATIC_DEFINITIONS})
+    target_include_directories(omnisslTP4_static PRIVATE ${OPENSSL_INCLUDE_DIR} ..)
+    target_compile_options(omnisslTP4_static PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS} ${COMPILE_FLAG_FPERMISSIVE} ${COMPILE_FLAG_WNO_WRITE_STRINGS})
+
+
+    add_library(omnisslTP4 SHARED ${SSL_SRCS})
+    target_link_libraries(omnisslTP4 PUBLIC omniORB4 Threads::Threads ${OPENSSL_LIBRARIES} ${PLATFORM_LIBS})
+    target_compile_definitions(omnisslTP4 PRIVATE _OMNIORB_SSL_LIBRARY)
+    target_include_directories(omnisslTP4 PRIVATE ${OPENSSL_INCLUDE_DIR} ..)
+
+    target_compile_options(omnisslTP4 PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS} ${COMPILE_FLAG_FPERMISSIVE} ${COMPILE_FLAG_WNO_WRITE_STRINGS})
+
+
+    install(TARGETS omnisslTP4_static omnisslTP4
+            EXPORT ${PROJECT_NAME}Targets
+            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
+else ()
+    message(WARNING "OpenSSL not found, disable omnisslTP")
+endif ()
\ No newline at end of file
diff --git a/src/lib/omniORB/ziop/CMakeLists.txt b/src/lib/omniORB/ziop/CMakeLists.txt
new file mode 100644
index 0000000..d896fb8
--- /dev/null
+++ b/src/lib/omniORB/ziop/CMakeLists.txt
@@ -0,0 +1,35 @@
+find_package(ZLIB)
+
+if (ZLIB_FOUND)
+
+    set(OMNIZIOP4_SRC
+            messagingStubs.cc
+            omniZIOP.cc
+            omniZIOPImpl.h
+            ziopStubs.cc
+            zlibCompressor.cc
+            zlibCompressor.h
+            )
+
+    add_library(omniZIOP4_static STATIC ${OMNIZIOP4_SRC})
+    target_link_libraries(omniZIOP4_static PUBLIC omniORB4_static omnithread_static Threads::Threads ZLIB::ZLIB)
+    target_include_directories(omniZIOP4_static PRIVATE ${ZLIB_INCLUDE_DIR}  .)
+    target_compile_definitions(omniZIOP4_static PRIVATE _OMNIORB_ZIOP_LIBRARY)
+    target_compile_options(omniZIOP4_static PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+    add_library(omniZIOP4 SHARED ${OMNIZIOP4_SRC})
+    target_link_libraries(omniZIOP4 PUBLIC omniORB4 omnithread Threads::Threads ZLIB::ZLIB)
+    target_include_directories(omniZIOP4 PRIVATE ${ZLIB_INCLUDE_DIR}  .)
+    target_compile_definitions(omniZIOP4 PRIVATE _OMNIORB_ZIOP_LIBRARY)
+    target_compile_options(omniZIOP4 PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+
+    install(TARGETS omniZIOP4_static omniZIOP4
+            EXPORT ${PROJECT_NAME}Targets
+            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
+
+else()
+    message(WARNING "Zlib not found, disable omniZIOP")
+endif ()
\ No newline at end of file
diff --git a/src/lib/omniORB/ziopdynamic/CMakeLists.txt b/src/lib/omniORB/ziopdynamic/CMakeLists.txt
new file mode 100644
index 0000000..f59605a
--- /dev/null
+++ b/src/lib/omniORB/ziopdynamic/CMakeLists.txt
@@ -0,0 +1,31 @@
+set(OMNIZIOPDYNAMIC4_SRC
+        ../ziop/ziopStubs.cc
+        omniZIOPDynamic.cc
+        compressionDynStubs.cc
+        ziopDynStubs.cc)
+
+
+find_package(ZLIB)
+
+if (ZLIB_FOUND)
+
+
+    add_library(omniZIOPDynamic4_static STATIC ${OMNIZIOPDYNAMIC4_SRC})
+    target_link_libraries(omniZIOPDynamic4_static PUBLIC omniORB4_static omniZIOP4_static omniDynamic4_static omnithread Threads::Threads ZLIB::ZLIB)
+    target_compile_definitions(omniZIOPDynamic4_static PRIVATE _OMNIORB_ZIOP_LIBRARY)
+    target_include_directories(omniZIOPDynamic4_static PRIVATE ${ZLIB_INCLUDE_DIR}  .)
+    target_compile_options(omniZIOPDynamic4_static PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+    add_library(omniZIOPDynamic4 SHARED ${OMNIZIOPDYNAMIC4_SRC})
+    target_link_libraries(omniZIOPDynamic4 PUBLIC omniORB4 omniZIOP4 omniDynamic4 omnithread Threads::Threads ZLIB::ZLIB)
+    target_compile_definitions(omniZIOPDynamic4 PRIVATE _OMNIORB_ZIOP_LIBRARY)
+    target_include_directories(omniZIOPDynamic4 PRIVATE ${ZLIB_INCLUDE_DIR} .)
+    target_compile_options(omniZIOPDynamic4 PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+    install(TARGETS omniZIOPDynamic4_static omniZIOPDynamic4
+            EXPORT ${PROJECT_NAME}Targets
+            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
+
+endif ()
\ No newline at end of file
diff --git a/src/lib/omnithread/CMakeLists.txt b/src/lib/omnithread/CMakeLists.txt
new file mode 100644
index 0000000..8447a35
--- /dev/null
+++ b/src/lib/omnithread/CMakeLists.txt
@@ -0,0 +1,31 @@
+
+set(OMNITHREAD_SRC threaddata.cc
+        ${PROJECT_SOURCE_DIR}/include/omnithread.h)
+if (UNIX)
+    set(OMNITHREAD_SRC ${OMNITHREAD_SRC} posix.cc)
+    set(OMNITHREAT_DEFS NoNanoSleep PthreadDraftVersion=10)
+else ()
+    set(OMNITHREAD_SRC ${OMNITHREAD_SRC} nt.cc)
+    set(OMNITHREAT_DEFS_STATIC "_WINSTATIC")
+    set(OMNITHREAT_DEFS_SHARED "_OMNITHREAD_DLL")
+endif ()
+
+add_library(omnithread_static STATIC ${OMNITHREAD_SRC})
+target_compile_definitions(omnithread_static PRIVATE ${OMNITHREAT_DEFS} ${OMNITHREAT_DEFS_STATIC})
+target_include_directories(omnithread_static PRIVATE . ${PROJECT_SOURCE_DIR}/include)
+target_link_libraries(omnithread_static PUBLIC Threads::Threads)
+target_compile_options(omnithread_static PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+
+add_library(omnithread SHARED ${OMNITHREAD_SRC})
+target_link_libraries(omnithread PRIVATE Threads::Threads)
+target_compile_definitions(omnithread PRIVATE ${OMNITHREAT_DEFS} ${OMNITHREAT_DEFS_SHARED})
+target_include_directories(omnithread PRIVATE . ${PROJECT_SOURCE_DIR}/include)
+target_link_libraries(omnithread PUBLIC Threads::Threads)
+target_compile_options(omnithread PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+install(TARGETS omnithread_static omnithread
+        EXPORT ${PROJECT_NAME}Targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
diff --git a/src/services/CMakeLists.txt b/src/services/CMakeLists.txt
new file mode 100755
index 0000000..f23c2d3
--- /dev/null
+++ b/src/services/CMakeLists.txt
@@ -0,0 +1 @@
+add_subdirectory(mklib)
diff --git a/src/services/mklib/CMakeLists.txt b/src/services/mklib/CMakeLists.txt
new file mode 100755
index 0000000..af97d7c
--- /dev/null
+++ b/src/services/mklib/CMakeLists.txt
@@ -0,0 +1,90 @@
+set(GEN_DIR ${PROJECT_BINARY_DIR}/generated/services/mklib/)
+set(IDL_DIR ${PROJECT_SOURCE_DIR}/idl/COS/)
+file(MAKE_DIRECTORY ${GEN_DIR})
+
+RUN_OMNIIDL(${IDL_DIR}/CosNotifyChannelAdmin.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl/COS "-Wba;-Wbdebug" "CosNotifyChannelAdmin.hh;CosNotifyChannelAdminSK.cc;CosNotifyChannelAdminDynSK.cc")
+RUN_OMNIIDL(${IDL_DIR}/CosNotifyFilter.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl/COS "-Wba;-Wbdebug" "CosNotifyFilter.hh;CosNotifyFilterSK.cc;CosNotifyFilterDynSK.cc")
+RUN_OMNIIDL(${IDL_DIR}/CosNotifyComm.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl/COS "-Wba;-Wbdebug" "CosNotifyComm.hh;CosNotifyCommSK.cc;CosNotifyCommDynSK.cc")
+RUN_OMNIIDL(${IDL_DIR}/CosNotification.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl/COS "-Wba;-Wbdebug" "CosNotification.hh;CosNotificationSK.cc;CosNotificationDynSK.cc")
+RUN_OMNIIDL(${IDL_DIR}/CosEventChannelAdmin.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl/COS "-Wba;-Wbdebug" "CosEventChannelAdmin.hh;CosEventChannelAdminSK.cc;CosEventChannelAdminDynSK.cc")
+RUN_OMNIIDL(${IDL_DIR}/CosEventComm.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl/COS "-Wba;-Wbdebug" "CosEventComm.hh;CosEventCommSK.cc;CosEventCommDynSK.cc")
+RUN_OMNIIDL(${IDL_DIR}/CosTime.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl/COS "-Wba;-Wbdebug" "CosTime.hh;CosTimeSK.cc;CosTimeDynSK.cc")
+RUN_OMNIIDL(${IDL_DIR}/TimeBase.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl/COS "-Wba;-Wbdebug" "TimeBase.hh;TimeBaseSK.cc;TimeBaseDynSK.cc")
+RUN_OMNIIDL(${IDL_DIR}/CosLifeCycle.idl ${GEN_DIR} ${PROJECT_SOURCE_DIR}/idl/COS "-Wba;-Wbdebug" "CosLifeCycle.hh;CosLifeCycleSK.cc;CosLifeCycleDynSK.cc")
+
+
+set(COSDYNAMIC4_SRC
+        ${GEN_DIR}/TimeBaseDynSK.cc
+        ${GEN_DIR}/CosTimeDynSK.cc
+        ${GEN_DIR}/CosEventCommDynSK.cc
+        ${GEN_DIR}/CosEventChannelAdminDynSK.cc
+        ${GEN_DIR}/CosNotificationDynSK.cc
+        ${GEN_DIR}/CosNotifyCommDynSK.cc
+        ${GEN_DIR}/CosNotifyFilterDynSK.cc
+        ${GEN_DIR}/CosNotifyChannelAdminDynSK.cc
+        ${GEN_DIR}/CosLifeCycleDynSK.cc)
+
+set(COS4_SRC
+        ${GEN_DIR}/TimeBase.hh
+        ${GEN_DIR}/TimeBaseSK.cc
+        ${GEN_DIR}/CosTime.hh
+        ${GEN_DIR}/CosTimeSK.cc
+        ${GEN_DIR}/CosEventComm.hh
+        ${GEN_DIR}/CosEventCommSK.cc
+        ${GEN_DIR}/CosEventChannelAdmin.hh
+        ${GEN_DIR}/CosEventChannelAdminSK.cc
+        ${GEN_DIR}/CosNotification.hh
+        ${GEN_DIR}/CosNotificationSK.cc
+        ${GEN_DIR}/CosNotifyComm.hh
+        ${GEN_DIR}/CosNotifyCommSK.cc
+        ${GEN_DIR}/CosNotifyFilter.hh
+        ${GEN_DIR}/CosNotifyFilterSK.cc
+        ${GEN_DIR}/CosNotifyChannelAdmin.hh
+        ${GEN_DIR}/CosNotifyChannelAdminSK.cc
+        ${GEN_DIR}/CosLifeCycle.hh
+        ${GEN_DIR}/CosLifeCycleSK.cc)
+
+
+ADD_CUSTOM_TARGET(CosRunGenerator DEPENDS
+        omniidl
+        omnicpp
+        ${COSDYNAMIC4_SRC}
+        ${COS4_SRC}
+        COMMENT "Checking if re-generation is required for target COS4")
+
+add_library(COS4_static STATIC ${COS4_SRC})
+target_link_libraries(COS4_static PRIVATE omniORB4_static omniDynamic4 omnithread Threads::Threads)
+target_compile_definitions(COS4_static PRIVATE  _COS_LIBRARY ENABLE_CLIENT_IR_SUPPORT)
+target_include_directories(COS4_static PRIVATE ${GEN_DIR}/ ${PROJECT_SOURCE_DIR}/include .)
+target_compile_options(COS4_static PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+add_dependencies(COS4_static CosRunGenerator)
+
+
+add_library(COS4 SHARED ${COS4_SRC})
+target_link_libraries(COS4 PRIVATE omniORB4 omniDynamic4 omnithread Threads::Threads)
+target_compile_definitions(COS4 PRIVATE  _COS_LIBRARY ENABLE_CLIENT_IR_SUPPORT)
+target_include_directories(COS4 PRIVATE ${GEN_DIR}/ ${PROJECT_SOURCE_DIR}/include .)
+target_compile_options(COS4 PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+add_dependencies(COS4 CosRunGenerator)
+
+
+add_library(COSDynamic4_static STATIC ${COSDYNAMIC4_SRC})
+target_link_libraries(COSDynamic4_static PUBLIC COS4 omniORB4_static omniDynamic4_static omnithread_static Threads::Threads)
+target_compile_definitions(COSDynamic4_static PRIVATE _COS_LIBRARY ENABLE_CLIENT_IR_SUPPORT)
+target_include_directories(COSDynamic4_static PRIVATE ${GEN_DIR}/ .)
+target_compile_options(COSDynamic4_static PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+
+add_library(COSDynamic4 SHARED ${COSDYNAMIC4_SRC})
+target_link_libraries(COSDynamic4 PUBLIC COS4 omniORB4 omniDynamic4 omnithread Threads::Threads)
+target_compile_definitions(COSDynamic4 PRIVATE  _COS_LIBRARY ENABLE_CLIENT_IR_SUPPORT USE_core_stub_in_nt_dll)
+target_include_directories(COSDynamic4 PRIVATE ${GEN_DIR}/ .)
+target_compile_options(COSDynamic4 PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+
+
+
+install(TARGETS COS4_static COS4 COSDynamic4_static COSDynamic4
+        EXPORT ${PROJECT_NAME}Targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
\ No newline at end of file
diff --git a/src/tool/CMakeLists.txt b/src/tool/CMakeLists.txt
new file mode 100755
index 0000000..31d6da1
--- /dev/null
+++ b/src/tool/CMakeLists.txt
@@ -0,0 +1,2 @@
+#add_subdirectory(omkdepend)
+add_subdirectory(omniidl)
diff --git a/src/tool/omkdepend/CMakeLists.txt b/src/tool/omkdepend/CMakeLists.txt
new file mode 100644
index 0000000..9c1dab3
--- /dev/null
+++ b/src/tool/omkdepend/CMakeLists.txt
@@ -0,0 +1,12 @@
+set(OMKDEPEND_EXE_SRC
+    include.c
+    main.c
+    parse.c
+    pr.c
+    cppsetup.c
+    ifparser.c)
+add_executable(omkdepend ${OMKDEPEND_EXE_SRC})
+target_compile_definitions(omkdepend PRIVATE DEBUG)
+target_include_directories(omkdepend PRIVATE . ${PROJECT_SOURCE_DIR}/include)
+target_compile_options(omkdepend PRIVATE -O )
+
diff --git a/src/tool/omniidl/CMakeLists.txt b/src/tool/omniidl/CMakeLists.txt
new file mode 100755
index 0000000..8e0b930
--- /dev/null
+++ b/src/tool/omniidl/CMakeLists.txt
@@ -0,0 +1 @@
+add_subdirectory(cxx)
diff --git a/src/tool/omniidl/cxx/CMakeLists.txt b/src/tool/omniidl/cxx/CMakeLists.txt
new file mode 100644
index 0000000..765fb82
--- /dev/null
+++ b/src/tool/omniidl/cxx/CMakeLists.txt
@@ -0,0 +1,98 @@
+add_subdirectory(cccp)
+
+set(_OMNIIDLMODULE_SRC
+        y.tab.cc
+        lex.yy.cc
+        idlerr.cc
+        idlutil.cc
+        idltype.cc
+        ${PROJECT_SOURCE_DIR}/include/omniORB4/acconfig.h
+        ${PROJECT_SOURCE_DIR}/include/omniORB4/CORBA_sysdep_auto.h
+        ${PROJECT_SOURCE_DIR}/include/omniORB4/CORBA_sysdep.h
+        ${PROJECT_SOURCE_DIR}/include/omniconfig.h
+        ${PROJECT_SOURCE_DIR}/include/omniORB4/internal/tcpSocket.h
+        idlrepoId.cc
+        idlscope.cc
+        idlexpr.cc
+        idlast.cc
+        idlvalidate.cc
+        idldump.cc
+        idlconfig.cc
+        idlfixed.cc
+        idlpython.cc)
+
+
+
+if (WIN32)
+    add_executable(omniidl ${_OMNIIDLMODULE_SRC})
+    target_compile_definitions(omniidl PRIVATE PYTHON_INCLUDE=<Python.h> PYTHON_THREAD_INC=<pythread.h> MSDOS OMNIIDL_EXECUTABLE IDLMODULE_VERSION="0x2630")
+    target_include_directories(omniidl PRIVATE ${PYTHON_INCLUDE_DIR} . ${PROJECT_SOURCE_DIR}/include)
+    target_compile_options(omniidl PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+    target_link_libraries(omniidl PRIVATE Python::Python)
+    if (${Python_VERSION_MAJOR} EQUAL 3)
+        if (WIN32 AND CMAKE_CXX_COMPILER_ID MATCHES "GNU")
+            set_property(TARGET omniidl APPEND_STRING PROPERTY LINK_FLAGS "-municode ")
+        endif ()
+    endif ()
+
+    install(TARGETS omniidl
+            EXPORT ${PROJECT_NAME}Targets
+            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
+
+else ()
+
+    add_library(omniidl SHARED ${_OMNIIDLMODULE_SRC})
+    target_compile_definitions(omniidl PRIVATE PYTHON_INCLUDE=<Python.h> PYTHON_THREAD_INC=<pythread.h> IDLMODULE_VERSION="0x2630")
+    target_include_directories(omniidl PRIVATE ${PYTHON_INCLUDE_DIR} . ${PROJECT_SOURCE_DIR}/include)
+    target_compile_options(omniidl PRIVATE ${COMPILE_FLAG_WNO_UNUSED} ${COMPILE_FLAG_FEXCEPTIONS})
+    target_link_libraries(omniidl PRIVATE Python::Python)
+    set_target_properties(omniidl PROPERTIES PREFIX "")
+    set_target_properties(omniidl PROPERTIES OUTPUT_NAME "_omniidl")
+
+
+    install(TARGETS omniidl EXPORT ${PROJECT_NAME}Targets LIBRARY DESTINATION ${PYTHON_SITE})
+
+    set(prefix ${CMAKE_INSTALL_PREFIX})
+    set(exec_prefix ${CMAKE_INSTALL_PREFIX})
+    set(pythondir ${CMAKE_INSTALL_PREFIX}/${PYTHON_SITE})
+    set(pyexecdir ${CMAKE_INSTALL_PREFIX}/${PYTHON_SITE})
+    set(PYTHON ${Python_EXECUTABLE})
+
+    if (${Python_VERSION_MAJOR} EQUAL 2)
+        configure_file(${PROJECT_SOURCE_DIR}/src/tool/omniidl/python/scripts/omniidl.in ${PROJECT_BINARY_DIR}/bin/omniidl @ONLY)
+    else ()
+        configure_file(${PROJECT_SOURCE_DIR}/src/tool/omniidl/python3/scripts/omniidl.in ${PROJECT_BINARY_DIR}/bin/omniidl @ONLY)
+    endif ()
+
+    install(FILES ${PROJECT_BINARY_DIR}/bin/omniidl DESTINATION bin
+            PERMISSIONS WORLD_EXECUTE WORLD_READ OWNER_WRITE)
+
+endif ()
+
+INSTALL(DIRECTORY ${PROJECT_BINARY_DIR}/generated/lib/omniORB/
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+        FILES_MATCHING PATTERN "*.h*")
+
+if (${Python_VERSION_MAJOR} EQUAL 2)
+    install(DIRECTORY
+            ${PROJECT_SOURCE_DIR}/src/tool/omniidl/python/omniidl
+            ${PROJECT_SOURCE_DIR}/src/tool/omniidl/python/omniidl_be
+            DESTINATION ${PYTHON_SITE}
+            FILES_MATCHING PATTERN "*.py")
+else ()
+    install(DIRECTORY
+            ${PROJECT_SOURCE_DIR}/src/tool/omniidl/python3/omniidl
+            ${PROJECT_SOURCE_DIR}/src/tool/omniidl/python3/omniidl_be
+            DESTINATION ${PYTHON_SITE}
+            FILES_MATCHING PATTERN "*.py")
+endif ()
+
+add_dependencies(omniidl omnicpp)
+
+
+
+
+
+
diff --git a/src/tool/omniidl/cxx/cccp/CMakeLists.txt b/src/tool/omniidl/cxx/cccp/CMakeLists.txt
new file mode 100644
index 0000000..01ff084
--- /dev/null
+++ b/src/tool/omniidl/cxx/cccp/CMakeLists.txt
@@ -0,0 +1,19 @@
+set(OMNICPP_EXE_SRC
+        cexp.c
+        cccp.c
+        config.c
+        alloca.c)
+
+if (WIN32)
+    set(OMNICPP_EXE_SRC ${OMNICPP_EXE_SRC} index.c)
+endif ()
+
+add_executable(omnicpp ${OMNICPP_EXE_SRC})
+target_include_directories(omnicpp PRIVATE ${PROJECT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR})
+target_compile_definitions(omnicpp PRIVATE HAVE_CONFIG_H)
+
+install(TARGETS omnicpp
+        EXPORT ${PROJECT_NAME}Targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/static)
\ No newline at end of file
-- 
2.17.1

